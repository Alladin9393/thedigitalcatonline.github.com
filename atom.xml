<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Digital Cat</title><link href="https://www.thedigitalcatonline.com/" rel="alternate"></link><link href="https://www.thedigitalcatonline.com/atom.xml" rel="self"></link><id>https://www.thedigitalcatonline.com/</id><updated>2020-03-27T09:00:00+01:00</updated><subtitle>Adventures of a curious cat in the land of programming</subtitle><entry><title>Multiple inheritance and mixin classes in Python</title><link href="https://www.thedigitalcatonline.com/blog/2020/03/27/mixin-classes-in-python/" rel="alternate"></link><published>2020-03-27T09:00:00+01:00</published><updated>2020-03-27T09:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2020-03-27:/blog/2020/03/27/mixin-classes-in-python/</id><summary type="html">&lt;p&gt;This post describes what mixin classes are in theory, why we need them and how they can be implemented in Python. It also shows a working example from the class-based views code of the Django framework.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently revisited three old posts on Django class-based views that I wrote for this blog, updating them to Django 3.0 (you can find them &lt;a href="https://www.thedigitalcatonline.com/blog/2013/10/28/digging-up-django-class-based-views-1/"&gt;here&lt;/a&gt;) and noticed once again that the code base uses &lt;em&gt;mixin classes&lt;/em&gt; to increase code reuse. I also realised that mixins are not very popular in Python, so I decided to explore them, brushing up my knowledge of the OOP theory in the meanwhile.&lt;/p&gt;
&lt;p&gt;To fully appreciate the content of the post, be sure you grasp two pillars of the OOP approach: &lt;strong&gt;delegation&lt;/strong&gt;, in particular how it is implemented through inheritance, and &lt;strong&gt;polymorphism&lt;/strong&gt;. &lt;a href="https://www.thedigitalcatonline.com/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance/"&gt;This post about delegation&lt;/a&gt; and &lt;a href="https://www.thedigitalcatonline.com/blog/2014/08/21/python-3-oop-part-4-polymorphism/"&gt;this post about polymorphism&lt;/a&gt; contain all you need to understand how Python implements those concepts.&lt;/p&gt;
&lt;h1 id="multiple-inheritance-blessing-and-curse"&gt;Multiple inheritance: blessing and curse&lt;a class="headerlink" href="#multiple-inheritance-blessing-and-curse" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="general-concepts"&gt;General concepts&lt;a class="headerlink" href="#general-concepts" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To discuss mixins we need to start from one of the most controversial subjects in the whole OOP world: multiple inheritance. This is a natural extension of the concept of simple inheritance, where a class automatically delegates method and attribute resolution to another class (the parent class).&lt;/p&gt;
&lt;p&gt;Let me state it again, as it is important for the rest of the discussion: &lt;em&gt;inheritance is just an automatic delegation mechanism&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Delegation was introduced in OOP as a way to reduce code duplication. When an object needs a specific feature it just delegates it to another class (either explicitly or implicitly), so the code is written just once.&lt;/p&gt;
&lt;p&gt;Let's consider the example of code management website, clearly completely fictional and not inspired by any existing product. Let's assume we created the following hierarchy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      assignable reviewable item
 (assign_to_user, ask_review_to_user)
                 ^
                 |
                 |
                 |
            pull request
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which allows us to put in &lt;code&gt;pull request&lt;/code&gt; only the specific code required by that element. This is a great achievement, as it is what libraries do for code, but on live objects. Method calls and delegation are nothing more than messages between objects, so the delegation hierarchy is just a simple networked system.&lt;/p&gt;
&lt;p&gt;Unfortunately, the use of inheritance over composition often leads to systems that, paradoxically, increase code duplication. The main problem lies in the fact that inheritance can directly delegate to only one other class (the parent class), as opposed to composition, where the object can delegate to any number of other ones. This limitation of inheritance means that we might have a class that inherits from another one because it needs some of its features, but doing this receives features it doesn't want, or shouldn't have.&lt;/p&gt;
&lt;p&gt;Let's continue the example of the code management portal, and consider an &lt;code&gt;issue&lt;/code&gt;, which is an item that we want to store in the system, but cannot be reviewed by a user. If we create a hierarchy like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      assignable reviewable item
   (assign_to_user, ask_review_to_user)
                   ^
                   |
                   |
                   |
                   |
          +--------+--------+
          |                 |
          |                 |
          |                 |
        issue          pull request
   (not reviewable)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we end up putting the features related to the review process in an object that shouldn't have them. The standard solution to this problem is that of increasing the depth of the inheritance hierarchy and to derive from the new simpler ancestor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          assignable item
         (assign_to_user)
                 ^
                 |
                 |
                 |
                 |
          +------+--------------+
          |                     |
          |                     |
          |                     |
          |         reviewable assignable item
          |            (ask_review_to_user)
          |                     ^
          |                     |
          |                     |
          |                     |
        issue              pull request
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, this approach stops being viable as soon as an object needs to inherit from a given class but not from the parent of that class. For example, an element that has to be reviewable but not assignable, like a &lt;code&gt;best practice&lt;/code&gt; that we want to add to the site. If we want to keep using inheritance, the only solution at this point is to duplicate the code that implements the reviewable nature of the item (or the code that implements the assignable feature) and create two different class hierarchies.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          assignable item              +--------&amp;gt;  reviewable item
         (assign_to_user)              |         (ask_review_to_user)
                 ^                     |                  ^
                 |                     |                  |
                 |                     |                  |
                 |             CODE DUPLICATION           |
                 |                     |                  |
          +------+--------------+      |                  |
          |                     |      |                  |
          |                     |      |                  |
          |                     |      V                  |
          |         reviewable assignable item            |
          |            (ask_review_to_user)               |
          |                     ^                         |
          |                     |                         |
          |                     |                         |
          |                     |                         |
        issue              pull request             best practice
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that this doesn't even take into account that the new &lt;code&gt;reviewable item&lt;/code&gt; might need attributes from &lt;code&gt;assignable item&lt;/code&gt;, which prompts for another level of depth in the hierarchy, where we isolate those features in a more generic class. So, unfortunately, chances are that this is only the first of many compromises we will have to accept to keep the system in a stable state if we can't change our approach.&lt;/p&gt;
&lt;p&gt;Multiple inheritance was then introduced in OOP, as it was clear that an object might want to delegate certain actions to a given class, and other actions to a different one, mimicking what life forms do when they inherit traits from multiple ancestors (parents, grandparents, etc.).&lt;/p&gt;
&lt;p&gt;The above situation can then be solved having &lt;code&gt;pull request&lt;/code&gt; inherit from both the class that provides the assign feature and from the one that implements the reviewable nature. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          assignable item                          reviewable item
         (assign_to_user)                        (ask_review_to_user)
                 ^                                      ^  ^
                 |                                      |  |
                 |                                      |  |
                 |                                      |  |
                 |                                      |  |
          +------+-------------+ +----------------------+  |
          |                    | |                         |
          |                    | |                         |
          |                    | |                         |
          |                    | |                         |
          |                    | |                         |
          |                    | |                         |
          |                    | |                         |
          |                    | |                         |
          |                    | |                         |
        issue              pull request              best practice
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generally speaking, then, multiple inheritance is introduced to give the programmer a way to keep using inheritance without introducing code duplication, keeping the class hierarchy simpler and cleaner. Eventually, everything we do in software design is to try and separate concerns, that is, to isolate features, and multiple inheritance can help to do this.&lt;/p&gt;
&lt;p&gt;These are just examples and might be valid or not, depending on the concrete case, but they clearly show the issues that we can have even with a very simple hierarchy of 4 classes. Many of these problems clearly arise from the fact that we wanted to implement delegation only through inheritance, and I dare to say that 80% of the architectural errors in OOP projects come from using inheritance instead of composition and from using god objects, that is classes that have responsibilities over too many different parts of the system. Always remember that OOP was born with the idea of small objects interacting through messages, so the considerations we make for monolithic architectures are valid even here.&lt;/p&gt;
&lt;p&gt;That said, as inheritance and composition implement two different types of delegation (&lt;em&gt;to be&lt;/em&gt; and &lt;em&gt;to have&lt;/em&gt;), they are both valuable, and multiple inheritance is the way to remove the single provider limitation that comes from having only one parent class.&lt;/p&gt;
&lt;h2 id="why-is-it-controversial"&gt;Why is it controversial?&lt;a class="headerlink" href="#why-is-it-controversial" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given what I just said, multiple inheritance seems to be a blessing. When an object can inherit from multiple parents, we can easily spread responsibilities among different classes and use only the ones we need, promoting code reuse and avoiding god objects.&lt;/p&gt;
&lt;p&gt;Unfortunately, things are not that simple. First of all, we face the issue that every microservice-oriented architecture faces, that is the risk of going from god objects (the extreme monolithic architecture) to almost empty objects (the extreme distributed approach), burdening the programmer with too a fine-grained control that eventually results in a system where relationships between objects are so complicated that it becomes impossible to grasp the effect of a change in the code.&lt;/p&gt;
&lt;p&gt;There is a more immediate problem in multiple inheritance, though. As it happens with the natural inheritance, parents can provide the same "genetic trait" in two different flavours, but the resulting individual will have only one. Leaving aside genetics (which is incredibly more complicated than programming) and going back to OOP, we face a problem when an object inherits from two other objects that provide the same attribute.&lt;/p&gt;
&lt;p&gt;So, if your class &lt;code&gt;Child&lt;/code&gt; inherits from parents &lt;code&gt;Parent1&lt;/code&gt; and &lt;code&gt;Parent2&lt;/code&gt;, and both provide the &lt;code&gt;__init__&lt;/code&gt; method, which one should your object use?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Parent2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# This inherits from both Parent1 and Parent2, which __init__ does it use?&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Things can even get worse, as parents can have different signatures of the common method, for example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# This inherits from Ancestor but redefines __init__&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# This inherits from Ancestor but redefines __init__&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Parent2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# This inherits from both Parent1 and Parent2, which __init__ does it use?&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem can be extended even further, introducing a common ancestor above &lt;code&gt;Parent1&lt;/code&gt; and &lt;code&gt;Parent2&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ancestor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The common ancestor, defines its own __init__ method&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ancestor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# This inherits from Ancestor but redefines __init__&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ancestor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# This inherits from Ancestor but redefines __init__&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Parent2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# This inherits from both Parent1 and Parent2, which __init__ does it use?&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we already have a problem when we introduce multiple parents, and a common ancestor just adds a new level of complexity. The ancestor class can clearly be at any point of the inheritance tree (grandparent, grand-grandparent, etc.), the important part is that it is shared between &lt;code&gt;Parent1&lt;/code&gt; and &lt;code&gt;Parent2&lt;/code&gt;. This is the so-called diamond problem, as the inheritance graph has the shape of a diamond&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      Ancestor
       ^   ^
      /     \
     /       \
Parent1     Parent2
    ^         ^
     \       /
      \     /
       Child
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, while with single-parent inheritance the rules are straightforward, with multiple inheritance we immediately have a more complex situation that doesn't have a trivial solution. Does all this prevent multiple inheritance from being implemented?&lt;/p&gt;
&lt;p&gt;Not at all! There are solutions to this problem, as we will see shortly, but this further level of intricacy makes multiple inheritance something that doesn't fit easily in a design and has to be implemented carefully to avoid subtle bugs. Remember that inheritance is an automatic delegation mechanism, as this makes what happens in the code less evident. For these reasons, multiple inheritance is often depicted as scary and convoluted, and usually given some space only in the advanced OOP courses, at least in the Python world. I believe every Python programmer, instead, should familiarise with it and learn how to take advantage of it.&lt;/p&gt;
&lt;h2 id="multiple-inheritance-the-python-way"&gt;Multiple inheritance: the Python way&lt;a class="headerlink" href="#multiple-inheritance-the-python-way" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let's see how it is possible to solve the diamond problem. Unlike genetics, we programmers can't afford any level of uncertainty or randomness in our processes, so in the presence of a possible ambiguity as the one created by multiple inheritance, we need to write down a rule that will be strictly followed in every case. In Python, this rule goes by the name of MRO (Method Resolution Order), which was introduced in Python 2.3 and is described in &lt;a href="https://www.python.org/download/releases/2.3/mro/"&gt;this document&lt;/a&gt; by Michele Simionato.&lt;/p&gt;
&lt;p&gt;There is a lot to say about MRO and the underlying C3 linearisation algorithm, but for the scope of this post, it is enough to see how it solves the diamond problem. In case of multiple inheritance, Python follows the usual inheritance rules (automatic delegation to an ancestor if the attribute is not present locally), but the &lt;em&gt;order&lt;/em&gt; followed to traverse the inheritance tree now includes all the classes that are specified in the class signature. In the example above, Python would look for attributes in the following order: &lt;code&gt;Child&lt;/code&gt;, &lt;code&gt;Parent1&lt;/code&gt;, &lt;code&gt;Parent2&lt;/code&gt;, &lt;code&gt;Ancestor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, as in the case of standard inheritance, this means that the first class in the list that implements a specific attribute will be the selected provider for that resolution. An example might clarify the matter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ancestor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rewind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ancestor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ancestor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Parent2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case an instance &lt;code&gt;c&lt;/code&gt; of &lt;code&gt;Child&lt;/code&gt; would provide &lt;code&gt;rewind&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;, and &lt;code&gt;flush&lt;/code&gt;. When &lt;code&gt;c.rewind&lt;/code&gt; is called, the code in &lt;code&gt;Ancestor&lt;/code&gt; is executed, as this is the first class in the MRO list that provides that method. The method &lt;code&gt;open&lt;/code&gt; is provided by &lt;code&gt;Parent1&lt;/code&gt;, while &lt;code&gt;close&lt;/code&gt; is provided by &lt;code&gt;Parent2&lt;/code&gt;. If the method &lt;code&gt;c.flush&lt;/code&gt; is called, the code is provided by the &lt;code&gt;Child&lt;/code&gt; class itself, that redefines it overriding the one provided by &lt;code&gt;Parent2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As we see with the &lt;code&gt;flush&lt;/code&gt; method, Python doesn't change its behaviour when it comes to method overriding with multiple parents. The first implementation of a method with that name is executed, and the parent's implementation is not automatically called. As in the case of standard inheritance, then, it's up to us to design classes with matching method signatures.&lt;/p&gt;
&lt;h3 id="under-the-bonnet"&gt;Under the bonnet&lt;a class="headerlink" href="#under-the-bonnet" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;How does multiple inheritance work internally? How does Python create the MRO list?&lt;/p&gt;
&lt;p&gt;Python has a very simple approach to OOP (even though it ultimately ends with a mind-blowing ouroboros, see &lt;a href="https://www.thedigitalcatonline.com/blog/2014/09/01/python-3-oop-part-5-metaclasses/"&gt;here&lt;/a&gt;). Classes are objects themselves, so they contain data structures that are used by the language to provide features, and delegation makes no exception. When we run a method on an object, Python silently uses the &lt;code&gt;__getattribute__&lt;/code&gt; method (provided by &lt;code&gt;object&lt;/code&gt;), which uses &lt;code&gt;__class__&lt;/code&gt; to reach the class from the instance, and &lt;code&gt;__bases__&lt;/code&gt; to find the parent classes. The latter, in particular, is a tuple, so it is ordered, and it contains all the classes that the current class inherits from.&lt;/p&gt;
&lt;p&gt;The MRO is created using only &lt;code&gt;__bases__&lt;/code&gt;, but the underlying algorithm is not that trivial and has to with the monotonicity of the resulting class linearisation. It is less scary than it sounds, but not something you want to read while suntanning, probably. If that's the case, the aforementioned &lt;a href="https://www.python.org/download/releases/2.3/mro/"&gt;document&lt;/a&gt; by Michele Simionato contains all the gory details on class linearisation that you always wanted to explore while lying on the beach.&lt;/p&gt;
&lt;h1 id="inheritance-and-interfaces"&gt;Inheritance and interfaces&lt;a class="headerlink" href="#inheritance-and-interfaces" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To approach mixins, we need to discuss inheritance in detail, and specifically the role of method signatures.&lt;/p&gt;
&lt;p&gt;In Python, when you override a method provided by an ancestor class, you have to decide if and when to call its original implementation. This gives the programmer the freedom to decide whether they need to just augment a method or to replace it completely. Remember that the only thing Python does when a class inherits from another is to automatically delegate methods that are not implemented.&lt;/p&gt;
&lt;p&gt;When a class inherits from another we are ideally creating objects that keep the backward compatibility with the interface of the parent class, to allow a polymorphic use of them. This means that when we inherit from a class and override a method changing its signature we are doing something that is dangerous and, at least from the point of view of polymorphism, wrong. Have a look at this example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that &lt;code&gt;Square&lt;/code&gt; changes the signature of both &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;resize&lt;/code&gt;. Now, when we instantiate those classes we need to keep in mind the different signature of &lt;code&gt;__init__&lt;/code&gt; in &lt;code&gt;Square&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;q1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We usually accept that an enhanced version of a class accepts more parameters when it is initialized, as we do not expect it to be polymorphic on &lt;code&gt;__init__&lt;/code&gt;. Problems arise when we try to leverage polymorphism on other methods, for example resizing all &lt;code&gt;GraphicalEntity&lt;/code&gt; objects in a list&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt;
    &lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt;
    &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since &lt;code&gt;r1&lt;/code&gt;, &lt;code&gt;r2&lt;/code&gt;, and &lt;code&gt;q1&lt;/code&gt; are all objects that inherit from &lt;code&gt;GraphicalEntity&lt;/code&gt; we expect them to provide the interface provided by that class, but this fails, because &lt;code&gt;Square&lt;/code&gt; changed the signature of &lt;code&gt;resize&lt;/code&gt;. The same would happen if we instantiated them in a for loop from a list of classes, but as I said it is generally accepted that child classes change the signature of the &lt;code&gt;__init__&lt;/code&gt; method. This is not true, for example, in a plugin-based system, where all plugins shall be initialized the same way.&lt;/p&gt;
&lt;p&gt;This is a classic problem in OOP. While we, as humans, perceive a square just as a slightly special rectangle, from the interface point of view the two classes are different, and thus should not be in the same inheritance tree when we are dealing with dimensions. This is an important consideration: &lt;code&gt;Rectangle&lt;/code&gt; and &lt;code&gt;Square&lt;/code&gt; are polymorphic on the &lt;code&gt;move&lt;/code&gt; method, but not on &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;resize&lt;/code&gt;. So, the question is if we could somehow separate the two natures of being movable and resizable.&lt;/p&gt;
&lt;p&gt;Now, discussing interfaces, polymorphism, and the reasons behind them would require an entirely separate post, so in the following sections, I'm going to ignore the matter and just consider the object interface optional. You will thus find examples of objects that break the interface of the parent, and objects that keep it. Just remember: whenever you change the signature of a method you change the (implicit) interface of the object, and thus you stop polymorphism. I'll discuss another time if I consider this right or wrong.&lt;/p&gt;
&lt;h1 id="mixin-classes"&gt;Mixin classes&lt;a class="headerlink" href="#mixin-classes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;MRO is a good solution that prevents ambiguity, but it leaves programmers with the responsibility of creating sensible inheritance trees. The algorithm helps to resolve complicated situations, but this doesn't mean we should create them in the first place. So, how can we leverage multiple inheritance without creating systems that are too complicated to grasp? Moreover, is it possible to use multiple inheritance to solve the problem of managing the double (or multiple) nature of an object, as in the previous example of a movable and resizable shape?&lt;/p&gt;
&lt;p&gt;The solution comes from mixin classes: those are small classes that provide attributes but are not included in the standard inheritance tree, working more as "additions" to the current class than as proper ancestors. Mixins originate in the LISP programming language, and specifically in what could be considered the first version of the Common Lisp Object System, the Flavors extension. Modern OOP languages implement mixins in many different ways: Scala, for example, has a feature called &lt;em&gt;traits&lt;/em&gt;, which live in their own space with a specific hierarchy that doesn't interfere with the proper class inheritance.&lt;/p&gt;
&lt;h2 id="mixin-classes-in-python"&gt;Mixin classes in Python&lt;a class="headerlink" href="#mixin-classes-in-python" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python doesn't provide support for mixins with any dedicated language feature, so we use multiple inheritance to implement them. This clearly requires great discipline from the programmer, as it violates one of the main assumptions for mixins: their orthogonality to the inheritance tree. In Python, so-called mixins are classes that live in the normal inheritance tree, but they are kept small to avoid creating hierarchies that are too complicated for the programmer to grasp. In particular, mixins shouldn't have common ancestors other than &lt;code&gt;object&lt;/code&gt; with the other parent classes.&lt;/p&gt;
&lt;p&gt;Let's have a look at a simple example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResizableMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResizableGraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ResizableMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the class &lt;code&gt;ResizableMixin&lt;/code&gt; doesn't inherit from &lt;code&gt;GraphicalEntity&lt;/code&gt;, but directly from &lt;code&gt;object&lt;/code&gt;, so &lt;code&gt;ResizableGraphicalEntity&lt;/code&gt; gets from it just the &lt;code&gt;resize&lt;/code&gt; method. As we said before, this simplifies the inheritance tree of &lt;code&gt;ResizableGraphicalEntity&lt;/code&gt; and helps to reduce the risk of the diamond problem. It leaves us free to use &lt;code&gt;GraphicalEntity&lt;/code&gt; as a parent for other classes without having to inherit methods that we don't want. Please remember that this happens because the classes are designed to avoid it, and not because of language features: the MRO algorithm just ensures that there will always be an unambiguous choice in case of multiple ancestors.&lt;/p&gt;
&lt;p&gt;Mixins cannot usually be too generic. After all, they are designed to add features to classes, but these new features often interact with other pre-existing features of the augmented class. In this case, the &lt;code&gt;resize&lt;/code&gt; method interacts with the attributes &lt;code&gt;size_x&lt;/code&gt; and &lt;code&gt;size_y&lt;/code&gt; that have to be present in the object. Obviously, there are obviously examples of &lt;em&gt;pure&lt;/em&gt; mixins, but since they would require no initialization their scope is definitely limited.&lt;/p&gt;
&lt;h2 id="using-mixins-to-hijack-inheritance"&gt;Using mixins to hijack inheritance&lt;a class="headerlink" href="#using-mixins-to-hijack-inheritance" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to the MRO, Python programmers can leverage multiple inheritance to override methods that objects inherit from their parents, allowing them to customise classes without code duplication. Let's have a look at this example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the &lt;code&gt;Button&lt;/code&gt; class extends the &lt;code&gt;GraphicalEntity&lt;/code&gt; one in a classic way, using &lt;code&gt;super&lt;/code&gt; to call the parent's &lt;code&gt;__init__&lt;/code&gt; method before adding the new &lt;code&gt;status&lt;/code&gt; attribute. Now, if I wanted to create a &lt;code&gt;SquareButton&lt;/code&gt; class I have two choices.&lt;/p&gt;
&lt;p&gt;I might just override &lt;code&gt;__init__&lt;/code&gt; in the new class&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SquareButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SquareButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which performs the requested job, but strongly connects the feature of having a single dimension with the &lt;code&gt;Button&lt;/code&gt; nature. If we wanted to create a circular image we could not inherit from &lt;code&gt;SquareButton&lt;/code&gt;, as the image has a different nature.&lt;/p&gt;
&lt;p&gt;The second option is that of isolating the features connected with having a single dimension in a mixin class, and add it as a parent for the new class&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SingleDimensionMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SquareButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SingleDimensionMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SquareButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second solution gives the same final result, but promotes code reuse, as now the &lt;code&gt;SingleDimensionMixin&lt;/code&gt; class can be applied to other classes derived from &lt;code&gt;GraphicalEntity&lt;/code&gt; and make them accept only one size, while in the first solution that feature was tightly connected with the &lt;code&gt;Button&lt;/code&gt; ancestor class.&lt;/p&gt;
&lt;p&gt;Please note that the position of the mixin is important. As &lt;code&gt;super&lt;/code&gt; follows the MRO, the called method is dispatched to the nearest class in the linearisation. If you put &lt;code&gt;SingleDimensionMixin&lt;/code&gt; after &lt;code&gt;Button&lt;/code&gt; in the definition of &lt;code&gt;SquareButton&lt;/code&gt;, Python would complain. In that case the call &lt;code&gt;b = SquareButton(10, 20, 200)&lt;/code&gt; and the method signature &lt;code&gt;__init__(self, pos_x, pos_y, size_x, size_y)&lt;/code&gt; would not match.&lt;/p&gt;
&lt;p&gt;Mixins are not used only when you want to change the object's interface, though. Leveraging &lt;code&gt;super&lt;/code&gt; we can achieve interesting designs like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicalEntity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LimitSizeMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;size_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;size_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LimitSizeButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LimitSizeMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LimitSizeButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, &lt;code&gt;LimitSizeButton&lt;/code&gt; calls &lt;code&gt;__init__&lt;/code&gt; of its first parent, which is &lt;code&gt;Button&lt;/code&gt;. This, however, delegates the call to the next class in the MRO before initialising &lt;code&gt;self.status&lt;/code&gt;, so the call is dispatched to &lt;code&gt;LimitSizeMixin&lt;/code&gt;, that first operates some changes and eventually dispatches it to the original recipient, &lt;code&gt;GraphicalEntity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remember that in Python, you are never forced to call the parent's implementation of a method, so the mixin here might also stop the dispatching mechanism if that is the requirement of the business logic of the new object.&lt;/p&gt;
&lt;h1 id="a-real-example-django-class-based-views"&gt;A real example: Django class-based views&lt;a class="headerlink" href="#a-real-example-django-class-based-views" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Finally, let's get to the original source of inspiration for this post: the Django codebase. I will show you here how the Django programmers used multiple inheritance and mixin classes to promote code reuse, and you will now hopefully grasp all the reasons behind them.&lt;/p&gt;
&lt;p&gt;The example I chose can be found in the &lt;a href="https://github.com/django/django/blob/3.0/django/views/generic/base.py#L117"&gt;code of generic views&lt;/a&gt;, and in particular in two classes: &lt;code&gt;TemplateResponseMixin&lt;/code&gt; and &lt;code&gt;TemplateView&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As you might know, Django &lt;code&gt;View&lt;/code&gt; class is the ancestor of all class-based views and provides a &lt;code&gt;dispatch&lt;/code&gt; method that converts HTTP request methods into Python function calls (&lt;a href="https://github.com/django/django/blob/3.0/django/views/generic/base.py#L89"&gt;CODE&lt;/a&gt;). Now, the &lt;code&gt;TemplateView&lt;/code&gt; is a view that answers to a GET request rendering a template with the data coming from a context passed when the view is called. Given the mechanism behind Django views, then, &lt;code&gt;TemplateView&lt;/code&gt; should implement a &lt;code&gt;get&lt;/code&gt; method and return the content of the HTTP response. The code of the class is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemplateResponseMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ContextMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Render a template. Pass keyword arguments from the URLconf to the context.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see &lt;code&gt;TemplateView&lt;/code&gt; is a &lt;code&gt;View&lt;/code&gt;, but it uses two mixins to inject features. Let's have a look at &lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TemplateResponseMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[I removed the code of the class as it is not crucial for the present discussion, you can see the full class &lt;a href="https://github.com/django/django/blob/3.0/django/views/generic/base.py#L117"&gt;here&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;It is clear that &lt;code&gt;TemplateResponseMixin&lt;/code&gt; just adds to any class the two methods &lt;code&gt;get_template_names&lt;/code&gt; and &lt;code&gt;render_to_response&lt;/code&gt;. The latter is called in the &lt;code&gt;get&lt;/code&gt; method of &lt;code&gt;TemplateView&lt;/code&gt; to create the response. Let's have a look at a simplified schema of the calls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET request --&amp;gt; TemplateView.dispatch --&amp;gt; View.dispatch --&amp;gt; TemplateView.get --&amp;gt; TemplateResponseMixin.render_to_response
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It might look complicated, but try to follow the code a couple of times and the whole picture will start to make sense. The important thing I want to stress is that the code in &lt;code&gt;TemplateResponseMixin&lt;/code&gt; is available for any class that wants to have the feature of rendering a template, for example &lt;code&gt;DetailView&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/3.0/django/views/generic/detail.py#L164"&gt;CODE&lt;/a&gt;), which receives the feature of showing the details of a single object by &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;, which inherits from &lt;code&gt;TemplateResponseMixin&lt;/code&gt;, overriding its method &lt;code&gt;get_template_names&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/3.0/django/views/generic/detail.py#L111"&gt;CODE&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As we discussed before, mixins cannot be too generic, and here we see a good example of a mixin designed to work on specific classes. &lt;code&gt;TemplateResponseMixin&lt;/code&gt; has to be applied to classes that contain &lt;code&gt;self.request&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/3.0/django/views/generic/base.py#L133"&gt;CODE&lt;/a&gt;), and while this doesn't mean exclusively classes derived from &lt;code&gt;View&lt;/code&gt;, it is clear that it has been designed to augment that specific type.&lt;/p&gt;
&lt;h1 id="takeaway-points"&gt;Takeaway points&lt;a class="headerlink" href="#takeaway-points" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Inheritance is designed to promote code reuse but can lead to the opposite result&lt;/li&gt;
&lt;li&gt;Multiple inheritance allows us to keep the inheritance tree simple&lt;/li&gt;
&lt;li&gt;Multiple inheritance leads to possible problems that are solved in Python through the MRO&lt;/li&gt;
&lt;li&gt;Interfaces (either implicit or explicit) should be part of your design&lt;/li&gt;
&lt;li&gt;Mixin classes are used to add simple changes to classes&lt;/li&gt;
&lt;li&gt;Mixins are implemented in Python using multiple inheritance: they have great expressive power but require careful design.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="final-words"&gt;Final words&lt;a class="headerlink" href="#final-words" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I hope this post helped you to understand a bit more how multiple inheritance works, and to be less scared by it. I also hope I managed to show you that classes have to be carefully designed and that there is a lot to consider when you create a class system. Once again, please don't forget composition, it's a powerful and too often forgotten tool.&lt;/p&gt;
&lt;h1 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/thedigitalcatonline.github.com/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Programming"></category><category term="algorithms"></category><category term="Django"></category><category term="OOP"></category><category term="Python"></category><category term="Python3"></category></entry><entry><title>Dissecting a Web stack</title><link href="https://www.thedigitalcatonline.com/blog/2020/02/16/dissecting-a-web-stack/" rel="alternate"></link><published>2020-02-16T15:00:00+00:00</published><updated>2020-02-16T15:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2020-02-16:/blog/2020/02/16/dissecting-a-web-stack/</id><summary type="html">&lt;p&gt;A layer-by-layer review of the components of a web stack and the reasons behind them&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It was gross. They wanted me to dissect a frog.&lt;/p&gt;
&lt;p&gt;(Beetlejuice, 1988)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Having recently worked with young web developers who were exposed for the first time to proper production infrastructure, I received many questions about the various components that one can find in the architecture of a "Web service". These questions clearly expressed the confusion (and sometimes the frustration) of developers who understand how to create endpoints in a high-level language such as Node.js or Python, but were never introduced to the complexity of what happens between the user's browser and their framework of choice. Most of the times they don't know why the framework itself is there in the first place.&lt;/p&gt;
&lt;p&gt;The challenge is clear if we just list (in random order), some of the words we use when we discuss (Python) Web development: HTTP, cookies, web server, Websockets, FTP, multi-threaded, reverse proxy, Django, nginx, static files, POST, certificates, framework, Flask, SSL, GET, WSGI, session management, TLS, load balancing, Apache.&lt;/p&gt;
&lt;p&gt;In this post, I want to review all the words mentioned above (and a couple more) trying to build a production-ready web service from the ground up. I hope this might help young developers to get the whole picture and to make sense of these "obscure" names that senior developers like me tend to drop in everyday conversations (sometimes arguably out of turn).&lt;/p&gt;
&lt;p&gt;As the focus of the post is the global architecture and the reasons behind the presence of specific components, the example service I will use will be a basic HTML web page. The reference language will be Python but the overall discussion applies to any language or framework.&lt;/p&gt;
&lt;p&gt;My approach will be that of first stating the rationale and then implementing a possible solution. After this, I will point out missing pieces or unresolved issues and move on with the next layer. At the end of the process, the reader should have a clear picture of why each component has been added to the system.&lt;/p&gt;
&lt;h1 id="the-perfect-architecture"&gt;The perfect architecture&lt;a class="headerlink" href="#the-perfect-architecture" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A very important underlying concept of system architectures is that there is no &lt;em&gt;perfect solution&lt;/em&gt; devised by some wiser genius, that we just need to apply. Unfortunately, often people mistake design patterns for such a "magic solution". The "Design Patterns" original book, however, states that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your design should be specific to the problem at hand but also general enough to address future problems and requirements. You also want to avoid redesign, or at least minimize it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And later&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Design patterns make it easier to reuse successful designs and architectures. [...] Design patterns help you choose design alternatives that make a system reusable and avoid alternatives that compromise reusability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The authors of the book are discussing Object-oriented Programming, but these sentences can be applied to any architecture. As you can see, we have a "problem at hand" and "design alternatives", which means that the most important thing to understand is the requirements, both the present and future ones. Only with clear requirements in mind, one can effectively design a solution, possibly tapping into the great number of patterns that other designers already devised.&lt;/p&gt;
&lt;p&gt;A very last remark. A web stack is a complex beast, made of several components and software packages developed by different programmers with different goals in mind. It is perfectly understandable, then, that such components have some degree of superposition. While the division line between theoretical layers is usually very clear, in practice the separation is often blurry. Expect this a lot, and you will never be lost in a web stack anymore.&lt;/p&gt;
&lt;h1 id="some-definitions"&gt;Some definitions&lt;a class="headerlink" href="#some-definitions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Let's briefly review some of the most important concepts involved in a Web stack, the protocols.&lt;/p&gt;
&lt;h2 id="tcpip"&gt;TCP/IP&lt;a class="headerlink" href="#tcpip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TCP/IP is a network protocol, that is, a &lt;em&gt;set of established rules&lt;/em&gt; two computers have to follow to get connected over a physical network to exchange messages. TCP/IP is composed of two different protocols covering two different layers of the OSI stack, namely the Transport (TCP) and the Network (IP) ones. TCP/IP can be implemented on top of any physical interface (Data Link and Physical OSI layers), such as Ethernet and Wireless. Actors in a TCP/IP network are identified by a &lt;em&gt;socket&lt;/em&gt;, which is a tuple made of an IP address and a port number.&lt;/p&gt;
&lt;p&gt;As far as we are concerned when developing a Web service, however, we need to be aware that TCP/IP is a &lt;em&gt;reliable&lt;/em&gt; protocol, which in telecommunications means that the protocol itself takes care or retransmissions when packets get lost. In other words, while the speed of the communication is not granted, we can be sure that once a message is sent it will reach its destination without errors.&lt;/p&gt;
&lt;h2 id="http"&gt;HTTP&lt;a class="headerlink" href="#http" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TCP/IP can guarantee that the raw bytes one computer sends will reach their destination, but this leaves completely untouched the problem of how to send meaningful information. In particular, in 1989 the problem Tim Barners-Lee wanted to solve was how to uniquely name hypertext resources in a network and how to access them.&lt;/p&gt;
&lt;p&gt;HTTP is the protocol that was devised to solve such a problem and has since greatly evolved. With the help of other protocols such as WebSocket, HTTP invaded areas of communication for which it was originally considered unsuitable such as real-time communication or gaming.&lt;/p&gt;
&lt;p&gt;At its core, HTTP is a protocol that states the format of a text request and the possible text responses. The initial version 0.9 published in 1991 defined the concept of URL and allowed only the GET operation that requested a specific resource. HTTP 1.0 and 1.1 added crucial features such as headers, more methods, and important performance optimisations. At the time of writing the adoption of HTTP/2 is around 45% of the websites in the world, and HTTP/3 is still a draft.&lt;/p&gt;
&lt;p&gt;The most important feature of HTTP we need to keep in mind as developers is that it is a &lt;em&gt;stateless&lt;/em&gt; protocol. This means that the protocol doesn't require the server to keep track of the state of the communication between requests, basically leaving session management to the developer of the service itself.&lt;/p&gt;
&lt;p&gt;Session management is crucial nowadays because you usually want to have an authentication layer in front of a service, where a user provides credentials and accesses some private data. It is, however, useful in other contexts such as visual preferences or choices made by the user and re-used in later accesses to the same website. Typical solutions to the session management problem of HTTP involve the use of cookies or session tokens.&lt;/p&gt;
&lt;h2 id="https"&gt;HTTPS&lt;a class="headerlink" href="#https" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Security has become a very important word in recent years, and with a reason. The amount of sensitive data we exchange on the Internet or store on digital devices is increasing exponentially, but unfortunately so is the number of malicious attackers and the level of damage they can cause with their actions. The HTTP protocol is inherently&lt;/p&gt;
&lt;p&gt;HTTP is inherently insecure, being a plain text communication between two servers that usually happens on a completely untrustable network such as the Internet. While security wasn't an issue when the protocol was initially conceived, it is nowadays a problem of paramount importance, as we exchange private information, often vital for people's security or for businesses. We need to be sure we are sending information to the correct server and that the data we send cannot be intercepted.&lt;/p&gt;
&lt;p&gt;HTTPS solves both the problem of tampering and eavesdropping, encrypting HTTP with the Transport Layer Security (TLS) protocol, that also enforces the usage of digital certificates, issued by a trusted authority. At the time of writing, approximately 80% of websites loaded by Firefox use HTTPS by default. When a server receives an HTTPS connection and transforms it into an HTTP one it is usually said that it &lt;em&gt;terminates TLS&lt;/em&gt; (or SSL, the old name of TLS).&lt;/p&gt;
&lt;h2 id="websocket"&gt;WebSocket&lt;a class="headerlink" href="#websocket" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One great disadvantage of HTTP is that communication is always initiated by the client and that the server can send data only when this is explicitly requested. Polling can be implemented to provide an initial solution, but it cannot guarantee the performances of proper full-duplex communication, where a channel is kept open between server and client and both can send data without being requested. Such a channel is provided by the WebSocket protocol.&lt;/p&gt;
&lt;p&gt;WebSocket is a killer technology for applications like online gaming, real-time feeds like financial tickers or sports news, or multimedia communication like conferencing or remote education.&lt;/p&gt;
&lt;p&gt;It is important to understand that WebSocket is not HTTP, and can exist without it. It is also true that this new protocol was designed to be used on top of an existing HTTP connection, so a WebSocket communication is often found in parts of a Web page, which was originally retrieved using HTTP in the first place.&lt;/p&gt;
&lt;h1 id="implementing-a-service-over-http"&gt;Implementing a service over HTTP&lt;a class="headerlink" href="#implementing-a-service-over-http" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Let's finally start discussing bits and bytes. The starting point for our journey is a service over HTTP, which means there is an HTTP request-response exchange. As an example, let us consider a GET request, the simplest of the HTTP methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;GET&lt;/span&gt; &lt;span class="nn"&gt;/&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;localhost&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;curl/7.65.3&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;*/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the client is sending a pure text message to the server, with the format specified by the HTTP protocol. The first line contains the method name (&lt;code&gt;GET&lt;/code&gt;), the URL (&lt;code&gt;/&lt;/code&gt;) and the protocol we are using, including its version (&lt;code&gt;HTTP/1.1&lt;/code&gt;). The remaining lines are called &lt;em&gt;headers&lt;/em&gt; and contain metadata that can help the server to manage the request. The complete value of the &lt;code&gt;Host&lt;/code&gt; header is in this case &lt;code&gt;localhost:80&lt;/code&gt;, but as the standard port for HTTP services is 80, we don't need to specify it.&lt;/p&gt;
&lt;p&gt;If the server &lt;code&gt;localhost&lt;/code&gt; is &lt;em&gt;serving&lt;/em&gt; HTTP (i.e. running some software that understands HTTP) on port 80 the response we might get is something similar to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.0 200 OK
Date: Mon, 10 Feb 2020 08:41:33 GMT
Content-type: text/html
Content-Length: 26889
Last-Modified: Mon, 10 Feb 2020 08:41:27 GMT

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As happened for the request, the response is a text message, formatted according to the standard. The first line mentions the protocol and the status of the request (&lt;code&gt;200&lt;/code&gt; in this case, that means success), while the following lines contain metadata in various headers. Finally, after an empty line, the message contains the resource the client asked for, the source code of the base URL of the website in this case. Since this HTML page probably contains references to other resources like CSS, JS, images, and so on, the browser will send several other requests to gather all the data it needs to properly show the page to the user.&lt;/p&gt;
&lt;p&gt;So, the first problem we have is that of implementing a server that understands this protocol and sends a proper response when it receives an HTTP request. We should try to load the requested resource and return either a success (HTTP 200) if we can find it, or a failure (HTTP 404) if we can't.&lt;/p&gt;
&lt;h1 id="1-sockets-and-parsers"&gt;1 Sockets and parsers&lt;a class="headerlink" href="#1-sockets-and-parsers" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="11-rationale"&gt;1.1 Rationale&lt;a class="headerlink" href="#11-rationale" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TCP/IP is a network protocol that works with &lt;em&gt;sockets&lt;/em&gt;. A socket is a tuple of an IP address (unique in the network) and a port (unique for a specific IP address) that the computer uses to communicate with others. A socket is a file-like object in an operating system, that can be thus &lt;em&gt;opened&lt;/em&gt; and &lt;em&gt;closed&lt;/em&gt;, and that we can &lt;em&gt;read&lt;/em&gt; from or &lt;em&gt;write&lt;/em&gt; to. Socket programming is a pretty low-level approach to the network, but you need to be aware that every software in your computer that provides network access has ultimately to deal with sockets (most probably through some library, though).&lt;/p&gt;
&lt;p&gt;Since we are building things from the ground up, let's implement a small Python program that opens a socket connection, receives an HTTP request, and sends an HTTP response. As port 80 is a "low port" (a number smaller than 1024), we usually don't have permissions to open sockets there, so I will use port 8080. This is not a problem for now, as HTTP can be served on any port.&lt;/p&gt;
&lt;h2 id="12-implementation"&gt;1.2 Implementation&lt;a class="headerlink" href="#12-implementation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Create the file &lt;code&gt;server.py&lt;/code&gt; and type this code. Yes, &lt;strong&gt;type it&lt;/strong&gt;, don't just copy and paste, you will not learn anything otherwise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="c1"&gt;# Create a socket instance&lt;/span&gt;
&lt;span class="c1"&gt;# AF_INET: use IP protocol version 4&lt;/span&gt;
&lt;span class="c1"&gt;# SOCK_STREAM: full-duplex byte stream&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Allow reuse of addresses&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Bind the socket to any address, port 8080, and listen&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Serve forever&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Accept the connection&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Receive data from this socket using a buffer of 1024 bytes&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Print out the data&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Close the connection&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This little program accepts a connection on port 8080 and prints the received data on the terminal. You can test it executing it and then running &lt;code&gt;curl localhost:8080&lt;/code&gt; in another terminal. You should see something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 server.py 
GET / HTTP/1.1
Host: localhost:8080
User-Agent: curl/7.65.3
Accept: */*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The server keeps running the code in the &lt;code&gt;while&lt;/code&gt; loop, so if you want to terminate it you have to do it with Ctrl+C. So far so good, but this is not an HTTP server yet, as it sends no response; you should actually receive an error message from curl that says &lt;code&gt;curl: (52) Empty reply from server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sending back a standard response is very simple, we just need to call &lt;code&gt;conn.sendall&lt;/code&gt; passing the raw bytes. A minimal HTTP response contains the protocol and the status, an empty line, and the actual content, for example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;

&lt;span class="n"&gt;Hi&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our server becomes then&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="c1"&gt;# Create a socket instance&lt;/span&gt;
&lt;span class="c1"&gt;# AF_INET: use IP protocol version 4&lt;/span&gt;
&lt;span class="c1"&gt;# SOCK_STREAM: full-duplex byte stream&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Allow reuse of addresses&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Bind the socket to any address, port 8080, and listen&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Serve forever&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Accept the connection&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Receive data from this socket using a buffer of 1024 bytes&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Print out the data&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HTTP/1.1 200 OK&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;Hi there!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Close the connection&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, we are not really responding to the user's request, however. Try different curl command lines like &lt;code&gt;curl localhost:8080/index.html&lt;/code&gt; or &lt;code&gt;curl localhost:8080/main.css&lt;/code&gt; and you will always receive the same response. We should try to find the resource the user is asking for and send that back in the response content.&lt;/p&gt;
&lt;p&gt;This version of the HTTP server properly extracts the resource and tries to load it from the current directory, returning either a success of a failure&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="c1"&gt;# Create a socket instance&lt;/span&gt;
&lt;span class="c1"&gt;# AF_INET: use IP protocol version 4&lt;/span&gt;
&lt;span class="c1"&gt;# SOCK_STREAM: full-duplex byte stream&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Allow reuse of addresses&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Bind the socket to any address, port 8080, and listen&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;HEAD_200&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HTTP/1.1 200 OK&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;HEAD_404&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HTTP/1.1 404 Not Found&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Serve forever&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Accept the connection&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Receive data from this socket using a buffer of 1024 bytes&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Print out the data&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET /(.*) HTTP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HEAD_200&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Resource &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; correctly served&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HEAD_404&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Resource /&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; cannot be found&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Resource &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; cannot be loaded&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--------------------&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Close the connection&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see this implementation is extremely simple. If you create a simple local file named &lt;code&gt;index.html&lt;/code&gt; with this content&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is my page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some random content&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and run &lt;code&gt;curl localhost:8080/index.html&lt;/code&gt; you will see the content of the file. At this point, you can even use your browser to open &lt;code&gt;http://localhost:8080/index.html&lt;/code&gt; and you will see the title of the page and the content. A Web browser is a software capable of sending HTTP requests and of interpreting the content of the responses if this is HTML (and many other file types like images or videos), so it can &lt;em&gt;render&lt;/em&gt; the content of the message. The browser is also responsible of retrieving the missing resources needed for the rendering, so when you provide links to style sheets or JS scripts with the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in the HTML code of a page, you are instructing the browser to send an HTTP GET request for those files as well.&lt;/p&gt;
&lt;p&gt;The output of &lt;code&gt;server.py&lt;/code&gt; when I access &lt;code&gt;http://localhost:8080/index.html&lt;/code&gt; is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;GET&lt;/span&gt; &lt;span class="nn"&gt;/index.html&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;localhost:8080&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;en-GB,en;q=0.5&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;gzip, deflate&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;keep-alive&lt;/span&gt;
&lt;span class="na"&gt;Upgrade-Insecure-Requests&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;Pragma&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;no-cache&lt;/span&gt;
&lt;span class="na"&gt;Cache-Control&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;no-cache&lt;/span&gt;


Resource index.html correctly served
--------------------
GET /main.css HTTP/1.1
Host: localhost:8080
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0
Accept: text/css,*/*;q=0.1
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Referer: http://localhost:8080/index.html
Pragma: no-cache
Cache-Control: no-cache


Resource main.css cannot be loaded
--------------------
GET /favicon.ico HTTP/1.1
Host: localhost:8080
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0
Accept: image/webp,*/*
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache


Resource favicon.ico cannot be loaded
--------------------
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the browser sends rich HTTP requests, with a lot of headers, automatically requesting the CSS file mentioned in the HTML code and automatically trying to retrieve a favicon image.&lt;/p&gt;
&lt;h2 id="13-resources"&gt;1.3 Resources&lt;a class="headerlink" href="#13-resources" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These resources provide more detailed information on the topics discussed in this section&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/howto/sockets.html"&gt;Python 3 Socket Programming HOWTO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5"&gt;HTTP/1.1 Request format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6"&gt;HTTP/1.1 Response format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The source code of this example is available &lt;a href="https://github.com/lgiordani/dissecting-a-web-stack-code/tree/master/1_sockets_and_parsers"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="14-issues"&gt;1.4 Issues&lt;a class="headerlink" href="#14-issues" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It gives a certain dose of satisfaction to build something from scratch and discover that it works smoothly with full-fledged software like the browser you use every day. I also think it is very interesting to discover that technologies like HTTP, that basically run the world nowadays, are at their core very simple.&lt;/p&gt;
&lt;p&gt;That said, there are many features of HTTP that we didn't cover with our simple socket programming. For starters, HTTP/1.0 introduced other methods after GET, such as POST that is of paramount importance for today's websites, where users keep sending information to servers through forms. To implement all 9 HTTP methods we need to properly parse the incoming request and add relevant functions to our code.&lt;/p&gt;
&lt;p&gt;At this point, however, you might notice that we are dealing a lot with low-level details of the protocol, which is usually not the core of our business. When we build a service over HTTP we believe that we have the knowledge to properly implement some code that can simplify a certain process, be it searching for other websites, shopping for books or sharing pictures with friends. We don't want to spend our time understanding the subtleties of the TCP/IP sockets and writing parsers for request-response protocols. It is nice to see how these technologies work, but on a daily basis, we need to focus on something at a higher level.&lt;/p&gt;
&lt;p&gt;The situation of our small HTTP server is possibly worsened by the fact that HTTP is a stateless protocol. The protocol doesn't provide any way to connect two successive requests, thus keeping track of the &lt;em&gt;state&lt;/em&gt; of the communication, which is the cornerstone of modern Internet. Every time we authenticate on a website and we want to visit other pages we need the server to remember who we are, and this implies keeping track of the state of the connection.&lt;/p&gt;
&lt;p&gt;Long story short: to work as a proper HTTP server, our code should at this point implement all HTTP methods and cookies management. We also need to support other protocols like Websockets. These are all but trivial tasks, so we definitely need to add some component to the whole system that lets us focus on the business logic and not on the low-level details of application protocols.&lt;/p&gt;
&lt;h1 id="2-web-framework"&gt;2 Web framework&lt;a class="headerlink" href="#2-web-framework" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="21-rationale"&gt;2.1 Rationale&lt;a class="headerlink" href="#21-rationale" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Enter the Web framework!&lt;/p&gt;
&lt;p&gt;As I discussed many times (see &lt;a href="https://www.thedigitalcatonline.com/blog/2018/12/20/cabook/"&gt;the book on clean architectures&lt;/a&gt; or &lt;a href="https://www.thedigitalcatonline.com/blog/2016/11/14/clean-architectures-in-python-a-step-by-step-example/"&gt;the relative post&lt;/a&gt;) the role of the Web framework is that of &lt;em&gt;converting HTTP requests into function calls&lt;/em&gt;, and function return values into HTTP responses. The framework's true nature is that of a layer that connects a working business logic to the Web, through HTTP and related protocols. The framework takes care of session management for us and maps URLs to functions, allowing us to focus on the application logic.&lt;/p&gt;
&lt;p&gt;In the grand scheme of an HTTP service, this is what the framework is supposed to do. Everything the framework provides out of this scope, like layers to access DBs, template engines, and interfaces to other systems, is an addition that you, as a programmer, may find useful, but is not in principle part of the reason why we added the framework to the system. We add the framework because it acts as a layer between our business logic and HTTP.&lt;/p&gt;
&lt;h2 id="22-implementation"&gt;2.2 Implementation&lt;a class="headerlink" href="#22-implementation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to Miguel Gringberg and his &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;amazing Flask mega-tutorial&lt;/a&gt; I can set up Flask in seconds. I will not run through the tutorial here, as you can follow it on Miguel's website. I will only use the content of the first article (out of 23!) to create an extremely simple "Hello, world" application.&lt;/p&gt;
&lt;p&gt;To run the following example you will need a virtual environment and you will have to &lt;code&gt;pip install flask&lt;/code&gt;. Follow Miguel's tutorial if you need more details on this.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;app/__init__.py&lt;/code&gt; file is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the &lt;code&gt;app/routes.py&lt;/code&gt; file is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;


&lt;span class="nd"&gt;@application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can already see here the power of a framework in action. We defined an &lt;code&gt;index&lt;/code&gt; function and connected it with two different URLs (&lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/index&lt;/code&gt;) in 3 lines of Python. This leaves us time and energy to properly work on the business logic, that in this case is a revolutionary "Hello, world!". Nobody ever did this before.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;service.py&lt;/code&gt; file is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Flask comes with a so-called development web server (do these words ring any bell now?) that we can run on a terminal&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;service.py flask run
 * Serving Flask app &lt;span class="s2"&gt;&amp;quot;service.py&amp;quot;&lt;/span&gt;
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can now visit the given URL with your browser and see that everything works properly. Remember that 127.0.0.1 is the special IP address that refers to "this computer"; the name &lt;code&gt;localhost&lt;/code&gt; is usually created by the operating system as an alias for that, so the two are interchangeable. As you can see the standard port for Flask's development server is 5000, so you have to mention it explicitly, otherwise your browser would try to access port 80 (the default HTTP one). When you connect with the browser you will see some log messages about the HTTP requests&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020 &lt;span class="m"&gt;14&lt;/span&gt;:54:27&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; -
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020 &lt;span class="m"&gt;14&lt;/span&gt;:54:28&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET /favicon.ico HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt; -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can recognise both now, as those are the same request we got with our little server in the previous part of the article.&lt;/p&gt;
&lt;h2 id="23-resources"&gt;2.3 Resources&lt;a class="headerlink" href="#23-resources" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These resources provide more detailed information on the topics discussed in this section&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;Miguel Gringberg's amazing Flask mega-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Localhost"&gt;What is localhost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The source code of this example is available &lt;a href="https://github.com/lgiordani/dissecting-a-web-stack-code/tree/master/2_web_framework"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="24-issues"&gt;2.4 Issues&lt;a class="headerlink" href="#24-issues" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apparently, we solved all our problems, and many programmers just stop here. They learn how to use the framework (which is a big achievement!), but as we will shortly discover, this is not enough for a production system. Let's have a closer look at the output of the Flask server. It clearly says, among other things&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The main issue we have when we deal with any production system is represented by performances. Think about what we do with JavaScript when we minimise the code: we consciously obfuscate the code in order to make the file smaller, but this is done for the sole purpose of making the file faster to retrieve.&lt;/p&gt;
&lt;p&gt;For HTTP servers the story is not very different. The Web framework usually provides a development Web server, as Flask does, which properly implements HTTP, but does it in a very inefficient way. For starters, this is a &lt;em&gt;blocking&lt;/em&gt; framework, which means that if our request takes seconds to be served (for example because the endpoint retrieves data from a very slow database), any other request will have to wait to be served in a queue. That ultimately means that the user will see a spinner in the browser's tab and just shake their head thinking that we can't build a modern website. Other performances concerns might be connected with memory management or disk caches, but in general, we are safe to say that this web server cannot handle any production load (i.e. multiple users accessing the web site at the same time and expecting good quality of service).&lt;/p&gt;
&lt;p&gt;This is hardly surprising. After all, we didn't want to deal with TCP/IP connections to focus on our business, so we delegated this to other coders who maintain the framework. The framework's authors, in turn, want to focus on things like middleware, routes, proper handling of HTTP methods, and so on. They don't want to spend time trying to optimise the performances of the "multi-user" experience. This is especially true in the Python world (and somehow less true for Node.js, for example): Python is not heavily concurrency-oriented, and both the style of programming and the performances are not favouring fast, non-blocking applications. This is changing lately, with async and improvements in the interpreter, but I leave this for another post.&lt;/p&gt;
&lt;p&gt;So, now that we have a full-fledged HTTP service, we need to make it so fast that users won't even notice this is not running locally on their computer.&lt;/p&gt;
&lt;h1 id="3-concurrency-and-facades"&gt;3 Concurrency and façades&lt;a class="headerlink" href="#3-concurrency-and-facades" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="31-rationale"&gt;3.1 Rationale&lt;a class="headerlink" href="#31-rationale" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, whenever you have performance issues, just go for concurrency. Now you have many problems!
(see &lt;a href="https://twitter.com/davidlohr/status/288786300067270656?lang=en"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Yes, concurrency solves many problems and it's the source of just as much, so we need to find a way to use it in the safest and less complicated way. We basically might want to add a layer that runs the framework in some concurrent way, without requiring us to change anything in the framework itself.&lt;/p&gt;
&lt;p&gt;And whenever you have to homogenise different things just create a layer of indirection. This solves any problem but one. (see &lt;a href="https://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;So we need to create a layer that runs our service in a concurrent way, but we also want to keep it detached from the specific implementation of the service, that is independent of the framework or library that we are using.&lt;/p&gt;
&lt;h2 id="32-implementation"&gt;3.2 Implementation&lt;a class="headerlink" href="#32-implementation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this case, the solution is that of giving a &lt;em&gt;specification&lt;/em&gt; of the API that web frameworks have to expose, in order to be usable by independent third-party components. In the Python world, this set of rules has been named WSGI, the Web Server Gateway Interface, but such interfaces exist for other languages such as Java or Ruby. The "gateway" mentioned here is the part of the system outside the framework, which in this discussion is the part that deals with production performances. Through WSGI we are defining a way for frameworks to expose a common interface, leaving people interested in concurrency free to implement something independently.&lt;/p&gt;
&lt;p&gt;If the framework is compatible with the gateway interface, we can add software that deals with concurrency and uses the framework through the compatibility layer. Such a component is a production-ready HTTP server, and two common choices in the Python world are Gunicorn and uWSGI.&lt;/p&gt;
&lt;p&gt;Production-ready HTTP server means that the software understands HTTP as the development server already did, but at the same time pushes performances in order to sustain a bigger workload, and as we said before this is done through concurrency.&lt;/p&gt;
&lt;p&gt;Flask is compatible with WSGI, so we can make it work with Gunicorn. To install it in our virtual environment run &lt;code&gt;pip install gunicorn&lt;/code&gt; and set it up creating a file names &lt;code&gt;wsgi.py&lt;/code&gt; with the following content&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To run Gunicorn specify the number of concurrent instances and the external port&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000 wsgi
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-12 &lt;span class="m"&gt;18&lt;/span&gt;:39:07 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13393&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Starting gunicorn &lt;span class="m"&gt;20&lt;/span&gt;.0.4
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-12 &lt;span class="m"&gt;18&lt;/span&gt;:39:07 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13393&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Listening at: http://0.0.0.0:8000 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13393&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-12 &lt;span class="m"&gt;18&lt;/span&gt;:39:07 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13393&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Using worker: sync
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-12 &lt;span class="m"&gt;18&lt;/span&gt;:39:07 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13396&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Booting worker with pid: &lt;span class="m"&gt;13396&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-12 &lt;span class="m"&gt;18&lt;/span&gt;:39:07 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13397&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Booting worker with pid: &lt;span class="m"&gt;13397&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-12 &lt;span class="m"&gt;18&lt;/span&gt;:39:07 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13398&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Booting worker with pid: &lt;span class="m"&gt;13398&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, Gunicorn has the concept of &lt;em&gt;workers&lt;/em&gt; which are a generic way to express concurrency. Specifically, Gunicorn implements a pre-fork worker model, which means that it (pre)creates a different Unix process for each worker. You can check this running &lt;code&gt;ps&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps ax &lt;span class="p"&gt;|&lt;/span&gt; grep gunicorn
&lt;span class="m"&gt;14919&lt;/span&gt; pts/1    S+     &lt;span class="m"&gt;0&lt;/span&gt;:00 ~/venv3/bin/python3 ~/venv3/bin/gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000 wsgi
&lt;span class="m"&gt;14922&lt;/span&gt; pts/1    S+     &lt;span class="m"&gt;0&lt;/span&gt;:00 ~/venv3/bin/python3 ~/venv3/bin/gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000 wsgi
&lt;span class="m"&gt;14923&lt;/span&gt; pts/1    S+     &lt;span class="m"&gt;0&lt;/span&gt;:00 ~/venv3/bin/python3 ~/venv3/bin/gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000 wsgi
&lt;span class="m"&gt;14924&lt;/span&gt; pts/1    S+     &lt;span class="m"&gt;0&lt;/span&gt;:00 ~/venv3/bin/python3 ~/venv3/bin/gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000 wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using processes is just one of the two ways to implement concurrency in a Unix system, the other being using threads. The benefits and demerits of each solution are outside the scope of this post, however. For the time being just remember that you are dealing with multiple workers that process incoming requests asynchronously, thus implementing a non-blocking server, ready to accept multiple connections.&lt;/p&gt;
&lt;h2 id="33-resources"&gt;3.3 Resources&lt;a class="headerlink" href="#33-resources" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These resources provide more detailed information on the topics discussed in this section&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://wsgi.readthedocs.io/en/latest/index.html"&gt;WSGI official documentation&lt;/a&gt; and the &lt;a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface"&gt;Wikipedia page
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The homepages of &lt;a href="https://gunicorn.org/"&gt;Gunicorn&lt;/a&gt; and &lt;a href="https://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A good entry point for your journey into the crazy world of concurrency: &lt;a href="https://en.wikipedia.org/wiki/Multithreading_(computer_architecture)"&gt;multithreading&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The source code of this example is available &lt;a href="https://github.com/lgiordani/dissecting-a-web-stack-code/tree/master/3_concurrency_and_facades"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="34-issues"&gt;3.4 Issues&lt;a class="headerlink" href="#34-issues" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using a Gunicorn we have now a production-ready HTTP server, and apparently implemented everything we need. There are still many considerations and missing pieces, though.&lt;/p&gt;
&lt;h3 id="performances-again"&gt;Performances (again)&lt;a class="headerlink" href="#performances-again" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are 3 workers enough to sustain the load of our new killer mobile application? We expect thousands of visitors per minute, so maybe we should add some. But while we increase the amount of workers, we have to keep in mind that the machine we are using has a finite amount of CPU power and memory. So, once again, we have to focus on performances, and in particular on scalability: how can we keep adding workers without having to stop the application, replace the machine with a more powerful one, and restart the service?&lt;/p&gt;
&lt;h3 id="embrace-change"&gt;Embrace change&lt;a class="headerlink" href="#embrace-change" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is not the only problem we have to face in production. An important aspect of technology is that it changes over time, as new and (hopefully) better solutions become widespread. We usually design systems dividing them as much as possible into communicating layers exactly because we want to be free to replace a layer with something else, be it a simpler component or a more advanced one, one with better performances or maybe just a cheaper one. So, once again, we want to be able to evolve the underlying system keeping the same interface, exactly as we did in the case of web frameworks.&lt;/p&gt;
&lt;h3 id="https_1"&gt;HTTPS&lt;a class="headerlink" href="#https_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another missing part of the system is HTTPS. Gunicorn and uWSGI do not understand the HTTPS protocol, so we need something in front of them that will deal with the "S" part of the protocol, leaving the "HTTP" part to the internal layers.&lt;/p&gt;
&lt;h3 id="load-balancers"&gt;Load balancers&lt;a class="headerlink" href="#load-balancers" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In general, a &lt;em&gt;load balancer&lt;/em&gt; is just a component in a system that distributes work among a pool of workers. Gunicorn is already distributing load among its workers, so this is not a new concept, but we generally want to do it on a bigger level, among machines or among entire systems. Load balancing can be hierarchical and be structured on many levels. We can also assign more importance to some components of the system, flagging them as ready to accept more load (for example because their hardware is better). Load balancers are extremely important in network services, and the definition of load can be extremely different from system to system: generally speaking, in a Web service the number of connections is the standard measure of the load, as we assume that on average all connections bring the same amount of work to the system.&lt;/p&gt;
&lt;h3 id="reverse-proxies"&gt;Reverse proxies&lt;a class="headerlink" href="#reverse-proxies" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Load balancers are forward proxies, as they allow a client to contact any server in a pool. At the same time, a &lt;em&gt;reverse proxy&lt;/em&gt; allows a client to retrieve data produced by several systems through the same entry point. Reverse proxies are a perfect way to route HTTP requests to sub-systems that can be implemented with different technologies. For example, you might want to have part of the system implemented with Python, using Django and Postgres, and another part served by an AWS Lambda function written in Go and connected with a non-relational database such as DynamoDB. Usually, in HTTP services this choice is made according to the URL (for example routing every URL that begins with &lt;code&gt;/api/&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id="logic"&gt;Logic&lt;a class="headerlink" href="#logic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We also want a layer that can implement a certain amount of logic, to manage simple rules that are not related to the service we implemented. A typical example is that of HTTP redirections: what happens if a user accesses the service with an &lt;code&gt;http://&lt;/code&gt; prefix instead of &lt;code&gt;https://&lt;/code&gt;? The correct way to deal with this is through an HTTP 301 code, but you don't want such a request to reach your framework, wasting resources for such a simple task.&lt;/p&gt;
&lt;h1 id="4-the-web-server"&gt;4 The Web server&lt;a class="headerlink" href="#4-the-web-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="41-rationale"&gt;4.1 Rationale&lt;a class="headerlink" href="#41-rationale" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The general label of &lt;em&gt;Web server&lt;/em&gt; is given to software that performs the tasks we discussed. Two very common choices for this part of the system are nginx and Apache, two open source projects that are currently leading the market. With different technical approaches, they both implement all the features we discussed in the previous section (and many more).&lt;/p&gt;
&lt;h2 id="42-implementation"&gt;4.2 Implementation&lt;a class="headerlink" href="#42-implementation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To test nginx without having to fight with the OS and install too many packages we can use Docker. Docker is useful to simulate a multi-machine environment, but it might also be your technology of choice for the actual production environment (AWS ECS works with Docker containers, for example).&lt;/p&gt;
&lt;p&gt;The base configuration that we will run is very simple. One container will contain the Flask code and run the framework with Gunicorn, while the other container will run nginx. Gunicorn will serve HTTP on the internal port 8000, not exposed by Docker and thus not reachable from our browser, while nignx will expose port 80, the traditional HTTP port.&lt;/p&gt;
&lt;p&gt;In the same directory of the file &lt;code&gt;wsgi.py&lt;/code&gt;, create a &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;python:3.6&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt; app /app
&lt;span class="k"&gt;ADD&lt;/span&gt; wsgi.py /

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; .&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install flask gunicorn
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This starts from a Python Docker image, adds the &lt;code&gt;app&lt;/code&gt; directory and the &lt;code&gt;wsgi.py&lt;/code&gt; file, and installs Gunicorn. Now create a configuration for nginx in a file called &lt;code&gt;nginx.conf&lt;/code&gt; in the same directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://application:8000/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This defines a server that listens on port 80 and that connects all the URL starting with &lt;code&gt;/&lt;/code&gt; with a server called &lt;code&gt;application&lt;/code&gt; on port 8000, which is the container running Gunicorn.&lt;/p&gt;
&lt;p&gt;Last, create a file &lt;code&gt;docker-compose.yml&lt;/code&gt; that will describe the configuration of the containers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.7&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
      &lt;span class="nt"&gt;dockerfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Dockerfile&lt;/span&gt;
    &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gunicorn --workers 3 --bind 0.0.0.0:8000 wsgi&lt;/span&gt;
    &lt;span class="nt"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8000&lt;/span&gt;

  &lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./nginx.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080:80&lt;/span&gt;
    &lt;span class="nt"&gt;depends_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;application&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the name &lt;code&gt;application&lt;/code&gt; that we mentioned in the nginx configuration file is not a magic string, but is the name we assigned to the Gunicorn container in the Docker Compose configuration.&lt;/p&gt;
&lt;p&gt;To create this infrastructure we need to install Docker Compose in our virtual environment through &lt;code&gt;pip install docker-compose&lt;/code&gt;. I also created a file named &lt;code&gt;.env&lt;/code&gt; with the name of the project&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;COMPOSE_PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point you can run Docker Compose with &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;service_default&amp;quot;&lt;/span&gt; with the default driver
Creating service_application_1 ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating service_nginx_1       ... &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything is working correctly, opening the browser and visiting &lt;code&gt;localhost&lt;/code&gt; should show you the HTML page Flask is serving.&lt;/p&gt;
&lt;p&gt;Through &lt;code&gt;docker-compose logs&lt;/code&gt; we can check what services are doing. We can recognise the output of Gunicorn in the logs of the service named &lt;code&gt;application&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose logs application
Attaching to service_application_1
application_1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-14 &lt;span class="m"&gt;08&lt;/span&gt;:35:42 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Starting gunicorn &lt;span class="m"&gt;20&lt;/span&gt;.0.4
application_1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-14 &lt;span class="m"&gt;08&lt;/span&gt;:35:42 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Listening at: http://0.0.0.0:8000 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
application_1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-14 &lt;span class="m"&gt;08&lt;/span&gt;:35:42 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Using worker: sync
application_1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-14 &lt;span class="m"&gt;08&lt;/span&gt;:35:42 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Booting worker with pid: &lt;span class="m"&gt;8&lt;/span&gt;
application_1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-14 &lt;span class="m"&gt;08&lt;/span&gt;:35:42 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Booting worker with pid: &lt;span class="m"&gt;9&lt;/span&gt;
application_1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-14 &lt;span class="m"&gt;08&lt;/span&gt;:35:42 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Booting worker with pid: &lt;span class="m"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but the one we are mostly interested with now is the service named &lt;code&gt;nginx&lt;/code&gt;, so let's follow the logs in real-time with &lt;code&gt;docker-compose logs -f nginx&lt;/code&gt;. Refresh the &lt;code&gt;localhost&lt;/code&gt; page you visited with the browser, and the container should output something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose logs -f nginx
Attaching to service_nginx_1
nginx_1        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;192&lt;/span&gt;.168.192.1 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:08:42:20 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is the standard log format of nginx. It shows the IP address of the client (&lt;code&gt;192.168.192.1&lt;/code&gt;), the connection timestamp, the HTTP request and the response status code (200), plus other information on the client itself.&lt;/p&gt;
&lt;p&gt;Let's now increase the number of services, to see the load balancing mechanism in action. To do this, first we need to change the log format of nginx to show the IP address of the machine that served the request. Change the &lt;code&gt;nginx.conf&lt;/code&gt; file adding the &lt;code&gt;log_format&lt;/code&gt; and &lt;code&gt;access_log&lt;/code&gt; options&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;log_format&lt;/span&gt; &lt;span class="s"&gt;upstreamlog&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;[&lt;/span&gt;&lt;span class="nv"&gt;$time_local]&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt; &lt;span class="s"&gt;to:&lt;/span&gt; &lt;span class="nv"&gt;$upstream_addr:&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt; &lt;span class="nv"&gt;$status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://application:8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.log&lt;/span&gt; &lt;span class="s"&gt;upstreamlog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;$upstream_addr&lt;/code&gt; variable is the one that contains the IP address of the server proxied by nginx. Now run &lt;code&gt;docker-compose down&lt;/code&gt; to stop all containers and then &lt;code&gt;docker-compose up -d --scale application=3&lt;/code&gt; to start them again&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose down
Stopping service_nginx_1       ... &lt;span class="k"&gt;done&lt;/span&gt;
Stopping service_application_1 ... &lt;span class="k"&gt;done&lt;/span&gt;
Removing service_nginx_1       ... &lt;span class="k"&gt;done&lt;/span&gt;
Removing service_application_1 ... &lt;span class="k"&gt;done&lt;/span&gt;
Removing network service_default
$ docker-compose up -d --scale &lt;span class="nv"&gt;application&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
Creating network &lt;span class="s2"&gt;&amp;quot;service_default&amp;quot;&lt;/span&gt; with the default driver
Creating service_application_1 ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating service_application_2 ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating service_application_3 ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating service_nginx_1       ... &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, Docker Compose runs now 3 containers for the &lt;code&gt;application&lt;/code&gt; service. If you open the logs stream and visit the page in the browser you will now see a slightly different output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose logs -f nginx
Attaching to service_nginx_1
nginx_1        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:09:00:16 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;192&lt;/span&gt;.168.240.4:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where you can spot &lt;code&gt;to: 192.168.240.4:8000&lt;/code&gt; which is the IP address of one of the application containers. If you now visit the page again multiple times you should notice a change in the upstream address, something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose logs -f nginx
Attaching to service_nginx_1
nginx_1        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:09:00:16 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;192&lt;/span&gt;.168.240.4:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:09:00:17 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;192&lt;/span&gt;.168.240.2:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:09:00:17 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;192&lt;/span&gt;.168.240.3:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:09:00:17 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;192&lt;/span&gt;.168.240.4:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:09:00:17 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;192&lt;/span&gt;.168.240.2:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This shows that nginx is performing load balancing, but to tell the truth this is happening through Docker's DNS, and not by an explicit action performed by the web server. We can verify this accessing the nginx container and running &lt;code&gt;dig application&lt;/code&gt; (you need to run &lt;code&gt;apt update&lt;/code&gt; and &lt;code&gt;apt install dnsutils&lt;/code&gt; to install &lt;code&gt;dig&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@99c2f348140e:/# dig application

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;span class="m"&gt;9&lt;/span&gt;.11.5-P4-5.1-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; application
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opco&lt;/span&gt;de: QUERY, status: NOERROR, id: &lt;span class="m"&gt;7221&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr rd ra&lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;3&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;application.                   IN      A

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
application.            &lt;span class="m"&gt;600&lt;/span&gt;     IN      A       &lt;span class="m"&gt;192&lt;/span&gt;.168.240.2
application.            &lt;span class="m"&gt;600&lt;/span&gt;     IN      A       &lt;span class="m"&gt;192&lt;/span&gt;.168.240.4
application.            &lt;span class="m"&gt;600&lt;/span&gt;     IN      A       &lt;span class="m"&gt;192&lt;/span&gt;.168.240.3

&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;1&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.11#53&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.11&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Fri Feb &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;09&lt;/span&gt;:57:24 UTC &lt;span class="m"&gt;2020&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: &lt;span class="m"&gt;110&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To see load balancing performed by nginx we can explicitly define two services and assign them different weights. Run &lt;code&gt;docker-compose down&lt;/code&gt; and change the nginx configuration to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;application1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt; &lt;span class="s"&gt;weight=3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;application2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;log_format&lt;/span&gt; &lt;span class="s"&gt;upstreamlog&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;[&lt;/span&gt;&lt;span class="nv"&gt;$time_local]&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt; &lt;span class="s"&gt;to:&lt;/span&gt; &lt;span class="nv"&gt;$upstream_addr:&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt; &lt;span class="nv"&gt;$status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.log&lt;/span&gt; &lt;span class="s"&gt;upstreamlog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We defined here an &lt;code&gt;upstream&lt;/code&gt; structure that lists two different services, &lt;code&gt;application1&lt;/code&gt; and &lt;code&gt;application2&lt;/code&gt;, giving to the first one a weight of 3. This mean that each 4 requests, 3 will be routed to the first service, and one to the second service. Now nginx is not just relying on the DNS, but consciously choosing between two different services.&lt;/p&gt;
&lt;p&gt;Let's define the services accordingly in the Docker Compose configuration file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;application1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dockerfile&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt; &lt;span class="c1"&gt;--workers 6 --bind 0.0.0.0:8000 wsgi&lt;/span&gt;
    &lt;span class="n"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;

  &lt;span class="n"&gt;application2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dockerfile&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt; &lt;span class="c1"&gt;--workers 3 --bind 0.0.0.0:8000 wsgi&lt;/span&gt;
    &lt;span class="n"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;

  &lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;
    &lt;span class="n"&gt;depends_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;application1&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;application2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I basically duplicated the definition of &lt;code&gt;application&lt;/code&gt;, but the first service is running now 6 workers, just for the sake of showing a possible difference between the two. Now run &lt;code&gt;docker-compose up -d&lt;/code&gt; and &lt;code&gt;docker-compose logs -f nginx&lt;/code&gt;. If you refresh the page on the browser multiple times you will see something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose logs -f nginx
Attaching to service_nginx_1
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:25 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.2:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:25 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.2:8000: GET /favicon.ico HTTP/1.1 &lt;span class="m"&gt;404&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:30 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.3:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:31 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.2:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:32 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.2:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:33 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.2:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:33 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.3:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:34 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.2:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:34 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.2:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:35 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.2:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
nginx_1         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/Feb/2020:11:03:35 +0000&lt;span class="o"&gt;]&lt;/span&gt; localhost to: &lt;span class="m"&gt;172&lt;/span&gt;.18.0.3:8000: GET / HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where you can clearly notice the load balancing between &lt;code&gt;172.18.0.2&lt;/code&gt; (&lt;code&gt;application1&lt;/code&gt;) and &lt;code&gt;172.18.0.3&lt;/code&gt; (&lt;code&gt;application2&lt;/code&gt;) in action.&lt;/p&gt;
&lt;p&gt;I will not show here an example of reverse proxy or HTTPS to prevent this post to become too long. You can find resources on those topics in the next section.&lt;/p&gt;
&lt;h2 id="43-resources"&gt;4.3 Resources&lt;a class="headerlink" href="#43-resources" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These resources provide more detailed information on the topics discussed in this section&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Compose &lt;a href="https://docs.docker.com/compose/"&gt;official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nginx &lt;a href="http://nginx.org/en/docs/"&gt;documentation&lt;/a&gt;: in particular the sections about &lt;a href="http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format"&gt;log_format&lt;/a&gt; and &lt;a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream"&gt;upstream&lt;/a&gt; directives&lt;/li&gt;
&lt;li&gt;How to &lt;a href="https://docs.nginx.com/nginx/admin-guide/monitoring/logging/"&gt;configure logging&lt;/a&gt; in nginx&lt;/li&gt;
&lt;li&gt;How to &lt;a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/"&gt;configure load balancing&lt;/a&gt; in nginx&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.nginx.com/nginx/admin-guide/security-controls/terminating-ssl-http/"&gt;Setting up an HTTPS Server&lt;/a&gt; with nginx and &lt;a href="https://www.humankode.com/ssl/create-a-selfsigned-certificate-for-nginx-in-5-minutes"&gt;how to created self-signed certificates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to &lt;a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/"&gt;create a reverse proxy&lt;/a&gt; with nginx, the documentation of the &lt;a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location"&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; directive and &lt;a href="https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms"&gt;some insights&lt;/a&gt; on the location choosing algorithms (one of the most complex parts of nginx)&lt;/li&gt;
&lt;li&gt;The source code of this example is available &lt;a href="https://github.com/lgiordani/dissecting-a-web-stack-code/tree/master/4_the_web_server"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="44-issues"&gt;4.4 Issues&lt;a class="headerlink" href="#44-issues" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, finally we can say that the job is done. Now we have a production-ready web server in front of our multi-threaded web framework and we can focus on writing Python code instead of dealing with HTTP headers.&lt;/p&gt;
&lt;p&gt;Using a web server allows us to scale the infrastructure just adding new instances behind it, without interrupting the service. The HTTP concurrent server runs multiple instances of our framework, and the framework itself abstracts HTTP, mapping it to our high-level language.&lt;/p&gt;
&lt;h1 id="bonus-cloud-infrastructures"&gt;Bonus: cloud infrastructures&lt;a class="headerlink" href="#bonus-cloud-infrastructures" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Back in the early years of the Internet, companies used to have their own servers on-premise, and system administrators used to run the whole stack directly on the bare operating system. Needless to say, this was complicated, expensive, and failure-prone.&lt;/p&gt;
&lt;p&gt;Nowadays "the cloud" is the way to go, so I want to briefly mention some components that can help you run such a web stack on AWS, which is the platform I know the most and the most widespread cloud provider in the world at the time of writing.&lt;/p&gt;
&lt;h2 id="elastic-beanstalk"&gt;Elastic Beanstalk&lt;a class="headerlink" href="#elastic-beanstalk" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the entry-level solution for simple applications, being a managed infrastructure that provides load balancing, auto-scaling, and monitoring. You can use several programming languages (among which Python and Node.js) and choose between different web servers like for example Apache or nginx. The components of an EB service are not hidden, but you don't have direct access to them, and you have to rely on configuration files to change the way they work. It's a good solution for simple services, but you will probably soon need more control.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/elasticbeanstalk"&gt;Go to Elastic Beanstalk&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="elastic-container-service-ecs"&gt;Elastic Container Service (ECS)&lt;a class="headerlink" href="#elastic-container-service-ecs" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With ECS you can run Docker containers grouping them in clusters and setting up auto-scale policies connected with metrics coming from CloudWatch. You have the choice of running them on EC2 instances (virtual machines) managed by you or on a serverless infrastructure called Fargate. ECS will run your Docker containers, but you still have to create DNS entries and load balancers on your own. You also have the choice of running your containers on Kubernetes using EKS (Elastic Kubernetes Service).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/ecs/"&gt;Go to Elastic Container Service&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="elastic-compute-cloud-ec2"&gt;Elastic Compute Cloud (EC2)&lt;a class="headerlink" href="#elastic-compute-cloud-ec2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the bare metal of AWS, where you spin up stand-alone virtual machines or auto-scaling group of them. You can SSH into these instances and provide scripts to install and configure software. You can install here your application, web servers, databases, whatever you want. While this used to be the way to go at the very beginning of the cloud computing age I don't think you should go for it. There is so much a cloud provider can give you in terms of associated services like logs or monitoring, and in terms of performances, that it doesn't make sense to avoid using them. EC2 is still there, anyway, and if you run ECS on top of it you need to know what you can and what you can't do.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/ec2/"&gt;Go to Elastic Compute Cloud&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="elastic-load-balancing"&gt;Elastic Load Balancing&lt;a class="headerlink" href="#elastic-load-balancing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While Network Load Balancers (NLB) manage pure TCP/IP connections, Application Load Balancers are dedicated to HTTP, and they can perform many of the services we need. They can reverse proxy through rules (that were recently improved) and they can terminate TLS, using certificates created in ACM (AWS Certificate Manager). As you can see, ALBs are a good replacement for a web server, even though they clearly lack the extreme configurability of a software. You can, however, use them as the first layer of load balancing, still using nginx or Apache behind them if you need some of the features they provide.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/elasticloadbalancing/"&gt;Go to Elastic Load Balancing&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="cloudfront"&gt;CloudFront&lt;a class="headerlink" href="#cloudfront" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CloudFront is a Content Delivery Network, that is a geographically-distributed cache that provides faster access to your content. While CDNs are not part of the stack that I discussed in this post I think it is worth mentioning CF as it can speed-up any static content, and also terminate TLS in connection with AWS Certificate Manager.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/cloudfront/"&gt;Go to CloudFront&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;</content><category term="Programming"></category><category term="architectures"></category><category term="concurrent programming"></category><category term="cryptography"></category><category term="infrastructure"></category><category term="Flask"></category><category term="Django"></category><category term="Python"></category><category term="SSL"></category><category term="HTTP"></category><category term="WWW"></category><category term="AWS"></category></entry><entry><title>Punch 2.0.0 is out</title><link href="https://www.thedigitalcatonline.com/blog/2019/11/21/punch-2-0-0/" rel="alternate"></link><published>2019-11-21T16:00:00+01:00</published><updated>2019-11-21T16:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-11-21:/blog/2019/11/21/punch-2-0-0/</id><summary type="html"></summary><content type="html">&lt;p&gt;Punch 2.0.0 is out!&lt;/p&gt;
&lt;p&gt;This is the latest release of the project that I started to replace bumpversion. Update your version while having a drink!&lt;/p&gt;
&lt;p&gt;Punch is a configurable version updater, and you can use to automate the management of your project’s version number.&lt;/p&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DEPRECATION&lt;/strong&gt; Punch doesn't support GLOBAL variables in the FILES variable anymore. The values given to fields in the FILES section are now simple strings and are not processed through Jinja2 anymore.&lt;/li&gt;
&lt;li&gt;Initial drop of Python 2.x: the CI process doesn't test Python2.x anymore.&lt;/li&gt;
&lt;li&gt;Complete review of documentation: the docs have been split in multiple files to make it easier to find information and to understand the program.&lt;/li&gt;
&lt;li&gt;Initial implementation of automatic documentation from tests. Integration tests can now be parsed to extract examples for the documentation. See &lt;a href="https://punch.readthedocs.io/en/latest/test_examples/"&gt;Examples from the tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Named serializers: serializers now can be given a name through a dictionary syntax. With this change it becomes possible to select the serializer to use for the VCS. See &lt;a href="https://punch.readthedocs.io/en/latest/configuration/#globals"&gt;Configuration &amp;gt; GLOBALS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Complex serializers: standard serializers use the same pattern both for the search and for the replace actions. With complex serializers you can define two different patterns, one for each action. See &lt;a href="https://punch.readthedocs.io/en/latest/advanced/#complex-serializers"&gt;Advanced configuration &amp;gt; Complex serializers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The configuration of each file managed by Punch can override the global serializers or add new ones. See &lt;a href="https://punch.readthedocs.io/en/latest/configuration/#files"&gt;Configuration &amp;gt; FILES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release notes: Punch can be configured to check if a pattern based on the new version is present in the managed files. This makes it simple to check if HISTORY files have been updated without requiring to interrupt the execution of the program and later restore it. See &lt;a href="https://punch.readthedocs.io/en/latest/advanced/#release-notes"&gt;Advanced configuration &amp;gt; Release notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read the full documentation &lt;a href="https://punch.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Projects"></category><category term="Git"></category><category term="Python"></category><category term="Python3"></category><category term="versioning"></category></entry><entry><title>Run a blog with pelican</title><link href="https://www.thedigitalcatonline.com/blog/2019/06/07/run-a-pelican-blog/" rel="alternate"></link><published>2019-06-07T15:30:00+01:00</published><updated>2019-06-07T15:30:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-06-07:/blog/2019/06/07/run-a-pelican-blog/</id><summary type="html">&lt;p&gt;How to set up a static blog with Pelican, a step-by-step guide&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the biggest piece of advice I can give to beginner developers is: write a blog.&lt;/p&gt;
&lt;p&gt;Writing, and in general teaching, is a perfect way to understand concepts. Some say that you cannot claim you understood something until you can explain it properly. This unfortunately doesn't take into account that not everyone is a good communicator, and writing (also technical writing) is an art, not just a set of checkboxes to tick.&lt;/p&gt;
&lt;p&gt;Nevertheless, explaining a concept forces you to try to organise your thought, to write them down in a sequential way, to explore corners that you take for granted while the concepts involved are all but simple.&lt;/p&gt;
&lt;p&gt;So my advice is once again: write a blog. Share your experience as a programmer, mathematician, physicist, data scientist (and thousands of other interesting jobs that I can't mention here). Don't worry if you don't have a revolutionary discovery to share with others. We are standing on the shoulders of giants, and every little contribution is welcome.&lt;/p&gt;
&lt;p&gt;One of my most successful posts on this blog is something I wrote after fighting for 3 hours with a trivial Python syntax mistake. I was already a senior programmer, I did a novice mistake. I shared the solution and now that post has a huge amount of visits every day, which hopefully means that some people stuck with the same problem can quickly find a solution. Maybe these people will one day write the new Google or the new AWS, and I'm glad I helped them today.&lt;/p&gt;
&lt;h1 id="pelican"&gt;Pelican&lt;a class="headerlink" href="#pelican" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I run this blog since 2013. I wanted to use a static website generator because I liked the simplicity of the concept, and since GitHub was providing free hosting on &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; I considered it a viable option.&lt;/p&gt;
&lt;p&gt;I started with &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, a very well-known static website generator written in Ruby, because it was the system used by the vast majority of technical bloggers out there at the time. Unfortunately I'm not a Ruby programmer, so every issue I had with the build system that ended in a crash was a mystery to me. I also wanted to add functionalities to the system, and the language once again was a barrier. Jekyll is surely a very good system but it didn't suit my needs.&lt;/p&gt;
&lt;p&gt;Since I didn't have the time to study Ruby at that point, I tried to find a good static site generator written in Python, a language that I know, and I found it in &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;. Arguably, the Pelican website is not graphically amazing, and this worried me a bit, but I quickly discovered that the whole system is pretty good.&lt;/p&gt;
&lt;p&gt;In 6 years, with the help of Pelican, I developed a wonderfully simple blogging work flow based on Git, so I decided to share my Pelican setup with a Cookiecutter template. Recently I refurbished the template to update it with the latest changes that I made to my personal setup and I realised that, despite the documentation, setting up a blog based on pelican might still be difficult for some.&lt;/p&gt;
&lt;p&gt;In this post I will show you how to create your blog from scratch using Pelican. You don't need to know Python to use it, even though, as it happened to me with Jekyll, it might help if you want to get involved in the development of the project.&lt;/p&gt;
&lt;p&gt;You can also run Pelican without this template, just follow the &lt;a href="http://docs.getpelican.com/en/latest/install.html"&gt;instructions&lt;/a&gt; on the official documentation. My template simplifies the initial installation, and creates some script that make you follow a specific work flow, but you are free to change them to suit you needs.&lt;/p&gt;
&lt;p&gt;If you are not acquainted with static web sites have a look at the &lt;a href="https://en.wikipedia.org/wiki/Static_web_page"&gt;Wikipedia page&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You need to have &lt;a href="https://www.python.org/"&gt;Python 3&lt;/a&gt; and &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; installed in your system. &lt;a href="https://github.com/petervanderdoes/gitflow-avh"&gt;Git Flow&lt;/a&gt; is optional, so if you don't want to use it you can avoid installing it.&lt;/p&gt;
&lt;h1 id="github"&gt;GitHub&lt;a class="headerlink" href="#github" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You need to create two repositories in your GitHub account. The first one will host the source files of your blog (the &lt;em&gt;source&lt;/em&gt; repository), while the second one will host the actual static site files (deploy repository). Follow the instructions &lt;a href="https://help.github.com/en/articles/create-a-repo"&gt;here&lt;/a&gt; if you are not sure how to create them.&lt;/p&gt;
&lt;p&gt;Call the first repository &lt;code&gt;blog_source&lt;/code&gt; and the second one &lt;code&gt;&amp;lt;your_user_name&amp;gt;.github.io&lt;/code&gt;. The former is just a convention followed by my template, while the latter is enforced by GitHub pages, which uses by default that repository to publish the website at the address with that name.&lt;/p&gt;
&lt;h1 id="install-the-template"&gt;Install the template&lt;a class="headerlink" href="#install-the-template" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Create a &lt;a href="https://docs.python.org/3/tutorial/venv.html"&gt;Python virtual environment&lt;/a&gt; and install &lt;code&gt;cookiecutter&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install cookiecutter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run &lt;code&gt;cookiecutter&lt;/code&gt; on the template I prepared&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cookiecutter https://github.com/lgiordani/cookiecutter-pelicanblog.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you will be asked some questions, let's look at them in detail. Remember that you can always start from scratch of fix the values you entered manually later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;github_username [yourusername]&lt;/code&gt; - Well, this should be self-explanatory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blog_source_repo [blog_source]&lt;/code&gt; - This is just the name of the source repository that you created on GitHub. You can accept the default if you didn't change the name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deploy_repository [yourusername.github.com]&lt;/code&gt; - This is the name of the deploy repository, i.e. the one that contains the actual static website. The default value is already filled with your GitHub username, so if you are setting up a GitHub Pages blog you can just accept it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deploy_directory [deploy]&lt;/code&gt; - The local directory where the deploy repository is cloned and that will be updated by the deployment process. By default, this is set to &lt;code&gt;deploy&lt;/code&gt; inside the project directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_versioning [y]&lt;/code&gt; - Say &lt;code&gt;y&lt;/code&gt; if you want to have a release process for your website with a version number and associated Git tags.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_git_flow [y]&lt;/code&gt; - Say &lt;code&gt;y&lt;/code&gt; if you want to initialise Git Flow on the repository (you need to have Git Flow already installed in the system).&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="set-up-the-environment"&gt;Set up the environment&lt;a class="headerlink" href="#set-up-the-environment" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Now enter the directory that was created by the template, install the requirements and run the &lt;code&gt;setup.sh&lt;/code&gt; script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;blog_source_repo&amp;gt;
pip install -r requirements.txt
./setup.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script performs the following actions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it initializes git in the local repository, adding the source repository as a remote with the name &lt;code&gt;origin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if you decided to use Git Flow, it initializes the repository, creating the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;it clones the https://github.com/getpelican/pelican-plugins repository&lt;/li&gt;
&lt;li&gt;it clones the https://github.com/getpelican/pelican-themes repository&lt;/li&gt;
&lt;li&gt;it creates the &lt;code&gt;deploy&lt;/code&gt; directory which is a local clone one of the deploy repository&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="configure-pelican"&gt;Configure Pelican&lt;a class="headerlink" href="#configure-pelican" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Now everything is ready to run the &lt;code&gt;pelican-quickstart&lt;/code&gt; script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script asks the following questions. I marked with a &lt;strong&gt;!!!&lt;/strong&gt; the answers that are not up to you but depend on the current setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Where do you want to create your new web site? [.]&lt;/code&gt; - &lt;strong&gt;!!!&lt;/strong&gt; Answer &lt;code&gt;pelican&lt;/code&gt; so everything will be installed in that directory inside the current one, keeping the installation tidy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;What will be the title of this web site?&lt;/code&gt; - This is up to you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Who will be the author of this web site?&lt;/code&gt; - This is up to you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;What will be the default language of this web site? [en]&lt;/code&gt; - This is up to you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Do you want to specify a URL prefix? e.g., https://example.com   (Y/n)&lt;/code&gt; &lt;strong&gt;!!!&lt;/strong&gt; Answer &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;What is your URL prefix? (see above example; no trailing slash)&lt;/code&gt; &lt;strong&gt;!!!&lt;/strong&gt; This is &lt;code&gt;https://&amp;lt;username&amp;gt;.github.io&lt;/code&gt; if you are using GH pages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Do you want to enable article pagination? (Y/n)&lt;/code&gt; - This is up to you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;How many articles per page do you want? [10]&lt;/code&gt; - This is up to you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;What is your time zone? [Europe/Paris]&lt;/code&gt; - This is up to you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n)&lt;/code&gt; - &lt;strong&gt;!!!&lt;/strong&gt; Answer &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Answer &lt;code&gt;n&lt;/code&gt; to all the following questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have questions on this part you can read the &lt;a href="http://docs.getpelican.com/en/latest/install.html"&gt;Pelican documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now you can enter the &lt;code&gt;pelican&lt;/code&gt; directory and run &lt;code&gt;make devserver&lt;/code&gt; which will run the development server at http://localhost:8000. &lt;a href="http://docs.getpelican.com/en/latest/publish.html#make"&gt;This page&lt;/a&gt; of the official documentation explains all the options of the Makefile.&lt;/p&gt;
&lt;h1 id="the-work-flow"&gt;The work flow&lt;a class="headerlink" href="#the-work-flow" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The work flow that you will follow using this setup is the following (I assume you use Git Flow, change the git commands accordingly if you are using another flow)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a git branch: &lt;code&gt;git flow feature start &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create one or more new articles / Edit previous articles: create the files as &lt;code&gt;pelican/content/&amp;lt;slug&amp;gt;.markdown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit: &lt;code&gt;git commit&lt;/code&gt; (repeat 2 and 3 until you are satisfied with the results)&lt;/li&gt;
&lt;li&gt;Merge the branch: &lt;code&gt;git flow feature finish&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Release: &lt;code&gt;./release.sh&lt;/code&gt; (this runs Punch to create a new release)&lt;/li&gt;
&lt;li&gt;Deploy: &lt;code&gt;./deploy.sh&lt;/code&gt; (this runs Pelican to create the static site and copies everything in the &lt;code&gt;deploy&lt;/code&gt; directory)&lt;/li&gt;
&lt;li&gt;Publish: &lt;code&gt;./publish.sh&lt;/code&gt; (this adds, commits, and pushes the files in the &lt;code&gt;deploy&lt;/code&gt; directory)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each one of these steps, with the notable exception of the second one, is performed through a single command and takes up to few seconds in the worst case. I prefer to have control on the publishing process, so often I run the git commands manually in the &lt;code&gt;deploy&lt;/code&gt; directory, but you can safely use the provided Make directive.&lt;/p&gt;
&lt;h1 id="versioning"&gt;Versioning&lt;a class="headerlink" href="#versioning" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Versioning is not the most important thing to do in a blog, but I personally like to have a trace of what I created and when in my Git log. I use &lt;a href="https://pypi.org/project/punch.py/"&gt;Punch&lt;/a&gt;, a package that I developed to replace bumpversion. If you want to customise the default versioning scheme contained in the template read the &lt;a href="https://punch.readthedocs.io/en/latest/"&gt;Punch documentation&lt;/a&gt;.&lt;/p&gt;</content><category term="Projects"></category><category term="Python"></category><category term="Python3"></category><category term="pelican"></category></entry><entry><title>The Digital Cat Youtube Channel</title><link href="https://www.thedigitalcatonline.com/blog/2019/05/27/youtube-channel/" rel="alternate"></link><published>2019-05-27T12:00:00+01:00</published><updated>2019-05-27T12:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-05-27:/blog/2019/05/27/youtube-channel/</id><summary type="html">&lt;p&gt;The new Youtube channel The Digital Cat is out in the wild&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Digital Cat &lt;a href="https://www.youtube.com/channel/UCJ70w0WzWjWerpk3utRcAKA"&gt;Youtube channel&lt;/a&gt; just launched!&lt;/p&gt;
&lt;p&gt;The channel will host workshops and tutorial on Python and other languages, on operating systems, cryptography, and other topics that you can find here on this blog. I just finished recording the first part of my workshop "TDD in Python with pytest", which was successfully presented at PyCon UK, PyCon IT, PyCon Ireland, EuroPython and PyLadies London, and the 4 videos are already available on the channel.&lt;/p&gt;
&lt;div class="big-image"&gt;
&lt;img src="/images/global/banner_large.jpg" alt="Youtube Channel banner" /&gt;
&lt;/div&gt;

&lt;p&gt;You can subscribe to the channel at &lt;a href="https://www.youtube.com/channel/UCJ70w0WzWjWerpk3utRcAKA"&gt;this link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I appreciate that many people struggle to follow a long post or a tutorial and prefer to see how someone works and hear a voice explaining the steps. Well, I'm not sure if they will like hearing my voice, but this channel is the attempts to reach that type of audience. These are my first videos, so the production is not at its best, but I hope I will improve it in the future.&lt;/p&gt;
&lt;p&gt;I hope you will find them useful, feel free to post comments under the videos if you have suggestions, if you need clarifications, or just to say that you enjoyed them. Thanks!&lt;/p&gt;</content><category term="Programming"></category><category term="Python"></category><category term="Python2"></category><category term="Python3"></category><category term="TDD"></category><category term="testing"></category><category term="video"></category></entry><entry><title>Motorola 68000: addressing modes</title><link href="https://www.thedigitalcatonline.com/blog/2019/03/04/motorola-68000-addressing-modes/" rel="alternate"></link><published>2019-03-04T22:30:00+01:00</published><updated>2019-03-04T22:30:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-03-04:/blog/2019/03/04/motorola-68000-addressing-modes/</id><summary type="html">&lt;p&gt;A review of the addressing modes of one of the most famous 32-bit CPUs&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Motorola 68000 is an impressive microprocessor, and this is reflected by the large amount of addressing modes that it provides; it is actually surprising, for people used to the x86 family, to find in this microprocessor's Assembly language constructs that are very similar to the ones provided by high level languages such as pre- and postdecrements, or multiconditional branching instructions.&lt;/p&gt;
&lt;p&gt;The processor provides 6 different addressing modes, each of which has multiple versions, for a grand total of 14. The specific instruction used to manipulate the data can also work on different data sizes, but these variations are not considered here, being features of the instruction and not of the addressing mode.&lt;/p&gt;
&lt;p&gt;Addressing refers to the format of the &lt;strong&gt;effective address&lt;/strong&gt; (&lt;code&gt;ea&lt;/code&gt; or &lt;code&gt;EA&lt;/code&gt; in many manuals), that is the representation of the source or destination of an instruction. Remember that not all the instructions support all 14 modes, so whenever you read &lt;code&gt;ea&lt;/code&gt; remember that we are talking about data which address can be represented by one or more of those modes. &lt;/p&gt;
&lt;p&gt;The syntax of the &lt;code&gt;movea&lt;/code&gt; instruction, for example, is &lt;code&gt;movea &amp;lt;ea&amp;gt;, An&lt;/code&gt;, which tells us that the source is one of the 14 possible combinations presented here, while the destination is one of the address registers &lt;code&gt;a1-a6&lt;/code&gt;. Strictly speaking, however, the syntax of the instruction is &lt;code&gt;movea &amp;lt;ea1&amp;gt;, &amp;lt;ea2&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;ea1&amp;gt;&lt;/code&gt; can be one of the 14 modes, and &lt;code&gt;&amp;lt;ea2&amp;gt;&lt;/code&gt; can only be an address register (Address Register Direct Mode).&lt;/p&gt;
&lt;p&gt;The addressing mode is encoded using three fields of the binary instruction. The &lt;strong&gt;EA Mode&lt;/strong&gt; field, the &lt;strong&gt;EA register&lt;/strong&gt; field, and the &lt;strong&gt;Extension words&lt;/strong&gt;. The first two are 3-bit fields contained in the instruction word, which combination uniquely identifies the addressing mode and the number of the register, in case this is needed. The extension words, instead, are words that follow the instruction word in memory, and that usually represent actual 8-, 16-, or 32-bit numbers.&lt;/p&gt;
&lt;h1 id="sign-extension"&gt;Sign extension&lt;a class="headerlink" href="#sign-extension" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Before we discuss the addressing modes provided by the MC68000 it is worth explaining the sign-extension mechanism used by this processor. Sometimes addressing modes use 8-bit or 16-bit data instead of a full long word, for example to provide a constant that is added to a register before using its value. Calculations inside the microprocessor, however, are always performed on 32-bits numbers, so such values are &lt;em&gt;extended&lt;/em&gt; to a long word.&lt;/p&gt;
&lt;p&gt;There are two ways to extend a byte/word to a long word. One is to pad with zeroes on the left (unsigned extension) and the other is to pad preserving the sign (signed extension). While this doesn't change positive numbers it affects negative ones. Let's consider an 8-bit negative number like -126, which is represented by &lt;code&gt;10000010&lt;/code&gt; in 8-bit two's complement, &lt;code&gt;0x82&lt;/code&gt; in hexadecimal. A 32-bit signed extension of this number becomes &lt;code&gt;0xffffff82&lt;/code&gt;, which is still -126 in 32-bit two's complement, but an unsigned extension would give &lt;code&gt;0x00000082&lt;/code&gt;, which is 130.&lt;/p&gt;
&lt;p&gt;While the MC68000 can use both address and data registers for general-purpose data storage, the two categories are meant to manage data of different nature. In particular, &lt;em&gt;data registers never sign-extend bytes or words&lt;/em&gt;, as this would change the pure representation of that sequence of bits, adding spurious bits to keep the sign. Addressed, instead, should never change their value, so the &lt;em&gt;address registers sign-extend incoming values&lt;/em&gt; to preserve the real address or displacement represented by the bits.&lt;/p&gt;
&lt;h1 id="addressing-modes"&gt;Addressing Modes&lt;a class="headerlink" href="#addressing-modes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="register-direct"&gt;Register Direct&lt;a class="headerlink" href="#register-direct" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the simplest addressing mode, as it reads or writes data in one of the microprocessor's registers. There are two versions of it, one for data registers and one for address registers.&lt;/p&gt;
&lt;h3 id="data-register-direct"&gt;Data Register Direct&lt;a class="headerlink" href="#data-register-direct" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;Dn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This mode addresses the data contained in one of the data registers &lt;code&gt;d0-d7&lt;/code&gt;. The EA Mode field is &lt;code&gt;000&lt;/code&gt; and the EA Register field contains the register number. The official documentation uses the syntax &lt;code&gt;Dn&lt;/code&gt; to identify this mode. No extension words are used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cmpi.w  #0x1111,d1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;                           Compare&lt;/span&gt;
&lt;span class="err"&gt;                        +----------+&lt;/span&gt;
&lt;span class="err"&gt;                        |  0x1111  |&lt;/span&gt;
&lt;span class="err"&gt;                        +----------+&lt;/span&gt;
&lt;span class="err"&gt;d1 0x12ca ------------&amp;gt; |  0x12ca  |&lt;/span&gt;
&lt;span class="err"&gt;                        +----------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="address-register-direct-mode"&gt;Address Register Direct Mode&lt;a class="headerlink" href="#address-register-direct-mode" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;An&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;001&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This mode identifies the data contained in one of the address registers &lt;code&gt;a0-a6&lt;/code&gt;. The EA Mode field is &lt;code&gt;001&lt;/code&gt; and the EA Register field is the number of the register, while the official syntax for it is &lt;code&gt;An&lt;/code&gt;.  No extension words are used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cmpi.w  #0x1111,a1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;                           Compare&lt;/span&gt;
&lt;span class="err"&gt;                        +------------+&lt;/span&gt;
&lt;span class="err"&gt;                        |  0x1111    |&lt;/span&gt;
&lt;span class="err"&gt;                        +------------+&lt;/span&gt;
&lt;span class="err"&gt;a1 0xfc1d28 ----------&amp;gt; |  0xfc1d28  |&lt;/span&gt;
&lt;span class="err"&gt;                        +------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="register-indirect"&gt;Register Indirect&lt;a class="headerlink" href="#register-indirect" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the name of this mode suggests, the addressing is performed using a register, but the data is accessed indirectly. The register doesn't contain the data we want to use, but the address in memory of the data. This is what higher level languages like C call &lt;em&gt;memory pointer&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="address-register-indirect"&gt;Address Register Indirect&lt;a class="headerlink" href="#address-register-indirect" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(An)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;010&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The simplest form of indirect access is when the address of the data is stored in one of the address registers &lt;code&gt;a0-a6&lt;/code&gt;. The syntax for this mode is &lt;code&gt;(An)&lt;/code&gt;, while the binary form has the EA Mode field set to &lt;code&gt;010&lt;/code&gt; and the EA Register field represents the number of the address register in use. No extension words are used.&lt;/p&gt;
&lt;p&gt;The following example compares the number &lt;code&gt;0x1111&lt;/code&gt; with the content of the memory cell which address is contained in &lt;code&gt;a1&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cmpi.w  #0x1111,(a1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;a1 0xfc1d28&lt;/span&gt;
&lt;span class="err"&gt;      |              0xfc1d24  |         |                Compare&lt;/span&gt;
&lt;span class="err"&gt;      |                        +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;      |              0xfc1d26  |         |              |  0x1111  |&lt;/span&gt;
&lt;span class="err"&gt;      |                        +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;      +------------&amp;gt; 0xfc1d28  |  0x13c  | -----------&amp;gt; |   0x13c  |&lt;/span&gt;
&lt;span class="err"&gt;                               +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;                     0xfc1d2a  |         |&lt;/span&gt;
&lt;span class="err"&gt;                               +---------+&lt;/span&gt;
&lt;span class="err"&gt;                     0xfc1d2c  |         |&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="address-register-indirect-with-postincrement"&gt;Address Register Indirect with Postincrement&lt;a class="headerlink" href="#address-register-indirect-with-postincrement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(An)+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This addressing mode is another of the high-level languages constructs that the MC68000 provides directly in its Assembly language. This mode works exactly like the Address Register Indirect, but &lt;em&gt;after&lt;/em&gt; the data has been fetched from memory the address register is incremented by the size of the data itself. So, this addressing mode is perfectly suited for algorithms that need to read consecutive arrays from memory, as there is no need to add instructions that increment the pointer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cmpi.w  #0x1111,(a1)+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    a1 0xfc1d28&lt;/span&gt;
&lt;span class="err"&gt;     ^       |              0xfc1d24  |         |                Compare&lt;/span&gt;
&lt;span class="err"&gt;     |       |                        +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;     |       |              0xfc1d26  |         |              |  0x1111  |&lt;/span&gt;
&lt;span class="err"&gt;   +----+    v                        +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;   | +2 | &amp;lt;--+------------&amp;gt; 0xfc1d28  |  0x13c  | -----------&amp;gt; |   0x13c  |&lt;/span&gt;
&lt;span class="err"&gt;   +----+                             +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;                            0xfc1d2a  |         |&lt;/span&gt;
&lt;span class="err"&gt;                                      +---------+&lt;/span&gt;
&lt;span class="err"&gt;                            0xfc1d2c  |         |&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The standard syntax is &lt;code&gt;(An)+&lt;/code&gt;, and for this mode, the EA Mode field is &lt;code&gt;011&lt;/code&gt;, while the EA Register field contains the register number.  No extension words are used.&lt;/p&gt;
&lt;p&gt;This mode and the following one are very powerful, as they automatically add to the address the size of the data that has been read, so 1 for a byte read, 2 for a word, and 4 for a long word. The only exception to this rule is when the register is &lt;code&gt;a7&lt;/code&gt;, which is an alias for &lt;code&gt;sp&lt;/code&gt;, the system Stack Pointer. In that case the pointer is always kept aligned to a word boundary, so the increment is 2 even for a byte read.&lt;/p&gt;
&lt;h3 id="address-register-indirect-with-predecrement"&gt;Address Register Indirect with Predecrement&lt;a class="headerlink" href="#address-register-indirect-with-predecrement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;-(An)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the specular version of the previous mode, where the address register used to point to the data is decremented &lt;em&gt;before&lt;/em&gt; the addressing is performed. The standard syntax is &lt;code&gt;-(An)&lt;/code&gt;; the EA Mode field is &lt;code&gt;100&lt;/code&gt; and the EA Register field contains the register number. No extension words are used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cmpi.w  #0x1111,-(a1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;   a1 0xfc1d28&lt;/span&gt;
&lt;span class="err"&gt;    ^       |&lt;/span&gt;
&lt;span class="err"&gt;    |       v&lt;/span&gt;
&lt;span class="err"&gt;    |    +----+&lt;/span&gt;
&lt;span class="err"&gt;    |    | -2 |          0xfc1d22  |         |                Compare&lt;/span&gt;
&lt;span class="err"&gt;    |    +----+                    +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;    |       |            0xfc1d24  |         |              |  0x1111  |&lt;/span&gt;
&lt;span class="err"&gt;    |       v                      +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;    +-------+----------&amp;gt; 0xfc1d26  |  0x13c  | -----------&amp;gt; |   0x13c  |&lt;/span&gt;
&lt;span class="err"&gt;                                   +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;                         0xfc1d28  |         |&lt;/span&gt;
&lt;span class="err"&gt;                                   +---------+&lt;/span&gt;
&lt;span class="err"&gt;                         0xfc1d2a  |         |&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="address-register-indirect-with-displacement"&gt;Address Register Indirect with Displacement&lt;a class="headerlink" href="#address-register-indirect-with-displacement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(d16,An) / d16(An)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;101&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The natural evolution of the previous two addressing modes is to use an arbitrary offset that is added to the base address contained in the register. The standard syntax for this mode is &lt;code&gt;(d16,An)&lt;/code&gt; or &lt;code&gt;d16(An)&lt;/code&gt;, where &lt;code&gt;d16&lt;/code&gt; is a 16-bit signed integer. So for example &lt;code&gt;0xf(a1)&lt;/code&gt; is the data contained in memory at the address &lt;code&gt;a1 + 0xf&lt;/code&gt;. The EA Mode field is &lt;code&gt;101&lt;/code&gt; and the EA register fields is the number of the address register used. This address mode requires 1 extension word that contains the 16-bit displacement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cmpi.w  #0x1111,0x140(a1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;     a1 0xfc1d28&lt;/span&gt;
&lt;span class="err"&gt;           |&lt;/span&gt;
&lt;span class="err"&gt;           v&lt;/span&gt;
&lt;span class="err"&gt;         +---+&lt;/span&gt;
&lt;span class="err"&gt;0x140 -&amp;gt; | + |            0xfc1e64  |         |                Compare&lt;/span&gt;
&lt;span class="err"&gt;         +---+                      +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;           |              0xfc1e66  |         |              |  0x1111  |&lt;/span&gt;
&lt;span class="err"&gt;           v                        +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;           +------------&amp;gt; 0xfc1e68  |  0x13c  | -----------&amp;gt; |   0x13c  |&lt;/span&gt;
&lt;span class="err"&gt;                                    +---------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;                          0xfc1e6a  |         |&lt;/span&gt;
&lt;span class="err"&gt;                                    +---------+&lt;/span&gt;
&lt;span class="err"&gt;                          0xfc1e6c  |         |&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that the displacement is fixed to 16-bit, so its value limited in the range &lt;code&gt;(-32768,32767)&lt;/code&gt;; the displacement is however sign-extended to 32-bit before being added to the base address.&lt;/p&gt;
&lt;p&gt;Note: this mode is sometimes called "Register Indirect with Offset".&lt;/p&gt;
&lt;h3 id="address-register-indirect-with-index"&gt;Address Register Indirect with Index&lt;a class="headerlink" href="#address-register-indirect-with-index" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(d8,Dn,An)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;110&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides an addressing mode that mimics C-style loops and a way to perform random access of arrays through a 16-bit displacement, the MC68000 provides a double-indexed array access with this addressing mode. The base address contained in one of the address registers is added to the content of a 16/32-bit register and an 8-bit index. This address mode requires 1 extension word that contains the 8-bit index; only the 8 least significant bits of the extension words are kept and sign-extended to 32-bits before any calculation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cmpi.w  #0x1111,(0x4,d0,a1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    a1 0xfc1d28   d0 0x140&lt;/span&gt;
&lt;span class="err"&gt;          |            |&lt;/span&gt;
&lt;span class="err"&gt;          v            |&lt;/span&gt;
&lt;span class="err"&gt;        +---+          |&lt;/span&gt;
&lt;span class="err"&gt;        | + | &amp;lt;--------+&lt;/span&gt;
&lt;span class="err"&gt;        +---+&lt;/span&gt;
&lt;span class="err"&gt;          |&lt;/span&gt;
&lt;span class="err"&gt;          v&lt;/span&gt;
&lt;span class="err"&gt;        +---+&lt;/span&gt;
&lt;span class="err"&gt;0x4 --&amp;gt; | + |            0xfc1e68  |          |                Compare&lt;/span&gt;
&lt;span class="err"&gt;        +---+                      +----------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;          |              0xfc1e6a  |          |              |  0x1111  |&lt;/span&gt;
&lt;span class="err"&gt;          v                        +----------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;          +------------&amp;gt; 0xfc1e6c  |   data   | -----------&amp;gt; |   0x13c  |&lt;/span&gt;
&lt;span class="err"&gt;                                   +----------+              +----------+&lt;/span&gt;
&lt;span class="err"&gt;                         0xfc1e6e  |          |&lt;/span&gt;
&lt;span class="err"&gt;                                   +----------+&lt;/span&gt;
&lt;span class="err"&gt;                         0xfc1e70  |          |&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For this mode the EA Mode field is set to &lt;code&gt;110&lt;/code&gt; and the EA Register field contains the number of the address register in use. The standard syntax used by manuals is &lt;code&gt;(d8, An, Dn.SIZE)&lt;/code&gt;, where &lt;code&gt;SIZE&lt;/code&gt; can be either &lt;code&gt;w&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt;. This addressing mode can provide an invaluable way to access two-dimensional arrays, and once again shows how powerful this microprocessor is.&lt;/p&gt;
&lt;p&gt;Note: this mode is sometimes called "Indexed Register Indirect with Offset"&lt;/p&gt;
&lt;h2 id="absolute-data"&gt;Absolute Data&lt;a class="headerlink" href="#absolute-data" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These modes provide a version of the Address Register Indirect mode where the address is specified directly in the instruction and not through a register.&lt;/p&gt;
&lt;h3 id="absolute-short-data"&gt;Absolute Short Data&lt;a class="headerlink" href="#absolute-short-data" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;&amp;lt;address&amp;gt;.w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This mode specifies the address of the data in memory through a 16-bit direct operand specified in the extension word. The standard syntax is &lt;code&gt;&amp;lt;address&amp;gt;.w&lt;/code&gt;, while the EA mode and EA register fields are respectively &lt;code&gt;111&lt;/code&gt; and &lt;code&gt;000&lt;/code&gt;. Since the address is a signed word, only the first or the last 32KiB of memory can be addressed (respectively using positive and negative addresses).&lt;/p&gt;
&lt;h3 id="absolute-long-data"&gt;Absolute Long Data&lt;a class="headerlink" href="#absolute-long-data" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;&amp;lt;address&amp;gt;.l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;001&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the 32-bit version of the previous mode, with EA mode and EA register fields set respectively to &lt;code&gt;111&lt;/code&gt; and &lt;code&gt;001&lt;/code&gt;. The standard syntax is &lt;code&gt;&amp;lt;address&amp;gt;.l&lt;/code&gt;, and it requires two extension words. As always in the MC68000 long words are given in big endian order, that is the first word is the most significant part of the address and the second word is the least significant one.&lt;/p&gt;
&lt;p&gt;It is worth noting that this mode overcomes the limitation of the previous one, allowing you to access the full 16MiB address space. However, it requires more memory space, having two extension words, and 4 additional CPU cycles to be executed.&lt;/p&gt;
&lt;h2 id="program-counter-relative"&gt;Program Counter Relative&lt;a class="headerlink" href="#program-counter-relative" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The addressing modes relative to the Program Counter (PC) are the fundamental building block of relocatable programs, as the effective address is computed as a displacement from the address of the current instruction being executed. Strictly speaking the base address is that of the extension word, as will be shown in detail later in this article.&lt;/p&gt;
&lt;p&gt;Please note that effective addresses expressed with Program Counter Relative can only be used to read from memory.&lt;/p&gt;
&lt;h3 id="program-counter-relative-with-displacement"&gt;Program Counter Relative with Displacement&lt;a class="headerlink" href="#program-counter-relative-with-displacement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(d16,PC)&lt;/code&gt; or &lt;code&gt;d16(PC)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;010&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This mode is very similar to Address Register Indirect with Displacement, as both use a 16-bit offset added to a base address; in this case the latter is provided by the PC instead of an address register. The EA mode field is &lt;code&gt;111&lt;/code&gt; and the EA Register field is &lt;code&gt;010&lt;/code&gt;. One extension word is needed, to provide the signed 16-bits displacement, extended to 32-bit before any other calculation.&lt;/p&gt;
&lt;p&gt;Note: this mode is sometimes called "Program Counter Relative with Offset".&lt;/p&gt;
&lt;h3 id="program-counter-relative-with-index"&gt;Program Counter Relative with Index&lt;a class="headerlink" href="#program-counter-relative-with-index" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(d8,Dn,PC)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the Program Counter version of Address Register Indirect with Index. The EA mode field is &lt;code&gt;111&lt;/code&gt; and the EA Register field is &lt;code&gt;011&lt;/code&gt;. One extension word is needed, to provide the signed 8-bits displacement, which will be extended to 32 bit before using it.&lt;/p&gt;
&lt;p&gt;Note: this mode is sometimes called "Program Counter Relative with Index and Offset".&lt;/p&gt;
&lt;h2 id="immediate-data"&gt;Immediate Data&lt;a class="headerlink" href="#immediate-data" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;#&amp;lt;data&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 1,2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Immediate data uses the plain data written in the extension words instead of referring to the system memory. In this mode you can specify a constant of any length (byte, word, long word). The EA mode and EA register fields are respectively &lt;code&gt;111&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt;, and the number of extension words is either 1 (byte and word) or 2 (long word). Remember that the 68000 sign-extends data only when the destination is an address register, leaving it untouched when a data register is used. The standard syntax for this addressing mode is &lt;code&gt;#&amp;lt;data&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="quick-immediate"&gt;Quick Immediate&lt;a class="headerlink" href="#quick-immediate" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This addressing mode is available for a set of 3 instructions only, namely &lt;code&gt;addq&lt;/code&gt;, &lt;code&gt;subq&lt;/code&gt;, and &lt;code&gt;moveq&lt;/code&gt;. For the first two instructions, it allows to specify a value between 1 and 8 (3 bits), while the third one can interact with a full signed byte, managing a value between -128 and 127. The "quick" label comes from the fact that the instructions use bits of their own binary representation to store the data, thus requiring no extension words. As happens for the simple Immediate Data addressing, EA mode field is &lt;code&gt;111&lt;/code&gt; and EA Register field is &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="implied"&gt;Implied&lt;a class="headerlink" href="#implied" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is another mode that is available only for some instructions. Those are bound to specific registers, and are thus not really allowing any generic effective address to be used. The registers used in this addressing mode are only &lt;code&gt;SP&lt;/code&gt;, &lt;code&gt;PC&lt;/code&gt;, &lt;code&gt;SP&lt;/code&gt;, &lt;code&gt;SSP&lt;/code&gt;, &lt;code&gt;SR&lt;/code&gt;, and &lt;code&gt;USP&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="table-of-addressing-modes"&gt;Table of addressing modes&lt;a class="headerlink" href="#table-of-addressing-modes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The following table gives an overview of all the addressing modes. For each of them I show the name, the standard Assembly syntax, the value of the EA Mode field, the value of the EA Register field, and the number of extension word required.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;EA Mode&lt;/th&gt;
&lt;th&gt;EA Register&lt;/th&gt;
&lt;th&gt;Extension words&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data Register Direct&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Dn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Direct Mode&lt;/td&gt;
&lt;td&gt;&lt;code&gt;An&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;001&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(An)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;010&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect with Postincrement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(An)+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;011&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect with Predecrement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-(An)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect with Displacement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(d16,An)&lt;/code&gt; or &lt;code&gt;d16(An)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;101&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect with Index&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(d8,Dn,An)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;110&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Absolute Short Data&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;address&amp;gt;.w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Absolute Long Data&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;address&amp;gt;.l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;001&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program Counter Relative with Displacement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(d16,PC)&lt;/code&gt; / &lt;code&gt;d16(PC)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;010&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program Counter Relative with Index&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(d8,Dn,PC)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;011&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Immediate&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#&amp;lt;data&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1,2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="examples"&gt;Examples&lt;a class="headerlink" href="#examples" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Let's consider some example of actual MC68000 code that uses effective addressing modes.&lt;/p&gt;
&lt;h2 id="example-1"&gt;Example 1&lt;a class="headerlink" href="#example-1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;0280 0003 ffff          andi.l  #0x3ffff,d0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This instruction uses the the Data Register Direct mode to address register &lt;code&gt;d0&lt;/code&gt;. The instruction format of &lt;code&gt;andi&lt;/code&gt; is the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;| 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 00 |&lt;/span&gt;
&lt;span class="err"&gt;| 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | SIZE    | EFFECTIVE ADDRESS           |&lt;/span&gt;
&lt;span class="err"&gt;|                                       |         | MODE         | REGISTER     |&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which in the example shown above translates to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;00000010  10    000  000 0000000000000011 1111111111111111&lt;/span&gt;
&lt;span class="err"&gt;^         ^     ^    ^&lt;/span&gt;
&lt;span class="err"&gt;andi      long  Dn   d0  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the microprocessor expects the instruction to be followed by two extension words (long), that will contain the immediate data that will be added to the register. The register is selected among the data ones because the EA Mode field is &lt;code&gt;000&lt;/code&gt;, and the EA Register field selects register number 0. The two following extension words are &lt;code&gt;0003&lt;/code&gt; and &lt;code&gt;ffff&lt;/code&gt;, so the number &lt;code&gt;0x3ffff&lt;/code&gt; is added to the register.&lt;/p&gt;
&lt;h2 id="example-2"&gt;Example 2&lt;a class="headerlink" href="#example-2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;2052                    movea.l (a2),a0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;movea&lt;/code&gt; instruction moves data into an address register, but in this case uses the Address Register Indirect mode to specify the source. The instruction format is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;| 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 00 |&lt;/span&gt;
&lt;span class="err"&gt;| 0  | 0  | SIZE    | DEST. REG.   | 0  | 0  | 1  | SOURCE EFFECTIVE ADDRESS    |&lt;/span&gt;
&lt;span class="err"&gt;|         |         |              |              | MODE         | REGISTER     |&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so in this case the hexadecimal code &lt;code&gt;2052&lt;/code&gt; becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;00  10    000  001  010   010&lt;/span&gt;
&lt;span class="err"&gt;    ^     ^         ^     ^&lt;/span&gt;
&lt;span class="err"&gt;    long  a0        (An)  a2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="example-3"&gt;Example 3&lt;a class="headerlink" href="#example-3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;397c 0200 0100          move.w  #0x200,0x100(a4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;code&gt;move&lt;/code&gt; instruction puts a word with the value &lt;code&gt;0x200&lt;/code&gt; into an address which is &lt;code&gt;0x100&lt;/code&gt; above the address pointed by &lt;code&gt;a4&lt;/code&gt;. It uses Immediate Data for the source and Address Register Indirect with Displacement for the destination. The format of the &lt;code&gt;move&lt;/code&gt; instruction is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;| 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 00 |&lt;/span&gt;
&lt;span class="err"&gt;| 0  | 0  | SIZE    | DEST. EFFECTIVE ADDRESS     | SOURCE EFFECTIVE ADDRESS    |&lt;/span&gt;
&lt;span class="err"&gt;|         |         | REGISTER     | MODE         | MODE         | REGISTER     |&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(please note that register and mode are swapped in the destination part)&lt;/p&gt;
&lt;p&gt;In this case we have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;00    11    100  101       111100&lt;/span&gt;
&lt;span class="err"&gt;^     ^     ^    ^         ^    &lt;/span&gt;
&lt;span class="err"&gt;move  word  a4   (d16,An)  Immediate Data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is interesting to note that the word for the source is given with Immediate Data, and is indeed just after the instruction (&lt;code&gt;0x0200&lt;/code&gt;), followed by the 16-bit displacement for Address Register Indirect with Displacement (&lt;code&gt;0x0100&lt;/code&gt;).&lt;/p&gt;
&lt;h1 id="lea-load-effective-address"&gt;LEA: Load Effective Address&lt;a class="headerlink" href="#lea-load-effective-address" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Many newcomers to Assembly are confused by the need of the &lt;code&gt;lea&lt;/code&gt; instruction, so I want to briefly show why we need it, and dig into its low-level representation to clarify possible doubts.&lt;/p&gt;
&lt;p&gt;As we saw in the previous sections there are three ways to manage data in the M68000 Assembly language: the first is to mention a &lt;em&gt;pure number&lt;/em&gt;, the second is to use a &lt;em&gt;register&lt;/em&gt;, and the third is to use a &lt;em&gt;memory address&lt;/em&gt;. Registers can be considered memory, but since they are not proper arrays I will consider them something different.&lt;/p&gt;
&lt;p&gt;The Immediate Data addressing mode allows us to use pure data in an instruction. For example we may write &lt;code&gt;move.l  #0x20000,d0&lt;/code&gt;, which puts the number &lt;code&gt;0x20000&lt;/code&gt; into the first data register. So when we mention a pure number the microprocessor uses its binary representation directly.&lt;/p&gt;
&lt;p&gt;When we mention a register, the microprocessor does the only thing it can do with it, that is it reads its value or writes into it. The instruction mentioned previously, &lt;code&gt;move.l  #0x20000,d0&lt;/code&gt;, puts the number into the register &lt;code&gt;d0&lt;/code&gt;. An instruction like &lt;code&gt;cmp.l d2,d3&lt;/code&gt;, instead, reads the value of both registers and performs the comparison.&lt;/p&gt;
&lt;p&gt;Memory addresses are similar to registers, but they are identified by a number and not by a name (and are part of a contiguous array). Whenever an instruction mentions a memory address the microprocessor automatically tries to access that location, to read or to write. An instruction like &lt;code&gt;move.l 0x4,d3&lt;/code&gt; moves into &lt;code&gt;d3&lt;/code&gt; &lt;em&gt;the content&lt;/em&gt; of the address &lt;code&gt;0x4&lt;/code&gt;, and this happens just because &lt;code&gt;0x4&lt;/code&gt; is a memory address.&lt;/p&gt;
&lt;p&gt;That said, the problem we face is that often we want to compute a memory address and deal with &lt;em&gt;its value&lt;/em&gt; and not with its content. For example, if we write &lt;code&gt;move.w 0xe(a1),d0&lt;/code&gt;, the microprocessor computes &lt;code&gt;a1 + 0xe&lt;/code&gt;, that is, the content of &lt;code&gt;a1&lt;/code&gt; plus the number &lt;code&gt;0xe&lt;/code&gt;, and then fetches the content of that address in memory, putting it into &lt;code&gt;d0&lt;/code&gt;. How can we compute &lt;code&gt;a1 + 0xe&lt;/code&gt; and put that &lt;em&gt;result&lt;/em&gt; into &lt;code&gt;d0&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;lea&lt;/code&gt; comes into play. This instruction loads the effective address computed by the addressing mode that we are using into an address register. So &lt;code&gt;lea 0xe(a1),a2&lt;/code&gt; puts the sum between the content of &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;0xe&lt;/code&gt; into the register &lt;code&gt;a2&lt;/code&gt;. Familiarising with &lt;code&gt;lea&lt;/code&gt; is very important, as it is one of the most important instructions that the Motorola 68000 provides. A quick analysis of the Amiga Kickstart code shows that &lt;code&gt;lea&lt;/code&gt; is the 4th most used instruction, after &lt;code&gt;move&lt;/code&gt;, &lt;code&gt;jsr&lt;/code&gt;, and &lt;code&gt;bra&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="program-counter-relative-syntax-and-representation"&gt;Program Counter Relative syntax and representation&lt;a class="headerlink" href="#program-counter-relative-syntax-and-representation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As we discussed previously, the two Program Counter Relative modes just mirror Address Register Indirect with Displacement and Address Register Indirect with Index, binding them to the Program Counter instead of a generic register. It is worth however digging exactly into what the microprocessor is doing when decoding this addressing mode, and what the standard Assembly representation means.&lt;/p&gt;
&lt;p&gt;To describe the mechanism behind this modes let's consider an example of actual M68000 code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00000364&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;fa&lt;/span&gt; &lt;span class="n"&gt;ffa6&lt;/span&gt;         &lt;span class="n"&gt;lea&lt;/span&gt;     &lt;span class="mh"&gt;0x30c&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;code&gt;lea&lt;/code&gt; instruction stores the address &lt;code&gt;0x30c&lt;/code&gt; into &lt;code&gt;a0&lt;/code&gt;, but it's pretty evident that this address mode doesn't work like the traditional Address Register Indirect with Displacement. The instruction is at address &lt;code&gt;0x364&lt;/code&gt; and if we read the displacement as usual we would expect the effective address to be at &lt;code&gt;0x364 + 0x30c&lt;/code&gt;. It is important to understand that this is what the Assembler (or the disassembler) shows, and that the proper meaning of &lt;code&gt;0x30c(pc)&lt;/code&gt; is "the address &lt;code&gt;0x30c&lt;/code&gt; knowing that this instruction is at &lt;code&gt;0x364&lt;/code&gt;". I believe this clearly shows why relocatable code makes use of this addressing mode. The address that we identify with &lt;code&gt;0x364&lt;/code&gt; might actually be anywhere in memory, as this number means only &lt;code&gt;0x364&lt;/code&gt; words after the first instruction (which is at &lt;code&gt;0x0&lt;/code&gt; in our relative space).&lt;/p&gt;
&lt;p&gt;The binary representation of the instruction is actually revealing. The hexadecimal values of the two words &lt;code&gt;41fa ffa6&lt;/code&gt; become &lt;code&gt;01000001111110101111111110100110&lt;/code&gt; which can be split as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;0100  000  111  111010    1111111110100110&lt;/span&gt;
&lt;span class="err"&gt;^     ^         ^         ^&lt;/span&gt;
&lt;span class="err"&gt;lea   a0        (d16,PC)  extension word&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;According to the documentation of the addressing mode, the extension word &lt;code&gt;1111111110100110&lt;/code&gt; is a signed 16-bit displacement, so it is a number expressed in two's complement notation. The conversion gives &lt;code&gt;-0x5a&lt;/code&gt;, which added to the instruction relative address &lt;code&gt;0x364&lt;/code&gt; surprisingly gives &lt;code&gt;0x30a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The documentation of the addressing mode, however, states that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this mode, the operand is in memory. The address of the operand is the sum of the address in the program counter (PC) and the sign-extended 16-bit displacement integer in the extension word. The value in the PC is the address of the extension word.&lt;/p&gt;
&lt;p&gt;(2.2.11, page 13)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The thing that can be easily overlooked is that the PC points to the extension word and not to the instruction word. In this case, while the instruction word is at &lt;code&gt;0x364&lt;/code&gt;, the extension word is at &lt;code&gt;0x366&lt;/code&gt;, and &lt;code&gt;0x366 - 0x5a&lt;/code&gt; gives exactly &lt;code&gt;0x30c&lt;/code&gt;, which is what the Assembly syntax shows us. As you can see, the Assembler and the Disassembler have to perform some calculations to show the actual relative final value.&lt;/p&gt;
&lt;h1 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;PDF here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;M68000 Microprocessors User's Manual &lt;a href="https://www.nxp.com/docs/en/reference-manual/MC68000UM.pdf"&gt;PDF here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The 68000 Principles and Programming, Leo J. Scanion, 1981&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="updates"&gt;Updates&lt;a class="headerlink" href="#updates" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;2017-12-24: Reddit user &lt;a href="https://new.reddit.com/user/SpaceShrimp"&gt;SpaceShrimp&lt;/a&gt; pointed out the rage of a signed 16-bit number is &lt;code&gt;(-32768,32767)&lt;/code&gt; and not &lt;code&gt;(-32767,32768)&lt;/code&gt;. Thanks!&lt;/p&gt;
&lt;h1 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/thedigitalcatonline.github.com/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="M68000"></category></entry><entry><title>Exploring the Amiga - Part 8</title><link href="https://www.thedigitalcatonline.com/blog/2019/02/19/exploring-the-amiga-8/" rel="alternate"></link><published>2019-02-19T14:00:00+01:00</published><updated>2019-02-19T14:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-02-19:/blog/2019/02/19/exploring-the-amiga-8/</id><summary type="html">&lt;p&gt;Branching in the M68k Assembly, memory list management in Kickstart 1.3&lt;/p&gt;</summary><content type="html">&lt;h1 id="branching"&gt;Branching&lt;a class="headerlink" href="#branching" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As branching is one of the most important ways to control the program flow it is worth discussing how it works in the Motorola 68000 processor, and review what options we have.&lt;/p&gt;
&lt;p&gt;Contrary to what happens in higher level languages, in Assembly we do not have a way to represent logical expressions. In a language like C we can compare two integers with something like &lt;code&gt;a &amp;gt; b&lt;/code&gt; which tells us if the first number is greater than the second. But in Assembly there is no such syntax, so we have to rely on processor flags; these are bits that the processor sets according to the result of some operation, be it a direct comparison of two values or another instruction that manages integer numbers.&lt;/p&gt;
&lt;p&gt;The Motorola 68000 flags are kept in the 5 least significant bits of the Status Register (SR). The latter is not available during the normal operations in user mode, but these 5 bits, called Condition Code Register (CCR) are always accessible. The 5 bits are named &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt;. Of these, the ones we need to take into consideration for branching are the rightmost 4.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; (Negative) is set to the value of the most significant bit of the result of an instruction, to show that a negative number was produced.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Z&lt;/code&gt; (Zero) is set if the result is zero.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; (Overflow) is set when an arithmetic operation results in a number that cannot be represented with the size of the operand.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; (Carry) is set when an addition or a subtraction need to carry a bit (carry out or borrow).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To branch according to the value of these flags we can use the &lt;code&gt;Bcc&lt;/code&gt; family of instruction, where &lt;code&gt;cc&lt;/code&gt; is a two-letter mnemonic that represents the condition that is under test. For example the condition &lt;code&gt;MI&lt;/code&gt; stands for &lt;code&gt;MInus&lt;/code&gt; and tests if the &lt;code&gt;N&lt;/code&gt; flag is set. Thus, &lt;code&gt;bmi &amp;lt;address&amp;gt;&lt;/code&gt; will branch to &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; if the result of the previous instruction was negative, because that instruction set the &lt;code&gt;N&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;There are multiple families of instructions that use the CCR: &lt;code&gt;Bcc&lt;/code&gt;, &lt;code&gt;DBcc&lt;/code&gt;, &lt;code&gt;Scc&lt;/code&gt;, and &lt;code&gt;TRAPcc&lt;/code&gt;. The following table lists all the possible conditions we can test on the Motorola 68000 and their meaning&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Instruction&lt;/th&gt;
&lt;th&gt;Full name&lt;/th&gt;
&lt;th&gt;Tested condition&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CC&lt;/td&gt;
&lt;td&gt;Carry Clear&lt;/td&gt;
&lt;td&gt;C == 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CS&lt;/td&gt;
&lt;td&gt;Carry Set&lt;/td&gt;
&lt;td&gt;C == 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EQ&lt;/td&gt;
&lt;td&gt;EQual&lt;/td&gt;
&lt;td&gt;Z == 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;Always false&lt;/td&gt;
&lt;td&gt;Not available for Bcc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GE&lt;/td&gt;
&lt;td&gt;Greater or Equal&lt;/td&gt;
&lt;td&gt;N == V&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GT&lt;/td&gt;
&lt;td&gt;Greater Than&lt;/td&gt;
&lt;td&gt;N == V and Z == 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HI&lt;/td&gt;
&lt;td&gt;HIgher than&lt;/td&gt;
&lt;td&gt;C == 0 and Z == 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LE&lt;/td&gt;
&lt;td&gt;Less or Equal&lt;/td&gt;
&lt;td&gt;Z == 1 or N != V&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LS&lt;/td&gt;
&lt;td&gt;Lower or Same&lt;/td&gt;
&lt;td&gt;C == 1 or Z == 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LT&lt;/td&gt;
&lt;td&gt;Less Than&lt;/td&gt;
&lt;td&gt;N != V&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;MInus&lt;/td&gt;
&lt;td&gt;N == 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;Not Equal&lt;/td&gt;
&lt;td&gt;Z == 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PL&lt;/td&gt;
&lt;td&gt;PLus&lt;/td&gt;
&lt;td&gt;N == 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;Always true&lt;/td&gt;
&lt;td&gt;Not available for Bcc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VC&lt;/td&gt;
&lt;td&gt;V Clear&lt;/td&gt;
&lt;td&gt;V == 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VS&lt;/td&gt;
&lt;td&gt;V Set&lt;/td&gt;
&lt;td&gt;V == 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The reason why the &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; conditions are not available for &lt;code&gt;Bcc&lt;/code&gt; instructions is simple: &lt;code&gt;bt&lt;/code&gt; would mean "branch always", and the &lt;code&gt;bra&lt;/code&gt; instruction does exactly this, while &lt;code&gt;bf&lt;/code&gt; would mean "never branch" and it's arguably useless.&lt;/p&gt;
&lt;p&gt;Let's see an example of use with a standard comparison instruction: &lt;code&gt;cmp&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cmp.w   d0,d1&lt;/span&gt;
&lt;span class="err"&gt;beq.b   0x1522&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the processor compares &lt;code&gt;d0&lt;/code&gt; and &lt;code&gt;d1&lt;/code&gt; computing the subtraction &lt;code&gt;d1 - d0&lt;/code&gt; and setting the CCR flags according to the nature of the result. The processors manual (Programmer's Reference Manual, section 4-75, page 179) tells us that the flags are affected according to these rules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt; — Not affected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; — Set if the result is negative; cleared otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Z&lt;/code&gt; — Set if the result is zero; cleared otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; — Set if an overflow occurs; cleared otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; — Set if a borrow occurs; cleared otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;beq&lt;/code&gt; instruction on the second line checks only the &lt;code&gt;Z&lt;/code&gt; flag, however, so what we are checking here is if &lt;code&gt;d0&lt;/code&gt; and &lt;code&gt;d1&lt;/code&gt; have the same value.&lt;/p&gt;
&lt;p&gt;A less straightforward example involves &lt;code&gt;move&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;move.w  0x1c(a1),d0&lt;/span&gt;
&lt;span class="err"&gt;beq.b   0x151e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line moves the value at &lt;code&gt;a1 + 0x1c&lt;/code&gt; into &lt;code&gt;d0&lt;/code&gt;. The &lt;code&gt;move&lt;/code&gt; instruction page (Programmer's Reference Manual, section 4-116, page 220) says that it affects only the &lt;code&gt;N&lt;/code&gt; and &lt;code&gt;Z&lt;/code&gt; flags&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt; — Not affected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; — Set if the result is negative; cleared otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Z&lt;/code&gt; — Set if the result is zero; cleared otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; — Always cleared.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; — Always cleared.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here, the tested result is the value that has been moved. So, the next line branches only if the address &lt;code&gt;a1 + 0x1c&lt;/code&gt; (and later &lt;code&gt;d0&lt;/code&gt;) contains a zero.&lt;/p&gt;
&lt;p&gt;Pay attention that &lt;code&gt;GE&lt;/code&gt;, &lt;code&gt;GT&lt;/code&gt;, &lt;code&gt;LE&lt;/code&gt;, and &lt;code&gt;LT&lt;/code&gt; read &lt;code&gt;N&lt;/code&gt;, so they should be used only with signed integers Unsigned integers, instead, should be compared using &lt;code&gt;HI&lt;/code&gt; and &lt;code&gt;LS&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="enqueue"&gt;&lt;code&gt;Enqueue&lt;/code&gt;&lt;a class="headerlink" href="#enqueue" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In the previous article we discussed the structure of a memory node created by &lt;code&gt;AddMemList&lt;/code&gt; and I briefly mentioned &lt;code&gt;Enqueue&lt;/code&gt; and a protected version of it. &lt;code&gt;Enqueue&lt;/code&gt; is the function that Exec uses to add a node into a linked list, following a simple schema based on priorities, but it turns out &lt;code&gt;AddMemList&lt;/code&gt; does not use it directly, resorting to a version of it wrapped by two other functions, namely &lt;code&gt;Forbid&lt;/code&gt; and &lt;code&gt;Permit&lt;/code&gt; that are connected to task rescheduling. For the time being, however, we may forget the wrappers and jump directly to &lt;code&gt;Enqueue&lt;/code&gt; and learn how the Amiga operating system was managing linked lists.&lt;/p&gt;
&lt;p&gt;If the list we are managing is a singly linked list, where each node points to the successor only, we are forced to find the node &lt;em&gt;after which&lt;/em&gt; we want to insert the new one. This is mandatory, as we have to change its outgoing pointer, redirecting it to the new inserted node. In a doubly linked list such the ones used by the Amiga system this is not a problem, as from any point in the list we can start traversing it either forward or backward.&lt;/p&gt;
&lt;p&gt;The following drawing is a simple representation of what happens in the Kickstart code when the &lt;code&gt;Enqueue&lt;/code&gt; function is executed. &lt;code&gt;Ins&lt;/code&gt; is the node we want to insert, &lt;code&gt;Pred&lt;/code&gt; is the node after which we will insert &lt;code&gt;Ins&lt;/code&gt;, and &lt;code&gt;Next&lt;/code&gt; is the node before which we will insert &lt;code&gt;Ins&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                                  &lt;span class="n"&gt;TAILPRED&lt;/span&gt;  &lt;span class="n"&gt;TAIL&lt;/span&gt;
                                     &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
                                     &lt;span class="n"&gt;v&lt;/span&gt;       &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nl"&gt;BEFORE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;HEAD&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Pred&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;


                                         &lt;span class="n"&gt;TAILPRED&lt;/span&gt;  &lt;span class="n"&gt;TAIL&lt;/span&gt;
                                            &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
                                            &lt;span class="n"&gt;v&lt;/span&gt;       &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nl"&gt;AFTER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;HEAD&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Pred&lt;/span&gt;           &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;
                                  &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;^&lt;/span&gt;
                                  &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;
                                  &lt;span class="o"&gt;+-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Ins&lt;/span&gt; &lt;span class="o"&gt;--+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see there are several pointers that need to be changed. Both the &lt;code&gt;LN_SUCC&lt;/code&gt; of &lt;code&gt;Pred&lt;/code&gt; and &lt;code&gt;Ins&lt;/code&gt;, but also the &lt;code&gt;LN_PRED&lt;/code&gt; of &lt;code&gt;Next&lt;/code&gt; and &lt;code&gt;Ins&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Enqueue&lt;/code&gt; has a very simple prototype&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enqueue(list, node)
        aO    a1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;a0&lt;/code&gt; and &lt;code&gt;a1&lt;/code&gt; are pointers respectively to the list header and to the node we are going to insert. It is worth recalling how the list header status is at the time when the first insertion happens, that is when either the chip or expansion memory are added to the system memory pool, managed through &lt;code&gt;MemList&lt;/code&gt;. The latter is a list header &lt;code&gt;LH&lt;/code&gt; structure and the actual values are the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="mh"&gt;0xe&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x150&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0xd&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x14f&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_pad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0xa&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0xc&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x14e&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_TYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0x142&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x8&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x14a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_TAILPRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x4&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x146&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_TAIL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0x146&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x0&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x142&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_HEAD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this structure in mind, let's dive into the source code of &lt;code&gt;Enqueue&lt;/code&gt;. The function is defined at &lt;code&gt;0xfc1670&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001670&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1229&lt;/span&gt; &lt;span class="mi"&gt;0009&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001674&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;00001676&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2040&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;00001678&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;0000167&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6706&lt;/span&gt;                      &lt;span class="n"&gt;beq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="mh"&gt;0x1682&lt;/span&gt;
&lt;span class="mi"&gt;0000167&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b228&lt;/span&gt; &lt;span class="mi"&gt;0009&lt;/span&gt;                 &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001680&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;ff4&lt;/span&gt;                      &lt;span class="n"&gt;ble&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="mh"&gt;0x1676&lt;/span&gt;
&lt;span class="mi"&gt;00001682&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2028&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;00001686&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0000168&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2288&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0000168&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2340&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001690&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2040&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;00001692&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2089&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001694&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt;                      &lt;span class="n"&gt;rts&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it can be roughly divided into three sections, according to the internal jumps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;00001670&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1229&lt;/span&gt; &lt;span class="mi"&gt;0009&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001674&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;

&lt;span class="n"&gt;FindPos&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;00001676&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2040&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;00001678&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;0000167&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6706&lt;/span&gt;                      &lt;span class="n"&gt;beq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="n"&gt;InsertNode&lt;/span&gt;
&lt;span class="mi"&gt;0000167&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b228&lt;/span&gt; &lt;span class="mi"&gt;0009&lt;/span&gt;                 &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001680&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;ff4&lt;/span&gt;                      &lt;span class="n"&gt;ble&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="n"&gt;FindPos&lt;/span&gt;

&lt;span class="n"&gt;InsertNode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;00001682&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2028&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;00001686&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0000168&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2288&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0000168&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2340&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001690&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2040&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;00001692&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2089&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001694&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt;                      &lt;span class="n"&gt;rts&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first section, &lt;code&gt;Init&lt;/code&gt;, prepares the execution of the rest of the function. The rest bla&lt;/p&gt;
&lt;p&gt;As I did for other functions in the previous articles, I'm going to dissect this line by line. Let's start from the &lt;code&gt;Init&lt;/code&gt; part.&lt;/p&gt;
&lt;h2 id="init"&gt;Init&lt;a class="headerlink" href="#init" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;00001670&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1229&lt;/span&gt; &lt;span class="mi"&gt;0009&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001674&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since &lt;code&gt;a1&lt;/code&gt; points to the node to be inserted, &lt;code&gt;0x9(a1)&lt;/code&gt; is the &lt;code&gt;LN_PRI&lt;/code&gt; field of that node, that is the priority. The first line thus stores it in &lt;code&gt;d1&lt;/code&gt; because it will be used to search for the insertion point, as the list is maintained in priority order.&lt;/p&gt;
&lt;p&gt;The second line is the core or the node traversal algorithm. Since &lt;code&gt;a0&lt;/code&gt; points to a &lt;code&gt;LH&lt;/code&gt; structure, it is also the address of the first field &lt;code&gt;LH_HEAD&lt;/code&gt;. &lt;code&gt;(a0)&lt;/code&gt;, thus, is the dereferencing of that address, which means the address of the first node in the list. Given the figures I showed before for &lt;code&gt;MemList&lt;/code&gt;, &lt;code&gt;a0&lt;/code&gt; is &lt;code&gt;0x142&lt;/code&gt; so a &lt;code&gt;move a0,d0&lt;/code&gt; would store &lt;code&gt;0x142&lt;/code&gt; (the value of &lt;code&gt;a0&lt;/code&gt;) in &lt;code&gt;d0&lt;/code&gt;. &lt;code&gt;(a0)&lt;/code&gt;, instead, is the content of that address in memory, namely &lt;code&gt;0x146&lt;/code&gt;, so &lt;code&gt;move (a0),d0&lt;/code&gt; stores &lt;code&gt;0x146&lt;/code&gt; (the content of &lt;code&gt;0x142&lt;/code&gt;) in &lt;code&gt;d0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Putting aside the intricacies of the addressing modes, the second line stores the address of the first node in the list, which is the part of the header that starts with &lt;code&gt;LH_TAIL&lt;/code&gt;. The header thus acts as the first node of the list.&lt;/p&gt;
&lt;h2 id="findpos"&gt;FindPos&lt;a class="headerlink" href="#findpos" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FindPos&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;00001676&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2040&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;00001678&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;0000167&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6706&lt;/span&gt;                      &lt;span class="n"&gt;beq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="n"&gt;InsertNode&lt;/span&gt;
&lt;span class="mi"&gt;0000167&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b228&lt;/span&gt; &lt;span class="mi"&gt;0009&lt;/span&gt;                 &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001680&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;ff4&lt;/span&gt;                      &lt;span class="n"&gt;ble&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="n"&gt;FindPos&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first two lines repeat the same algorithm. The address of the current node (&lt;code&gt;d0&lt;/code&gt;) is moved to &lt;code&gt;a0&lt;/code&gt; and the dereferencing operation &lt;code&gt;(a0)&lt;/code&gt; puts in &lt;code&gt;d0&lt;/code&gt; the address of the following node. The reason why we do it in two lines is that the Address Register Indirect Mode can be used only with &lt;code&gt;An&lt;/code&gt; registers. At this point &lt;code&gt;d0&lt;/code&gt; contains the address of the second node, the successor of the header.&lt;/p&gt;
&lt;p&gt;If the list contains at least one node, &lt;code&gt;d0&lt;/code&gt; contains its address. But if the list is empty at this point &lt;code&gt;d0&lt;/code&gt; contains &lt;code&gt;0x0&lt;/code&gt;, and this is the condition tested by the &lt;code&gt;beq.b&lt;/code&gt; instruction. If &lt;code&gt;d0&lt;/code&gt; is empty we reached the end of the list, which means that there was no better place to insert the node, and we jump to the actual node insertion code, &lt;code&gt;InsertNode&lt;/code&gt;. If the value is not zero, the current node has a proper successor, so let's check it's priority to see if we need to go on or if we can stop here. The code compares the priorities of the current node and of the &lt;code&gt;Ins&lt;/code&gt; node, and if the latter is less than the former we can loop back to &lt;code&gt;FindPos&lt;/code&gt; and move to the next node. Remember that priorities are expressed with negative numbers only, so "less than" actually means "higher priority".&lt;/p&gt;
&lt;h2 id="insertnode"&gt;InsertNode&lt;a class="headerlink" href="#insertnode" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;InsertNode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;00001682&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2028&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;00001686&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0000168&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2288&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0000168&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2340&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001690&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2040&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;00001692&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2089&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001694&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt;                      &lt;span class="n"&gt;rts&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In either case, when we reach the tail or when the priority of the next node is lower than the one of the new node, we reach &lt;code&gt;InsertNode&lt;/code&gt;. At this point &lt;code&gt;a0&lt;/code&gt; points to &lt;code&gt;Next&lt;/code&gt; and we can access &lt;code&gt;Pred&lt;/code&gt; through &lt;code&gt;0x4(a0)&lt;/code&gt; (that is &lt;code&gt;LN_SUCC&lt;/code&gt; of &lt;code&gt;Next&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001682&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2028&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;00001686&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This first stores the aforementioned address of &lt;code&gt;Pred&lt;/code&gt; in &lt;code&gt;d0&lt;/code&gt;, then replaces it with the value of &lt;code&gt;a1&lt;/code&gt;. The result is that the predecessor of &lt;code&gt;Next&lt;/code&gt; becomes &lt;code&gt;Ins&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;0000168&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2288&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0000168&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2340&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This moves &lt;code&gt;a0&lt;/code&gt;, the address of &lt;code&gt;Next&lt;/code&gt;, into the first field of &lt;code&gt;Ins&lt;/code&gt;, that is &lt;code&gt;Next&lt;/code&gt; becomes the successor of &lt;code&gt;Ins&lt;/code&gt;. The second line moves &lt;code&gt;d0&lt;/code&gt; (the address of &lt;code&gt;Pred&lt;/code&gt;) into the &lt;code&gt;LN_PRED&lt;/code&gt; of &lt;code&gt;Ins&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001690&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2040&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;00001692&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2089&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001694&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt;                      &lt;span class="n"&gt;rts&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Last, the address of &lt;code&gt;Ins&lt;/code&gt; becomes the &lt;code&gt;LN_SUCC&lt;/code&gt; of &lt;code&gt;Pred&lt;/code&gt;, so we move &lt;code&gt;d0&lt;/code&gt; into &lt;code&gt;a0&lt;/code&gt; because, as I already mentioned, the Address Register Indirect Mode can be used only with &lt;code&gt;An&lt;/code&gt; registers. After this the function returns to the caller.&lt;/p&gt;
&lt;h1 id="remove"&gt;&lt;code&gt;Remove&lt;/code&gt;&lt;a class="headerlink" href="#remove" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Since we reviewed the code of &lt;code&gt;Enqueue&lt;/code&gt; it makes sense to have a look at the opposite function, &lt;code&gt;Remove&lt;/code&gt;. A protected version of this exists as well, but here I will just show the code of the pure function without the wrapper.&lt;/p&gt;
&lt;p&gt;Removing a node is simpler than adding it, as all we have to do is to make &lt;code&gt;Pred&lt;/code&gt; point to &lt;code&gt;Next&lt;/code&gt; and vice versa, so the function is much shorter. It's worth noting that while the function accepts the address of the node in &lt;code&gt;a1&lt;/code&gt; the value in this register is eventually overwritten, so the address has to be kept elsewhere when the function is called.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;0000163&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2051&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;0000163&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2269&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;
&lt;span class="mi"&gt;00001642&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2288&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001644&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001648&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first two lines store the address of &lt;code&gt;Next&lt;/code&gt; in &lt;code&gt;a0&lt;/code&gt; and of &lt;code&gt;Pred&lt;/code&gt; in &lt;code&gt;a1&lt;/code&gt; (overwriting the input value). The third line makes &lt;code&gt;Next&lt;/code&gt; the successor of &lt;code&gt;Pred&lt;/code&gt; and the fourth line makes &lt;code&gt;Pred&lt;/code&gt; the predecessor of &lt;code&gt;Next&lt;/code&gt;. Then the function returns to the caller.&lt;/p&gt;
&lt;h1 id="addlibrary"&gt;&lt;code&gt;AddLibrary&lt;/code&gt;&lt;a class="headerlink" href="#addlibrary" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In the &lt;a href="https://www.thedigitalcatonline.com/blog/2018/06/25/exploring-the-amiga-6/"&gt;6th post&lt;/a&gt; of this series we left Kickstart just after it finished adding the physical memory to the system pool. The last instruction we mentioned was a call to &lt;code&gt;AddLibrary&lt;/code&gt;, and this is then the next function I will explore.&lt;/p&gt;
&lt;p&gt;The code of the function is at &lt;code&gt;fc1448&lt;/code&gt;, and required some work before I was able to read it (see the section "Manual decompilation").&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001448&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;ee&lt;/span&gt; &lt;span class="mi"&gt;017&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;                 &lt;span class="n"&gt;lea&lt;/span&gt; &lt;span class="mh"&gt;0x17a&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a6&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;0000144&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt; &lt;span class="mi"&gt;0270&lt;/span&gt;                 &lt;span class="n"&gt;bsr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt; &lt;span class="mh"&gt;0x16be&lt;/span&gt;
&lt;span class="mi"&gt;00001450&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt; &lt;span class="mi"&gt;0082&lt;/span&gt;                 &lt;span class="n"&gt;bsr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt; &lt;span class="mh"&gt;0x14d4&lt;/span&gt;
&lt;span class="mi"&gt;00001454&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt;                      &lt;span class="n"&gt;rts&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line loads the absolute address of an object &lt;code&gt;0x17a&lt;/code&gt; bytes after the ExecBase address, and looking up this displacement in the library structure published in both the fifth and sixth instalment we find, rather unsurprisingly, that this is the address of &lt;code&gt;LibList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following lines call the protected version of &lt;code&gt;Enqueue&lt;/code&gt; and &lt;code&gt;SumLibrary&lt;/code&gt;, after which the routine returns to the caller. The call to &lt;code&gt;Enqueue&lt;/code&gt; follows what I explained at the beginning of this post, where this time &lt;code&gt;a0&lt;/code&gt; points to the library system list and &lt;code&gt;a1&lt;/code&gt; points to the base address of Exec, set just before the call to &lt;code&gt;AddLibrary&lt;/code&gt;. So the Exec library itself is added to the system libraries through this routine.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SumLibrary&lt;/code&gt;, as the name suggests, computes the checksum of a library, or checks the existing one.&lt;/p&gt;
&lt;h1 id="manual-decompilation"&gt;Manual decompilation&lt;a class="headerlink" href="#manual-decompilation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;When I was following the call to &lt;code&gt;AddLibrary&lt;/code&gt; from the main body of Kickstart I was surprised to find this code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001446&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;ee&lt;/span&gt;                 &lt;span class="n"&gt;ori&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0x12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;0000144&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;017&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt;                 &lt;span class="n"&gt;bchg&lt;/span&gt;    &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x754c&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0000144&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0270&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt; &lt;span class="mi"&gt;0082&lt;/span&gt;            &lt;span class="n"&gt;andi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;0x6100&lt;/span&gt;&lt;span class="o"&gt;,(-&lt;/span&gt;&lt;span class="mh"&gt;0x7e&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001454&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt;                      &lt;span class="n"&gt;rts&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which at first glance doesn't look like a basic function, as the instructions are too convoluted. Furthermore, the branch uses the address &lt;code&gt;0x1448&lt;/code&gt;, which is thus supposed to be the beginning of the function. A quick look at the hexadecimal values reveals the truth: at &lt;code&gt;0x1446&lt;/code&gt; Kickstart contains a padding word &lt;code&gt;0000&lt;/code&gt; that confused the decompiler. To see the code of the function I had to manually decompile the machine code, and since the process is very interesting I decided to show it in detail here.&lt;/p&gt;
&lt;p&gt;When you try to manually decompile some machine code you need a cheat sheet and the processor manual (see the resources section), which can help you to quickly track down the meaning of the single bits. The values we are interested in are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001448&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;ee&lt;/span&gt;
&lt;span class="mi"&gt;0000144&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;017&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="mi"&gt;0000144&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt;
&lt;span class="mi"&gt;0000144&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0270&lt;/span&gt;
&lt;span class="mi"&gt;00001450&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt;
&lt;span class="mi"&gt;00001452&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0082&lt;/span&gt;
&lt;span class="mi"&gt;00001454&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;since &lt;code&gt;fc1456&lt;/code&gt; is listed as the address of the &lt;code&gt;RemLibrary&lt;/code&gt; function. THe binary representation of these values is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001448&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0100&lt;/span&gt; &lt;span class="mi"&gt;0001&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt;
&lt;span class="mi"&gt;0000144&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0001&lt;/span&gt; &lt;span class="mi"&gt;0111&lt;/span&gt; &lt;span class="mi"&gt;1010&lt;/span&gt;
&lt;span class="mi"&gt;0000144&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0110&lt;/span&gt; &lt;span class="mi"&gt;0001&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;
&lt;span class="mi"&gt;0000144&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0010&lt;/span&gt; &lt;span class="mi"&gt;0111&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;
&lt;span class="mi"&gt;00001450&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0110&lt;/span&gt; &lt;span class="mi"&gt;0001&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;
&lt;span class="mi"&gt;00001452&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="mi"&gt;0010&lt;/span&gt;
&lt;span class="mi"&gt;00001454&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0100&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt; &lt;span class="mi"&gt;0111&lt;/span&gt; &lt;span class="mi"&gt;0101&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, the first 4 bits of any Motorola 68k instruction are the instruction code. While multiple instructions share the same 4 bits (for example &lt;code&gt;andi&lt;/code&gt; and &lt;code&gt;subi&lt;/code&gt;), those bits are never used for addressing or to specify modes, so they are a good starting point.&lt;/p&gt;
&lt;p&gt;The instruction at &lt;code&gt;0x1448&lt;/code&gt; starts with &lt;code&gt;0100&lt;/code&gt; followed by a &lt;code&gt;0&lt;/code&gt;, and this narrows the selection to either &lt;code&gt;lea&lt;/code&gt; or &lt;code&gt;chk&lt;/code&gt;. Both instructions use the following 3 bits to specify a register (&lt;code&gt;An&lt;/code&gt; for &lt;code&gt;lea&lt;/code&gt;, &lt;code&gt;Dn&lt;/code&gt; for &lt;code&gt;chk&lt;/code&gt;), but then the first has a fixed group &lt;code&gt;111&lt;/code&gt;, while the second has a group &lt;code&gt;110&lt;/code&gt;. This means that we are looking at a &lt;code&gt;lea&lt;/code&gt;. The three bits I mentioned are &lt;code&gt;000&lt;/code&gt;, which translates in &lt;code&gt;a0&lt;/code&gt; as a target. The last 6 bits are the addressing mode and the register, and the cheat sheet tells us that &lt;code&gt;101 110&lt;/code&gt; corresponds to Address Register Indirect with Displacement Mode on &lt;code&gt;a6&lt;/code&gt;. &lt;code&gt;101&lt;/code&gt; is labelled as &lt;code&gt;(d16, An)&lt;/code&gt;, while &lt;code&gt;110&lt;/code&gt; is the number 6. The following word is thus the &lt;code&gt;d16&lt;/code&gt; displacement from &lt;code&gt;a6&lt;/code&gt;, which means that &lt;code&gt;41ee 017a&lt;/code&gt; translates to &lt;code&gt;lea 0x17a(a6),a0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second instruction starts at &lt;code&gt;0x144c&lt;/code&gt; with &lt;code&gt;0110&lt;/code&gt;, which is the signature of all the branch commands: &lt;code&gt;bra&lt;/code&gt;, &lt;code&gt;bsr&lt;/code&gt;, and all the condition-based ones like &lt;code&gt;bgt&lt;/code&gt;, &lt;code&gt;blt&lt;/code&gt;, and so on. Since the following 4 bits are &lt;code&gt;0001&lt;/code&gt; we know this is a &lt;code&gt;bsr&lt;/code&gt;, branch to subroutine. Now, in this instruction the 8 least significant bits tell us what the displacement is, and thus the type of the operand (Programmer's Manual, section 4-59, page 163). In this case they are all &lt;code&gt;0&lt;/code&gt;, which means a word displacement, which is in the next 16 bits. Pay attention that, as we discussed for &lt;code&gt;lea&lt;/code&gt; in the &lt;a href="https://www.thedigitalcatonline.com/blog/2018/05/28/exploring-the-amiga-1/"&gt;first post&lt;/a&gt; the Program Counter contains the address of the first displacement word. In this case the displacement is &lt;code&gt;0x270&lt;/code&gt; at address &lt;code&gt;0x144e&lt;/code&gt;, so the branch address is the sum of the two, that is &lt;code&gt;0x16be&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The third instruction is again a &lt;code&gt;bsr&lt;/code&gt; and following the same process we find out that the branch address is the sum between &lt;code&gt;0x82&lt;/code&gt; and &lt;code&gt;0x1452&lt;/code&gt;, that is &lt;code&gt;0x14d4&lt;/code&gt;. The final instruction is an &lt;code&gt;rts&lt;/code&gt;, as we expected, and as the decompiler correctly told us.&lt;/p&gt;
&lt;p&gt;The most important thing to keep in mind when manually reading instructions is the position of the Program Counter. As we already saw two times, with &lt;code&gt;lea&lt;/code&gt; and with &lt;code&gt;bsr&lt;/code&gt;, the PC moves as soon as the 16-bit instruction has been read, which means that when a displacement is given we have to use the address of the displacement itself as a base for our calculations.&lt;/p&gt;
&lt;h1 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;PDF here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Motorola 68000 Opcodes Cheat Sheet http://goldencrystal.free.fr/M68kOpcodes-v2.3.pdf&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/thedigitalcatonline.github.com/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 7</title><link href="https://www.thedigitalcatonline.com/blog/2019/02/19/exploring-the-amiga-7/" rel="alternate"></link><published>2019-02-19T13:00:00+01:00</published><updated>2019-02-19T13:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-02-19:/blog/2019/02/19/exploring-the-amiga-7/</id><summary type="html">&lt;p&gt;The complete Exec vector table, list management in Kickstart 1.3&lt;/p&gt;</summary><content type="html">&lt;h1 id="the-complete-exec-vector-table"&gt;The complete Exec vector table&lt;a class="headerlink" href="#the-complete-exec-vector-table" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://www.thedigitalcatonline.com/blog/2018/06/08/exploring-the-amiga-3/"&gt;the 3rd post&lt;/a&gt; of this series I showed the Exec vectors table and the way &lt;code&gt;MakeFunctions&lt;/code&gt; creates the jump table when Exec is installed in memory. In that post I focused on the first 4 reserved vectors, but it is useful to have the full table while reading the Kickstart code. This is the full vectors table for Exec 34.2 (28 Oct 1987).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Relative offset&lt;/strong&gt; column contains the offset of the function in the jump table once the library has been installed, which allows any Amiga program to call Exec functions through the &lt;code&gt;offset(a6)&lt;/code&gt; syntax (e.g. &lt;code&gt;OpenLibrary&lt;/code&gt; can be called by &lt;code&gt;jsr -0x228(a6)&lt;/code&gt;). &lt;strong&gt;Vector position&lt;/strong&gt; is the offset of the vector in the Kickstart 1.3 ROM (i.e. &lt;code&gt;0x0001a7c&lt;/code&gt; is the position of the vector table itself), &lt;strong&gt;Relative address&lt;/strong&gt; is the hexadecimal value stored in the table before the relocation, &lt;strong&gt;Absolute address&lt;/strong&gt; is the function position after relocation (i.e. the wrapped sum between the table address and the relative address), and &lt;strong&gt;Function&lt;/strong&gt; is the function name according to the include files and the Amiga documentation.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Relative offset&lt;/th&gt;
&lt;th&gt;Vector position&lt;/th&gt;
&lt;th&gt;Relative address&lt;/th&gt;
&lt;th&gt;Absolute address&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-0x00&lt;/td&gt;
&lt;td&gt;00001a7c&lt;/td&gt;
&lt;td&gt;08a0&lt;/td&gt;
&lt;td&gt;0000231c&lt;/td&gt;
&lt;td&gt;Open()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x06&lt;/td&gt;
&lt;td&gt;00001a7e&lt;/td&gt;
&lt;td&gt;08a8&lt;/td&gt;
&lt;td&gt;00002324&lt;/td&gt;
&lt;td&gt;Close()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x12&lt;/td&gt;
&lt;td&gt;00001a80&lt;/td&gt;
&lt;td&gt;08ac&lt;/td&gt;
&lt;td&gt;00002328&lt;/td&gt;
&lt;td&gt;Expunge()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x18&lt;/td&gt;
&lt;td&gt;00001a82&lt;/td&gt;
&lt;td&gt;08ac&lt;/td&gt;
&lt;td&gt;00002328&lt;/td&gt;
&lt;td&gt;Reserved for future use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1e&lt;/td&gt;
&lt;td&gt;00001a84&lt;/td&gt;
&lt;td&gt;ee6a&lt;/td&gt;
&lt;td&gt;000008e6&lt;/td&gt;
&lt;td&gt;Supervisor()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x24&lt;/td&gt;
&lt;td&gt;00001a86&lt;/td&gt;
&lt;td&gt;f420&lt;/td&gt;
&lt;td&gt;00000e9c&lt;/td&gt;
&lt;td&gt;ExitIntr()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x2a&lt;/td&gt;
&lt;td&gt;00001a88&lt;/td&gt;
&lt;td&gt;f446&lt;/td&gt;
&lt;td&gt;00000ec2&lt;/td&gt;
&lt;td&gt;Schedule()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x30&lt;/td&gt;
&lt;td&gt;00001a8a&lt;/td&gt;
&lt;td&gt;04f8&lt;/td&gt;
&lt;td&gt;00001f74&lt;/td&gt;
&lt;td&gt;Reschedule()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x36&lt;/td&gt;
&lt;td&gt;00001a8c&lt;/td&gt;
&lt;td&gt;f4a0&lt;/td&gt;
&lt;td&gt;00000f1c&lt;/td&gt;
&lt;td&gt;Switch()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x3c&lt;/td&gt;
&lt;td&gt;00001a8e&lt;/td&gt;
&lt;td&gt;f4ea&lt;/td&gt;
&lt;td&gt;00000f66&lt;/td&gt;
&lt;td&gt;Dispatch()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x42&lt;/td&gt;
&lt;td&gt;00001a90&lt;/td&gt;
&lt;td&gt;f58e&lt;/td&gt;
&lt;td&gt;0000100a&lt;/td&gt;
&lt;td&gt;Exception()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x48&lt;/td&gt;
&lt;td&gt;00001a92&lt;/td&gt;
&lt;td&gt;f0b0&lt;/td&gt;
&lt;td&gt;00000b2c&lt;/td&gt;
&lt;td&gt;InitCode()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x4e&lt;/td&gt;
&lt;td&gt;00001a94&lt;/td&gt;
&lt;td&gt;f188&lt;/td&gt;
&lt;td&gt;00000c04&lt;/td&gt;
&lt;td&gt;InitStruct()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x54&lt;/td&gt;
&lt;td&gt;00001a96&lt;/td&gt;
&lt;td&gt;faac&lt;/td&gt;
&lt;td&gt;00001528&lt;/td&gt;
&lt;td&gt;MakeLibrary()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x5a&lt;/td&gt;
&lt;td&gt;00001a98&lt;/td&gt;
&lt;td&gt;fb36&lt;/td&gt;
&lt;td&gt;000015b2&lt;/td&gt;
&lt;td&gt;MakeFunctions()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x60&lt;/td&gt;
&lt;td&gt;00001a9a&lt;/td&gt;
&lt;td&gt;f080&lt;/td&gt;
&lt;td&gt;00000afc&lt;/td&gt;
&lt;td&gt;FindResident()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x66&lt;/td&gt;
&lt;td&gt;00001a9c&lt;/td&gt;
&lt;td&gt;f0e8&lt;/td&gt;
&lt;td&gt;00000b64&lt;/td&gt;
&lt;td&gt;InitResident()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x6c&lt;/td&gt;
&lt;td&gt;00001a9e&lt;/td&gt;
&lt;td&gt;1596&lt;/td&gt;
&lt;td&gt;00003012&lt;/td&gt;
&lt;td&gt;Alert()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x72&lt;/td&gt;
&lt;td&gt;00001aa0&lt;/td&gt;
&lt;td&gt;08ee&lt;/td&gt;
&lt;td&gt;0000236a&lt;/td&gt;
&lt;td&gt;Debug()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x78&lt;/td&gt;
&lt;td&gt;00001aa2&lt;/td&gt;
&lt;td&gt;f9ac&lt;/td&gt;
&lt;td&gt;00001428&lt;/td&gt;
&lt;td&gt;Disable()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x7e&lt;/td&gt;
&lt;td&gt;00001aa4&lt;/td&gt;
&lt;td&gt;f9ba&lt;/td&gt;
&lt;td&gt;00001436&lt;/td&gt;
&lt;td&gt;Enable()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x84&lt;/td&gt;
&lt;td&gt;00001aa6&lt;/td&gt;
&lt;td&gt;051a&lt;/td&gt;
&lt;td&gt;00001f96&lt;/td&gt;
&lt;td&gt;Forbid()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x8a&lt;/td&gt;
&lt;td&gt;00001aa8&lt;/td&gt;
&lt;td&gt;0520&lt;/td&gt;
&lt;td&gt;00001f9c&lt;/td&gt;
&lt;td&gt;Permit()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x90&lt;/td&gt;
&lt;td&gt;00001aaa&lt;/td&gt;
&lt;td&gt;f6e2&lt;/td&gt;
&lt;td&gt;0000115e&lt;/td&gt;
&lt;td&gt;SetSR()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x96&lt;/td&gt;
&lt;td&gt;00001aac&lt;/td&gt;
&lt;td&gt;f708&lt;/td&gt;
&lt;td&gt;00001184&lt;/td&gt;
&lt;td&gt;SuperState()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x9c&lt;/td&gt;
&lt;td&gt;00001aae&lt;/td&gt;
&lt;td&gt;f734&lt;/td&gt;
&lt;td&gt;000011b0&lt;/td&gt;
&lt;td&gt;UserState()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xa2&lt;/td&gt;
&lt;td&gt;00001ab0&lt;/td&gt;
&lt;td&gt;f74e&lt;/td&gt;
&lt;td&gt;000011ca&lt;/td&gt;
&lt;td&gt;SetIntVector()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xa8&lt;/td&gt;
&lt;td&gt;00001ab2&lt;/td&gt;
&lt;td&gt;f794&lt;/td&gt;
&lt;td&gt;00001210&lt;/td&gt;
&lt;td&gt;AddIntServer()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xae&lt;/td&gt;
&lt;td&gt;00001ab4&lt;/td&gt;
&lt;td&gt;f7d4&lt;/td&gt;
&lt;td&gt;00001250&lt;/td&gt;
&lt;td&gt;RemIntServer()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xb4&lt;/td&gt;
&lt;td&gt;00001ab6&lt;/td&gt;
&lt;td&gt;f8e0&lt;/td&gt;
&lt;td&gt;0000135c&lt;/td&gt;
&lt;td&gt;Cause()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xba&lt;/td&gt;
&lt;td&gt;00001ab8&lt;/td&gt;
&lt;td&gt;fc5c&lt;/td&gt;
&lt;td&gt;000016d8&lt;/td&gt;
&lt;td&gt;Allocate()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xc0&lt;/td&gt;
&lt;td&gt;00001ac0&lt;/td&gt;
&lt;td&gt;fcc4&lt;/td&gt;
&lt;td&gt;00001740&lt;/td&gt;
&lt;td&gt;Deallocate()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xc6&lt;/td&gt;
&lt;td&gt;00001abc&lt;/td&gt;
&lt;td&gt;fd54&lt;/td&gt;
&lt;td&gt;000017d0&lt;/td&gt;
&lt;td&gt;AllocMem()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xcc&lt;/td&gt;
&lt;td&gt;00001abe&lt;/td&gt;
&lt;td&gt;fe00&lt;/td&gt;
&lt;td&gt;0000187c&lt;/td&gt;
&lt;td&gt;AllocAbs()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xd2&lt;/td&gt;
&lt;td&gt;00001ac0&lt;/td&gt;
&lt;td&gt;fdb0&lt;/td&gt;
&lt;td&gt;0000182c&lt;/td&gt;
&lt;td&gt;FreeMem()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xd8&lt;/td&gt;
&lt;td&gt;00001ac2&lt;/td&gt;
&lt;td&gt;fe90&lt;/td&gt;
&lt;td&gt;0000190c&lt;/td&gt;
&lt;td&gt;AvailMem()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xde&lt;/td&gt;
&lt;td&gt;00001ac4&lt;/td&gt;
&lt;td&gt;fede&lt;/td&gt;
&lt;td&gt;0000195a&lt;/td&gt;
&lt;td&gt;AllocEntry()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xe4&lt;/td&gt;
&lt;td&gt;00001ac6&lt;/td&gt;
&lt;td&gt;ff6c&lt;/td&gt;
&lt;td&gt;000019e8&lt;/td&gt;
&lt;td&gt;FreeEntry()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xea&lt;/td&gt;
&lt;td&gt;00001ac8&lt;/td&gt;
&lt;td&gt;fb6c&lt;/td&gt;
&lt;td&gt;000015e8&lt;/td&gt;
&lt;td&gt;Insert()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xf0&lt;/td&gt;
&lt;td&gt;00001aca&lt;/td&gt;
&lt;td&gt;fb98&lt;/td&gt;
&lt;td&gt;00001614&lt;/td&gt;
&lt;td&gt;AddHead()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xf6&lt;/td&gt;
&lt;td&gt;00001acc&lt;/td&gt;
&lt;td&gt;fba8&lt;/td&gt;
&lt;td&gt;00001624&lt;/td&gt;
&lt;td&gt;AddTail()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0xfc&lt;/td&gt;
&lt;td&gt;00001ace&lt;/td&gt;
&lt;td&gt;fbc0&lt;/td&gt;
&lt;td&gt;0000163c&lt;/td&gt;
&lt;td&gt;Remove()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x102&lt;/td&gt;
&lt;td&gt;00001ad0&lt;/td&gt;
&lt;td&gt;fbce&lt;/td&gt;
&lt;td&gt;0000164a&lt;/td&gt;
&lt;td&gt;RemHead()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x108&lt;/td&gt;
&lt;td&gt;00001ad2&lt;/td&gt;
&lt;td&gt;fbde&lt;/td&gt;
&lt;td&gt;0000165a&lt;/td&gt;
&lt;td&gt;RemTail()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x10e&lt;/td&gt;
&lt;td&gt;00001ad4&lt;/td&gt;
&lt;td&gt;fbf4&lt;/td&gt;
&lt;td&gt;00001670&lt;/td&gt;
&lt;td&gt;Enqueue()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x114&lt;/td&gt;
&lt;td&gt;00001ad6&lt;/td&gt;
&lt;td&gt;fc1a&lt;/td&gt;
&lt;td&gt;00001696&lt;/td&gt;
&lt;td&gt;FindName()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x11a&lt;/td&gt;
&lt;td&gt;00001ad8&lt;/td&gt;
&lt;td&gt;0208&lt;/td&gt;
&lt;td&gt;00001c84&lt;/td&gt;
&lt;td&gt;AddTask()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x120&lt;/td&gt;
&lt;td&gt;00001ada&lt;/td&gt;
&lt;td&gt;02b4&lt;/td&gt;
&lt;td&gt;00001d30&lt;/td&gt;
&lt;td&gt;RemTask()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x126&lt;/td&gt;
&lt;td&gt;00001adc&lt;/td&gt;
&lt;td&gt;0334&lt;/td&gt;
&lt;td&gt;00001db0&lt;/td&gt;
&lt;td&gt;FindTask()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x12c&lt;/td&gt;
&lt;td&gt;00001ade&lt;/td&gt;
&lt;td&gt;0388&lt;/td&gt;
&lt;td&gt;00001e04&lt;/td&gt;
&lt;td&gt;SetTaskPri()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x132&lt;/td&gt;
&lt;td&gt;00001ae0&lt;/td&gt;
&lt;td&gt;03e2&lt;/td&gt;
&lt;td&gt;00001e5e&lt;/td&gt;
&lt;td&gt;SetSignal()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x138&lt;/td&gt;
&lt;td&gt;00001ae2&lt;/td&gt;
&lt;td&gt;03d8&lt;/td&gt;
&lt;td&gt;00001e54&lt;/td&gt;
&lt;td&gt;SetExcept()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x13e&lt;/td&gt;
&lt;td&gt;00001ae4&lt;/td&gt;
&lt;td&gt;0490&lt;/td&gt;
&lt;td&gt;00001f0c&lt;/td&gt;
&lt;td&gt;Wait()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x144&lt;/td&gt;
&lt;td&gt;00001ae6&lt;/td&gt;
&lt;td&gt;0408&lt;/td&gt;
&lt;td&gt;00001e84&lt;/td&gt;
&lt;td&gt;Signal()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x14a&lt;/td&gt;
&lt;td&gt;00001ae8&lt;/td&gt;
&lt;td&gt;0584&lt;/td&gt;
&lt;td&gt;00002000&lt;/td&gt;
&lt;td&gt;AllocSignal()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x150&lt;/td&gt;
&lt;td&gt;00001aea&lt;/td&gt;
&lt;td&gt;05bc&lt;/td&gt;
&lt;td&gt;00002038&lt;/td&gt;
&lt;td&gt;FreeSignal()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x156&lt;/td&gt;
&lt;td&gt;00001aec&lt;/td&gt;
&lt;td&gt;054e&lt;/td&gt;
&lt;td&gt;00001fca&lt;/td&gt;
&lt;td&gt;AllocTrap()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x15c&lt;/td&gt;
&lt;td&gt;00001aee&lt;/td&gt;
&lt;td&gt;0574&lt;/td&gt;
&lt;td&gt;00001ff0&lt;/td&gt;
&lt;td&gt;FreeTrap()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x162&lt;/td&gt;
&lt;td&gt;00001af0&lt;/td&gt;
&lt;td&gt;00d8&lt;/td&gt;
&lt;td&gt;00001b54&lt;/td&gt;
&lt;td&gt;AddPort()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x168&lt;/td&gt;
&lt;td&gt;00001af2&lt;/td&gt;
&lt;td&gt;00f0&lt;/td&gt;
&lt;td&gt;00001b6c&lt;/td&gt;
&lt;td&gt;RemPort()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x16e&lt;/td&gt;
&lt;td&gt;00001af4&lt;/td&gt;
&lt;td&gt;00f4&lt;/td&gt;
&lt;td&gt;00001b70&lt;/td&gt;
&lt;td&gt;PutMsg()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x174&lt;/td&gt;
&lt;td&gt;00001af6&lt;/td&gt;
&lt;td&gt;016e&lt;/td&gt;
&lt;td&gt;00001bea&lt;/td&gt;
&lt;td&gt;GetMsg()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x17a&lt;/td&gt;
&lt;td&gt;00001af8&lt;/td&gt;
&lt;td&gt;019c&lt;/td&gt;
&lt;td&gt;00001c18&lt;/td&gt;
&lt;td&gt;ReplyMsg()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x180&lt;/td&gt;
&lt;td&gt;00001afa&lt;/td&gt;
&lt;td&gt;01b6&lt;/td&gt;
&lt;td&gt;00001c32&lt;/td&gt;
&lt;td&gt;WaitPort()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x186&lt;/td&gt;
&lt;td&gt;00001afc&lt;/td&gt;
&lt;td&gt;01de&lt;/td&gt;
&lt;td&gt;00001c5a&lt;/td&gt;
&lt;td&gt;FindPort()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x18c&lt;/td&gt;
&lt;td&gt;00001afe&lt;/td&gt;
&lt;td&gt;f9cc&lt;/td&gt;
&lt;td&gt;00001448&lt;/td&gt;
&lt;td&gt;AddLibrary()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x192&lt;/td&gt;
&lt;td&gt;00001b00&lt;/td&gt;
&lt;td&gt;f9da&lt;/td&gt;
&lt;td&gt;00001456&lt;/td&gt;
&lt;td&gt;RemLibrary()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x198&lt;/td&gt;
&lt;td&gt;00001b02&lt;/td&gt;
&lt;td&gt;f9f0&lt;/td&gt;
&lt;td&gt;0000146c&lt;/td&gt;
&lt;td&gt;OldOpenLibrary()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x19e&lt;/td&gt;
&lt;td&gt;00001b04&lt;/td&gt;
&lt;td&gt;fa26&lt;/td&gt;
&lt;td&gt;000014a2&lt;/td&gt;
&lt;td&gt;CloseLibrary()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1a4&lt;/td&gt;
&lt;td&gt;00001b06&lt;/td&gt;
&lt;td&gt;fa3a&lt;/td&gt;
&lt;td&gt;000014b6&lt;/td&gt;
&lt;td&gt;SetFunction()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1aa&lt;/td&gt;
&lt;td&gt;00001b08&lt;/td&gt;
&lt;td&gt;fa58&lt;/td&gt;
&lt;td&gt;000014d4&lt;/td&gt;
&lt;td&gt;SumLibrary()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1b0&lt;/td&gt;
&lt;td&gt;00001b0a&lt;/td&gt;
&lt;td&gt;ec14&lt;/td&gt;
&lt;td&gt;00000690&lt;/td&gt;
&lt;td&gt;AddDevice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1b6&lt;/td&gt;
&lt;td&gt;00001b0c&lt;/td&gt;
&lt;td&gt;ec22&lt;/td&gt;
&lt;td&gt;0000069e&lt;/td&gt;
&lt;td&gt;RemDevice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1bc&lt;/td&gt;
&lt;td&gt;00001b0e&lt;/td&gt;
&lt;td&gt;ec26&lt;/td&gt;
&lt;td&gt;000006a2&lt;/td&gt;
&lt;td&gt;OpenDevice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1c2&lt;/td&gt;
&lt;td&gt;00001b10&lt;/td&gt;
&lt;td&gt;ec74&lt;/td&gt;
&lt;td&gt;000006f0&lt;/td&gt;
&lt;td&gt;CloseDevice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1c8&lt;/td&gt;
&lt;td&gt;00001b12&lt;/td&gt;
&lt;td&gt;ec9c&lt;/td&gt;
&lt;td&gt;00000718&lt;/td&gt;
&lt;td&gt;DoIO()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1ce&lt;/td&gt;
&lt;td&gt;00001b14&lt;/td&gt;
&lt;td&gt;ec8a&lt;/td&gt;
&lt;td&gt;00000706&lt;/td&gt;
&lt;td&gt;SendIO()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1d4&lt;/td&gt;
&lt;td&gt;00001b16&lt;/td&gt;
&lt;td&gt;ed0e&lt;/td&gt;
&lt;td&gt;0000078a&lt;/td&gt;
&lt;td&gt;CheckIO()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1da&lt;/td&gt;
&lt;td&gt;00001b18&lt;/td&gt;
&lt;td&gt;ecb2&lt;/td&gt;
&lt;td&gt;0000072e&lt;/td&gt;
&lt;td&gt;WaitIO()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1e0&lt;/td&gt;
&lt;td&gt;00001b1a&lt;/td&gt;
&lt;td&gt;ed2a&lt;/td&gt;
&lt;td&gt;000007a6&lt;/td&gt;
&lt;td&gt;AbortIO()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1e6&lt;/td&gt;
&lt;td&gt;00001b1c&lt;/td&gt;
&lt;td&gt;01e8&lt;/td&gt;
&lt;td&gt;00001c64&lt;/td&gt;
&lt;td&gt;AddResource()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1ec&lt;/td&gt;
&lt;td&gt;00001b1e&lt;/td&gt;
&lt;td&gt;01f0&lt;/td&gt;
&lt;td&gt;00001c6c&lt;/td&gt;
&lt;td&gt;RemResource()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1f2&lt;/td&gt;
&lt;td&gt;00001b20&lt;/td&gt;
&lt;td&gt;01f4&lt;/td&gt;
&lt;td&gt;00001c70&lt;/td&gt;
&lt;td&gt;OpenResource()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1f8&lt;/td&gt;
&lt;td&gt;00001b22&lt;/td&gt;
&lt;td&gt;07b8&lt;/td&gt;
&lt;td&gt;00002234&lt;/td&gt;
&lt;td&gt;execPrivate7()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x1fe&lt;/td&gt;
&lt;td&gt;00001b24&lt;/td&gt;
&lt;td&gt;07c2&lt;/td&gt;
&lt;td&gt;0000223e&lt;/td&gt;
&lt;td&gt;execPrivate8()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x204&lt;/td&gt;
&lt;td&gt;00001b26&lt;/td&gt;
&lt;td&gt;07ee&lt;/td&gt;
&lt;td&gt;0000226a&lt;/td&gt;
&lt;td&gt;execPrivate9()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x20a&lt;/td&gt;
&lt;td&gt;00001b28&lt;/td&gt;
&lt;td&gt;06a8&lt;/td&gt;
&lt;td&gt;00002124&lt;/td&gt;
&lt;td&gt;RawDoFmt()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x210&lt;/td&gt;
&lt;td&gt;00001b2a&lt;/td&gt;
&lt;td&gt;f700&lt;/td&gt;
&lt;td&gt;0000117c&lt;/td&gt;
&lt;td&gt;GetCC()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x216&lt;/td&gt;
&lt;td&gt;00001b2c&lt;/td&gt;
&lt;td&gt;fdda&lt;/td&gt;
&lt;td&gt;00001856&lt;/td&gt;
&lt;td&gt;TypeOfMem()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x21c&lt;/td&gt;
&lt;td&gt;00001b2e&lt;/td&gt;
&lt;td&gt;131c&lt;/td&gt;
&lt;td&gt;00002d98&lt;/td&gt;
&lt;td&gt;Procure()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x222&lt;/td&gt;
&lt;td&gt;00001b30&lt;/td&gt;
&lt;td&gt;1332&lt;/td&gt;
&lt;td&gt;00002dae&lt;/td&gt;
&lt;td&gt;Vacate()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x228&lt;/td&gt;
&lt;td&gt;00001b32&lt;/td&gt;
&lt;td&gt;f9f8&lt;/td&gt;
&lt;td&gt;00001474&lt;/td&gt;
&lt;td&gt;OpenLibrary()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x22e&lt;/td&gt;
&lt;td&gt;00001b34&lt;/td&gt;
&lt;td&gt;1354&lt;/td&gt;
&lt;td&gt;00002dd0&lt;/td&gt;
&lt;td&gt;InitSemaphore()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x234&lt;/td&gt;
&lt;td&gt;00001b36&lt;/td&gt;
&lt;td&gt;1374&lt;/td&gt;
&lt;td&gt;00002df0&lt;/td&gt;
&lt;td&gt;ObtainSemaphore()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x23a&lt;/td&gt;
&lt;td&gt;00001b38&lt;/td&gt;
&lt;td&gt;13c4&lt;/td&gt;
&lt;td&gt;00002e40&lt;/td&gt;
&lt;td&gt;ReleaseSemaphore()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x240&lt;/td&gt;
&lt;td&gt;00001b3a&lt;/td&gt;
&lt;td&gt;1428&lt;/td&gt;
&lt;td&gt;00002ea4&lt;/td&gt;
&lt;td&gt;AttemptSemaphore()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x246&lt;/td&gt;
&lt;td&gt;00001b3c&lt;/td&gt;
&lt;td&gt;1458&lt;/td&gt;
&lt;td&gt;00002ed4&lt;/td&gt;
&lt;td&gt;ObtainSemaphoreList()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x24c&lt;/td&gt;
&lt;td&gt;00001b3e&lt;/td&gt;
&lt;td&gt;14ce&lt;/td&gt;
&lt;td&gt;00002f4a&lt;/td&gt;
&lt;td&gt;ReleaseSemaphoreList()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x252&lt;/td&gt;
&lt;td&gt;00001b40&lt;/td&gt;
&lt;td&gt;14f4&lt;/td&gt;
&lt;td&gt;00002f70&lt;/td&gt;
&lt;td&gt;FindSemaphore()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x258&lt;/td&gt;
&lt;td&gt;00001b42&lt;/td&gt;
&lt;td&gt;14e4&lt;/td&gt;
&lt;td&gt;00002f60&lt;/td&gt;
&lt;td&gt;AddSemaphore()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x25e&lt;/td&gt;
&lt;td&gt;00001b44&lt;/td&gt;
&lt;td&gt;14f0&lt;/td&gt;
&lt;td&gt;00002f6c&lt;/td&gt;
&lt;td&gt;RemSemaphore()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x264&lt;/td&gt;
&lt;td&gt;00001b46&lt;/td&gt;
&lt;td&gt;effc&lt;/td&gt;
&lt;td&gt;00000a78&lt;/td&gt;
&lt;td&gt;SumKickData()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x26a&lt;/td&gt;
&lt;td&gt;00001b48&lt;/td&gt;
&lt;td&gt;ffaa&lt;/td&gt;
&lt;td&gt;00001a26&lt;/td&gt;
&lt;td&gt;AddMemList()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x270&lt;/td&gt;
&lt;td&gt;00001b4a&lt;/td&gt;
&lt;td&gt;1504&lt;/td&gt;
&lt;td&gt;00002f80&lt;/td&gt;
&lt;td&gt;CopyMem()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0x276&lt;/td&gt;
&lt;td&gt;00001b4c&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;00002f7c&lt;/td&gt;
&lt;td&gt;CopyMemQuick()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="the-memory-list-header"&gt;The memory list header&lt;a class="headerlink" href="#the-memory-list-header" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Before we dig into the code of the &lt;code&gt;AddMemList&lt;/code&gt; function to see how the memory space is added to the free memory list, let's have a look at the status of the memory list itself, as we need to be familiar with its structure to understand the rest of the process.&lt;/p&gt;
&lt;p&gt;You might recall from the &lt;a href="https://www.thedigitalcatonline.com/blog/2018/06/25/exploring-the-amiga-5/"&gt;fifth article&lt;/a&gt; that the &lt;code&gt;MemList&lt;/code&gt; structure is created &lt;code&gt;0x142&lt;/code&gt; bytes after ExecBase, and that the structure is the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="mh"&gt;0xe&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x150&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0xd&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x14f&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_pad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0xa&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0xc&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x14e&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_TYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0x142&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x8&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x14a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_TAILPRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x4&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x146&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_TAIL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0x146&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x0&lt;/span&gt; &lt;span class="o"&gt;+-------+&lt;/span&gt; &lt;span class="mh"&gt;0x142&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LH_HEAD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means that we can access the memory list with &lt;code&gt;lea 0x142(a6),a0&lt;/code&gt;, as &lt;code&gt;0x142&lt;/code&gt; is the relative address, i.e. assuming ExecBase is 0. Once the absolute address is in one of the address registers we can access the first node through &lt;code&gt;(a0)&lt;/code&gt;, which is the Motorola Assembly version of the C pointer dereference operation (Address Register Indirect Mode). With &lt;code&gt;(a0)&lt;/code&gt; we do not use the content of &lt;code&gt;a0&lt;/code&gt;, but the content of the memory location which address is contained in &lt;code&gt;a0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So if &lt;code&gt;a0&lt;/code&gt; is &lt;code&gt;0x142&lt;/code&gt; in the previous figure, &lt;code&gt;(a0)&lt;/code&gt; is &lt;code&gt;0x0&lt;/code&gt; (&lt;code&gt;0x142&lt;/code&gt; contains &lt;code&gt;0x146&lt;/code&gt;, &lt;code&gt;0x146&lt;/code&gt; contains &lt;code&gt;0x0&lt;/code&gt;). It's thus convenient to think of &lt;code&gt;a0&lt;/code&gt; as the pointer, and of &lt;code&gt;(a0)&lt;/code&gt; as the value.&lt;/p&gt;
&lt;p&gt;It is also interesting to note that the structure at &lt;code&gt;0x146&lt;/code&gt; is very similar to the &lt;code&gt;LN&lt;/code&gt; structure. Recall that the latter is defined in &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt; as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt; STRUCTURE    LN,0    ; List Node&lt;/span&gt;
&lt;span class="err"&gt;    APTR    LN_SUCC ; Pointer to next (successor)&lt;/span&gt;
&lt;span class="err"&gt;    APTR    LN_PRED ; Pointer to previous (predecessor)&lt;/span&gt;
&lt;span class="err"&gt;    UBYTE   LN_TYPE&lt;/span&gt;
&lt;span class="err"&gt;    BYTE    LN_PRI  ; Priority, for sorting&lt;/span&gt;
&lt;span class="err"&gt;    APTR    LN_NAME ; ID string, null terminated&lt;/span&gt;
&lt;span class="err"&gt;    LABEL   LN_SIZE ; Note: word aligned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and as you can see &lt;code&gt;LH_TAIL&lt;/code&gt;, &lt;code&gt;LH_TAILPRED&lt;/code&gt;, and &lt;code&gt;LH_TYPE&lt;/code&gt; can act as a proper node of a linked list. This is done on purpose (obviously), as the tail of the list has to be processed by the code that manages linked lists.&lt;/p&gt;
&lt;h1 id="adding-free-memory-to-the-system-list"&gt;Adding free memory to the system list&lt;a class="headerlink" href="#adding-free-memory-to-the-system-list" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;At the end of the &lt;a href="https://www.thedigitalcatonline.com/blog/2018/06/25/exploring-the-amiga-6/"&gt;previous post&lt;/a&gt; we left Exec just after its code prepared the parameters of the free memory that was available on the system. As we saw in that post, this operation is always executed for the chip memory, and optionally for the fast memory if the hardware expansion is installed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;AddMemList&lt;/code&gt; function at &lt;code&gt;0x1a26&lt;/code&gt; is called with the following prototype&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;size = AddMemList(size, attributes, pri, base, name)&lt;/span&gt;
&lt;span class="err"&gt;D0                D0    D1          D2   A0    A1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with the purpose of adding the given memory &lt;code&gt;size&lt;/code&gt;, starting from the &lt;code&gt;base&lt;/code&gt; address, to the system pool. The memory &lt;code&gt;attributes&lt;/code&gt; will be store in the memory block and the priority (&lt;code&gt;pri&lt;/code&gt;) will be used to find the insertion point. The name is also added to the memory node to identify it.&lt;/p&gt;
&lt;p&gt;We can split the memory addition in two different parts. &lt;code&gt;AddMemList&lt;/code&gt; will create a node that contain the parameters of the memory region, then will call &lt;code&gt;Enqueue&lt;/code&gt; to add it to the &lt;code&gt;MemList&lt;/code&gt; linked list. When Exec bootstraps the system the memory list is empty, but these functions must work in a generic case. Actually when the system has a memory expansion (fast memory), this is the first that is added to the list, but it's immediately followed by the chip memory.&lt;/p&gt;
&lt;p&gt;To help you to follow what happens in the function, this is a depiction of the memory area that we want to add to the system pool at the end of &lt;code&gt;AddMemList&lt;/code&gt;, just before the call to &lt;code&gt;Enqueue&lt;/code&gt;. The area contains a header made of three structures, &lt;code&gt;LN&lt;/code&gt; (linked list node), &lt;code&gt;MH&lt;/code&gt; (memory header), and &lt;code&gt;MC&lt;/code&gt; (memory chunk)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;SIZE&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Free&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;+---------------+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;+---------------+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Free&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
   &lt;span class="mh"&gt;0x2c&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MC_SIZE&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
   &lt;span class="mh"&gt;0x28&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MC_BYTES&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MC&lt;/span&gt;
   &lt;span class="mh"&gt;0x24&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MC_NEXT&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
   &lt;span class="mh"&gt;0x20&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MH_FREE&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
   &lt;span class="mh"&gt;0x1c&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MH_UPPER&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
   &lt;span class="mh"&gt;0x18&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MH_LOWER&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MH&lt;/span&gt;
   &lt;span class="mh"&gt;0x14&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MH_FIRST&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
   &lt;span class="mh"&gt;0x10&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MH_ATTRIBUTES&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0xe&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;LN_NAME&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0xa&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;LN_PRI&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x9&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;LN_TYPE&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;LN&lt;/span&gt;
    &lt;span class="mh"&gt;0x8&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;LN_PRED&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x4&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;LN_SUCC&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x0&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is interesting to note that, since we are managing the system memory, we cannot store information about it other than in the memory itself. The presence of management structures, then, is reducing the amount of free memory. This has to taken into account when designing a memory management system, but will not be considered in this article.&lt;/p&gt;
&lt;p&gt;When we create the structure shown in figure, we need to ensure that the actual free memory is a multiple of a long word (8 bytes), as this is generally desirable. The memory space we are dealing with starts from 0 in the picture, but can actually be anywhere in the system memory, so it is not guaranteed that either the beginning or the end of the free memory space are aligned with long words.&lt;/p&gt;
&lt;p&gt;The code of &lt;code&gt;AddMemList&lt;/code&gt; performs the alignment in two steps. First it aligns the address of &lt;code&gt;MC&lt;/code&gt; to the upper nearest long word (multiple of 8), then aligns the total size to the lower nearest long word. For example, if the starting point was 0 and the total size 64 bytes, we would leave all the values untouched:&lt;code&gt;LN_SUCC&lt;/code&gt; at &lt;code&gt;0x0&lt;/code&gt;, &lt;code&gt;MC_NEXT&lt;/code&gt; at &lt;code&gt;0x20&lt;/code&gt;, and the total size of the chunk (structure 'MC' + free memory) would be 32 bytes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="mh"&gt;0x40&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Free&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MC&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
   &lt;span class="mh"&gt;0x20&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MH&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;LN&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x0&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the starting point was 1 and the total size 65 bytes, however, the result would be: &lt;code&gt;LN_SUCC&lt;/code&gt; at &lt;code&gt;0x1&lt;/code&gt;, &lt;code&gt;MC_NEXT&lt;/code&gt; at &lt;code&gt;0x28&lt;/code&gt; (upper long word), and the total size of the memory would be 56 bytes (65-7 gives 58, rounded down to a multiple of 8), which means a chunk of 24 bytes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="mh"&gt;0x42&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Ignored&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
   &lt;span class="mh"&gt;0x40&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Free&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MC&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
   &lt;span class="mh"&gt;0x28&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;EMPTY&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
   &lt;span class="mh"&gt;0x21&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MH&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;+---------------+&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;LN&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mh"&gt;0x1&lt;/span&gt; &lt;span class="o"&gt;+---------------+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="addmemlist-internals"&gt;&lt;code&gt;AddMemList&lt;/code&gt; internals&lt;a class="headerlink" href="#addmemlist-internals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;According to the Exec vectors table, &lt;code&gt;AddMemList&lt;/code&gt; can be found at &lt;code&gt;00001a26&lt;/code&gt;, and ends at &lt;code&gt;00001a78&lt;/code&gt;. It is immediately followed by a padding word &lt;code&gt;0000&lt;/code&gt; and the vectors table itself&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a26&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a2a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="n"&gt;e8&lt;/span&gt; &lt;span class="mi"&gt;0020&lt;/span&gt;                 &lt;span class="n"&gt;lea&lt;/span&gt;     &lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a2e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;0008&lt;/span&gt;            &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;0xa&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a34&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1142&lt;/span&gt; &lt;span class="mi"&gt;0009&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a38&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3141&lt;/span&gt; &lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt;  &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a3c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2209&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a3e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;e81&lt;/span&gt;                      &lt;span class="n"&gt;addq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;0x7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a40&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0201&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;f8&lt;/span&gt;                 &lt;span class="n"&gt;andi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a44&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c389&lt;/span&gt;                      &lt;span class="n"&gt;exg&lt;/span&gt;     &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a46&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9289&lt;/span&gt;                      &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;   &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a48&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d081&lt;/span&gt;                      &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;   &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a4a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0200&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;f8&lt;/span&gt;                 &lt;span class="n"&gt;andi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a4e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0480&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0020&lt;/span&gt;            &lt;span class="n"&gt;subi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;0010&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x10&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a58&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;0014&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x14&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a5c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2209&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a5e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d280&lt;/span&gt;                      &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;   &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a60&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2141&lt;/span&gt; &lt;span class="mi"&gt;0018&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x18&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a64&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2140&lt;/span&gt; &lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x1c&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a68&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2340&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a6c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4291&lt;/span&gt;                      &lt;span class="n"&gt;clr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;   &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a6e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2248&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a70&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;ee&lt;/span&gt; &lt;span class="mi"&gt;0142&lt;/span&gt;                 &lt;span class="n"&gt;lea&lt;/span&gt;     &lt;span class="mh"&gt;0x142&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a6&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a74&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt; &lt;span class="n"&gt;fc48&lt;/span&gt;                 &lt;span class="n"&gt;bsr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt;   &lt;span class="mh"&gt;0x16be&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a78&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt;                      &lt;span class="n"&gt;rts&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's comment the function line by line. I will refer to the fields shown in the picture above by name, mentioning the offsets for clarity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a26&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code stores the address of the memory area name in &lt;code&gt;LN_NAME&lt;/code&gt; (&lt;code&gt;0xa(a0)&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a2a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="n"&gt;e8&lt;/span&gt; &lt;span class="mi"&gt;0020&lt;/span&gt;                 &lt;span class="n"&gt;lea&lt;/span&gt;     &lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This loads the absolute address of the memory chunk (structure &lt;code&gt;MC&lt;/code&gt;). The purpose of this is to align the memory chunk to a long word later in the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a2e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;0008&lt;/span&gt;            &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;0xa&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a34&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1142&lt;/span&gt; &lt;span class="mi"&gt;0009&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a38&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3141&lt;/span&gt; &lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt;  &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This stores &lt;code&gt;0xa&lt;/code&gt; in the &lt;code&gt;LN_TYPE&lt;/code&gt; field (&lt;code&gt;0x8(a0)&lt;/code&gt;). This corresponds to &lt;code&gt;NT_MEMORY&lt;/code&gt; (see &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt;). It then copies the list priority into the &lt;code&gt;LN_PRI&lt;/code&gt; field (&lt;code&gt;0x9(a0)&lt;/code&gt;), and the memory attributes in the &lt;code&gt;MH_ATTRIBUTES&lt;/code&gt; field (&lt;code&gt;0xe(a0)&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a3c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2209&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a3e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;e81&lt;/span&gt;                      &lt;span class="n"&gt;addq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;0x7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a40&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0201&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;f8&lt;/span&gt;                 &lt;span class="n"&gt;andi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a4e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0480&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0020&lt;/span&gt;            &lt;span class="n"&gt;subi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These three lines of code align the address of &lt;code&gt;MC&lt;/code&gt; (&lt;code&gt;a1&lt;/code&gt;) to a long word, adding 7 and removing the least significant 3 bits. Then the size of the headers (&lt;code&gt;0x20&lt;/code&gt;) is removed from the total size of the memory region that was passed as an argument.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;0010&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x10&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a58&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2149&lt;/span&gt; &lt;span class="mi"&gt;0014&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x14&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Store the first free memory location (&lt;code&gt;a1&lt;/code&gt;) in &lt;code&gt;MH_FIRST&lt;/code&gt; (&lt;code&gt;0x10(a0)&lt;/code&gt;) and in &lt;code&gt;MH_LOWER&lt;/code&gt; (&lt;code&gt;0x14(a0)&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a5c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2209&lt;/span&gt;                      &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a5e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d280&lt;/span&gt;                      &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;   &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a60&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2141&lt;/span&gt; &lt;span class="mi"&gt;0018&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x18&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a64&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2140&lt;/span&gt; &lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x1c&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The size of the free memory is then added to the first free address and stored in &lt;code&gt;MH_UPPER&lt;/code&gt; (&lt;code&gt;0x18(a0)&lt;/code&gt;). The size of the free memory is stored in &lt;code&gt;MH_FREE&lt;/code&gt; (&lt;code&gt;0x1c(a0)&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a68&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2340&lt;/span&gt; &lt;span class="mi"&gt;0004&lt;/span&gt;                 &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;  &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a6c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4291&lt;/span&gt;                      &lt;span class="n"&gt;clr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;   &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code creates the memory chunk in the free memory area. The size of the chunk is stored in the &lt;code&gt;MC_BYTES&lt;/code&gt; field (&lt;code&gt;0x4(a1)&lt;/code&gt;), and the &lt;code&gt;MC_NEXT&lt;/code&gt; field is cleared.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a6e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2248&lt;/span&gt;                      &lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a70&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;ee&lt;/span&gt; &lt;span class="mi"&gt;0142&lt;/span&gt;                 &lt;span class="n"&gt;lea&lt;/span&gt;     &lt;span class="mh"&gt;0x142&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a6&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a74&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt; &lt;span class="n"&gt;fc48&lt;/span&gt;                 &lt;span class="n"&gt;bsr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt;   &lt;span class="mh"&gt;0x16be&lt;/span&gt;
&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;a78&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt;                      &lt;span class="n"&gt;rts&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The rest of the code prepares the call to the protected version of &lt;code&gt;Enqueue&lt;/code&gt;, copying the address of the node in &lt;code&gt;a1&lt;/code&gt; , the absolute address of &lt;code&gt;MemList&lt;/code&gt; in &lt;code&gt;a0&lt;/code&gt;, and branching to the subroutine. When &lt;code&gt;Enqueue&lt;/code&gt; returns, &lt;code&gt;AddMemList&lt;/code&gt; terminates and returns as well.&lt;/p&gt;
&lt;h1 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;PDF here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Amiga System Programmers Guide, Abacus (&lt;a href="https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus"&gt;pdf here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/thedigitalcatonline.github.com/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Clean Architectures in Python: the book</title><link href="https://www.thedigitalcatonline.com/blog/2018/12/20/cabook/" rel="alternate"></link><published>2018-12-20T08:00:00+01:00</published><updated>2019-03-15T09:30:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2018-12-20:/blog/2018/12/20/cabook/</id><summary type="html">&lt;p&gt;A practical approach to better software design&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: a Russian translation is in the works!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: version 1.0.7 is out, the book reached 7,400 downloads. Thanks!&lt;/p&gt;
&lt;p&gt;I'm excited to announce that the success of &lt;a href="https://www.thedigitalcatonline.com/blog/2016/11/14/clean-architectures-in-python-a-step-by-step-example/"&gt;the post on clean architectures&lt;/a&gt; encouraged me to expand the subject and to write a book that I titled "Clean Architectures in Python. A practical approach to better software design".&lt;/p&gt;
&lt;p&gt;The book contains a complete introduction to TDD and clean architectures, two topics that I believe are strictly interconnected. The book is 170 pages long and it is complete, at least for a first edition, but I am already planning to add content that could not fit in this release for several reasons (mostly because still unclear in my mind).&lt;/p&gt;
&lt;div class="center-image"&gt;
&lt;img src="/images/cabook/cover.jpg" alt="Cover" /&gt;
&lt;/div&gt;

&lt;p&gt;The book is available for free &lt;a href="https://leanpub.com/clean-architectures-in-python"&gt;on Leanpub&lt;/a&gt;. If you enjoy it, please tweet about it with the &lt;code&gt;#pycabook&lt;/code&gt; hashtag.&lt;/p&gt;
&lt;p&gt;So far more than 7,400 readers downloaded the book. Thank you all!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The book will soon be translated into Russian by Алексей Пыльцын (Alexey Pyltsyn), who already worked on the translation of technical books like "The Majesty of Vue.js 2" and "The Road to learn React".&lt;/p&gt;
&lt;p&gt;Alexey is a web developer and maintainer of the official PHP documentation in Russian. His website is https://lex111.ru/.&lt;/p&gt;
&lt;div class="center-image"&gt;
&lt;img src="/images/cabook/cover_ru.jpg" alt="Russian cover" /&gt;
&lt;/div&gt;

&lt;p&gt;If you are interested you can show you support &lt;a href="https://leanpub.com/clean-architectures-in-python-russian"&gt;on the Leanpub page&lt;/a&gt;&lt;/p&gt;</content><category term="Projects"></category><category term="OOP"></category><category term="Python"></category><category term="Python2"></category><category term="Python3"></category><category term="TDD"></category><category term="testing"></category><category term="architectures"></category></entry><entry><title>Useful pytest command line options</title><link href="https://www.thedigitalcatonline.com/blog/2018/07/05/useful-pytest-command-line-options/" rel="alternate"></link><published>2018-07-05T11:00:00+01:00</published><updated>2018-07-05T11:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2018-07-05:/blog/2018/07/05/useful-pytest-command-line-options/</id><summary type="html">&lt;p&gt;A curated list of useful command line options of the Python unit testing framework pytest&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently gave a workshop on "TDD in Python with pytest", where I developed a very simple Python project together with the attendees following a TDD approach. It's a good way to introduce TDD, I think. I wrote each test together with the attendees, and then I left them the task of writing the Python code that passes the test. This way I could show TDD in action, introducing pytest features like the &lt;code&gt;pytest.raises&lt;/code&gt; context manager or the use of &lt;code&gt;assert&lt;/code&gt; while they become useful for the actual tests.&lt;/p&gt;
&lt;p&gt;This is the approach that I follow in some of my posts on TDD here on the blog, for example &lt;a href="https://www.thedigitalcatonline.com/blog/2015/05/13/python-oop-tdd-example-part1/"&gt;A simple example of Python OOP development (with TDD)&lt;/a&gt; and &lt;a href="https://www.thedigitalcatonline.com/blog/2017/05/09/a-game-of-tokens-write-an-interpreter-in-python-with-tdd-part-1/"&gt;A game of tokens: write an interpreter in Python with TDD - Part 1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Part of the workshop was dedicated to pytest command line options and in general to what pytest can do as a testing framework. Unfortunately there was no time to go through this part, so I promised some of the attendees to give them a written version of it. This post is the fulfilment of that promise.&lt;/p&gt;
&lt;p&gt;Please remember to &lt;code&gt;import pytest&lt;/code&gt; before using functions, decorators or attributes prefixed by &lt;code&gt;pytest.&lt;/code&gt;, as I will not repeat it in each example.&lt;/p&gt;
&lt;h1 id="run-single-tests"&gt;Run single tests&lt;a class="headerlink" href="#run-single-tests" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;If you want to run only a specific test you can provide its name on the pytest command line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest -svv tests/test_calc.py::test_addition
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which for example runs the &lt;code&gt;tests_addition&lt;/code&gt; test inside the &lt;code&gt;tests/test_calc.py&lt;/code&gt; file. You can also specify the file name only to run all the tests contained there&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest -svv tests/test_calc.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="skipping-tests"&gt;Skipping tests&lt;a class="headerlink" href="#skipping-tests" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Sometimes it is useful to skip tests. The reason might be that some new code broke too many tests, and we want to face them one at a time, or that a specific feature had to be temporarily disabled. In all those cases the &lt;code&gt;pytest.mark.skip&lt;/code&gt; decorator is your friend. Remember that a decorator is something that changes the way the decorated function works (for the skilled reader: it's a function wrapper). Assuming we are working on a &lt;code&gt;tests/test_calc.py&lt;/code&gt; file the code might be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_test_addition&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result on the command line will be (after running &lt;code&gt;py.test -svv&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tests/test_calc.py::test_addition SKIPPED
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="skipping-with-a-reason"&gt;Skipping with a reason&lt;a class="headerlink" href="#skipping-with-a-reason" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The previous solution is good for a temporary skip, but if the test has to remain deactivated for a long time it's better to annotate a specific reason for the exclusion. In my experience 1 day is enough to forget small details like this, so my advice is to always put a well-written reason on skipped tests. To add it you can use the &lt;code&gt;reason&lt;/code&gt; attribute of the &lt;code&gt;skip&lt;/code&gt; decorator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Addition has been deactivated because of issue #123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_test_addition&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember to add the &lt;code&gt;-rs&lt;/code&gt; option to your command line to see the &lt;code&gt;r&lt;/code&gt;eason behind &lt;code&gt;s&lt;/code&gt;kipped tests. So after running &lt;code&gt;py.test -svv -rs&lt;/code&gt; we will get something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tests/test_calc.py::test_addition SKIPPED
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;=============================&lt;/span&gt; short &lt;span class="nb"&gt;test&lt;/span&gt; summary &lt;span class="nv"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=============================&lt;/span&gt;
SKIP &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; tests/test_calc.py:5: Addition has been deactivated because of issue &lt;span class="c1"&gt;#123&lt;/span&gt;

&lt;span class="o"&gt;======================&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; passed, &lt;span class="m"&gt;1&lt;/span&gt; skipped in &lt;span class="m"&gt;0&lt;/span&gt;.02 &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=======================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="skipping-tests-conditionally"&gt;Skipping tests conditionally&lt;a class="headerlink" href="#skipping-tests-conditionally" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Well, most of the time we will skip tests not for a stable reason, but according to some other condition that we can retrieve from the system, like the Python version, or maybe the region in which a server is running. The decorator that we need to use in that case is &lt;code&gt;skipif&lt;/code&gt;, which accepts a condition (a boolean value) and a reason&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skipif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AWS_REGION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-west-2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Addition has been deactivated in us-west-2 because of issue #234&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_addition&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this code running &lt;code&gt;AWS_REGION=eu-west-1 py.test -svv -rs&lt;/code&gt; will run the &lt;code&gt;test_addition&lt;/code&gt; test, while running &lt;code&gt;AWS_REGION=us-west-2 py.test -svv -rs&lt;/code&gt; will skip it. The environment variable &lt;code&gt;AWS_REGION&lt;/code&gt; set in the previous command lines is an example that simulates the presence of the variable in the system.&lt;/p&gt;
&lt;h1 id="run-tests-by-name"&gt;Run tests by name&lt;a class="headerlink" href="#run-tests-by-name" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You can selectively run tests by name using &lt;code&gt;-k&lt;/code&gt;. This option accepts Python expressions that try to match the name of the test with the provided values. So&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest -svv -k &lt;span class="s2"&gt;&amp;quot;test_addition&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will run all those tests which name contains the substring &lt;code&gt;'addition'&lt;/code&gt;, like &lt;code&gt;test_addiiton&lt;/code&gt;, &lt;code&gt;test_addition_multiple_inputs&lt;/code&gt;, and &lt;code&gt;test_complex_addition&lt;/code&gt;. A more complex expression could be for example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest -svv -k &lt;span class="s2"&gt;&amp;quot;test_addition and not complex&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will run both &lt;code&gt;test_addition&lt;/code&gt; and &lt;code&gt;test_addition_multiple_inputs&lt;/code&gt; but not &lt;code&gt;test_complex_addition&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="tagging-tests"&gt;Tagging tests&lt;a class="headerlink" href="#tagging-tests" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Tests can be tagged or labelled using &lt;code&gt;pytest.mark&lt;/code&gt;, and the tag can be used to run or skip sets of tests. Let's say that we identify a set of very slow tests that we don't want to run continuously.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_addition&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_subtraction&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_multiplication&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example &lt;code&gt;test_addition&lt;/code&gt; and &lt;code&gt;test_multiplication&lt;/code&gt; have been decorated with &lt;code&gt;pytest.mark.slow&lt;/code&gt; which tells pytest to label them with the &lt;code&gt;slow&lt;/code&gt; identifier. At this point we can run all the tests that are tagged with the &lt;code&gt;-m&lt;/code&gt; option&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest -svv -m slow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tests can be tagged multiple times&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complex&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_addition&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case the test will be run both by &lt;code&gt;pytest -svv -m slow&lt;/code&gt; and by &lt;code&gt;pytest -svv -m complex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-m&lt;/code&gt; option supports complex expressions like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest -svv -m &lt;span class="s1"&gt;&amp;#39;not slow&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which runs all the tests that are not tagged with &lt;code&gt;slow&lt;/code&gt;, or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest -svv -m &lt;span class="s1"&gt;&amp;#39;mac or linux&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which runs all the tests tagged with &lt;code&gt;mac&lt;/code&gt; and all the tests tagged with &lt;code&gt;linux&lt;/code&gt;. Pay attention that &lt;code&gt;-m&lt;/code&gt; expressions refer to the tags of each single test, so &lt;code&gt;slow and complex&lt;/code&gt; will run only those tests that are tagged both with &lt;code&gt;slow&lt;/code&gt; and with &lt;code&gt;complex&lt;/code&gt;, and not all the tests marked with the first and all the tests marked with the second.&lt;/p&gt;
&lt;h1 id="adding-a-command-line-option"&gt;Adding a command line option&lt;a class="headerlink" href="#adding-a-command-line-option" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You can add custom command line options to pytest with the &lt;code&gt;pytest_addoption&lt;/code&gt; and &lt;code&gt;pytest_runtest_setup&lt;/code&gt; hooks that allows you to manage the command line parser and the setup for each test.&lt;/p&gt;
&lt;p&gt;Let's say, for example, that we want to add a &lt;code&gt;--runslow&lt;/code&gt; option that runs all the tests marked with &lt;code&gt;slow&lt;/code&gt;. First, create the file &lt;code&gt;tests/conftest.py&lt;/code&gt;, which is a file that pytest imports before running your tests, and use the &lt;code&gt;pytest_addoption&lt;/code&gt; hook&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pytest_addoption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addoption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--runslow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;run slow tests&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command line parser configuration will be stored into the &lt;code&gt;config&lt;/code&gt; attribute of the setup of each test. Thus we can use the &lt;code&gt;pytest_runtest_setup&lt;/code&gt; hook that runs before each test&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pytest_runtest_setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;slow&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;runslow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;need --runslow option to run&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here &lt;code&gt;item&lt;/code&gt; is the single test, so &lt;code&gt;item.keywords&lt;/code&gt; is the set of tags attached to the test, and &lt;code&gt;item.config&lt;/code&gt; is the configuration after the parser run on the command line. This makes the previous code match all the tests that are decorated with &lt;code&gt;@pytest.mark.slow&lt;/code&gt; and only when the &lt;code&gt;--runslow&lt;/code&gt; option has been specified on the command line. If both those conditions are satisfied the &lt;code&gt;pytest.skip&lt;/code&gt; function is run, which skips the current test adding the specified string as a reason.&lt;/p&gt;
&lt;h1 id="coverage"&gt;Coverage&lt;a class="headerlink" href="#coverage" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Coverage is a measure of the percentage of code lines are "hit" when running tests. Basically the idea is to discover if there are parts of the code that are not run during the tests, thus being untested.&lt;/p&gt;
&lt;p&gt;If you follow a strict TDD methodology your coverage will be 100% always, because the only code you will write is the one that you need to pass the tests. But please, please, please keep this in mind: not everything is easily tested and in front of some complex parts of the code you always have to ask yourself "Is it worth?".&lt;/p&gt;
&lt;p&gt;Is it worth spending 3 days to write a test for a feature? Well, if a failure in the new code means a huge financial loss for your company, yes. If you are writing a tool for yourself, and the code you are writing is not dangerous at all, maybe not. With all the shades of grey between these two black and white extreme cases.&lt;/p&gt;
&lt;p&gt;So, don't become a slave of the coverage index. A coverage of more than 90% is heaven, and being over 80% is perfectly fine. I would say that, except for specific corner cases being under 80% means that you are not really following a TDD methodology. So, maybe go and review your work flow.&lt;/p&gt;
&lt;p&gt;Anyway, pytest gives you a nice way to report the coverage using the &lt;code&gt;coverage&lt;/code&gt; program. Just install &lt;code&gt;pytest-cov&lt;/code&gt; with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pytest-cov
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and run pytest with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest -svv --cov&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;name&amp;gt; --cov-report&lt;span class="o"&gt;=&lt;/span&gt;term
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is the name of the Python module you are testing (actually the path where the code you are testing is). This gives you a nice report with the percentage of covered code file by file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ py.test -svv --cov&lt;span class="o"&gt;=&lt;/span&gt;mypymodule --cov-report&lt;span class="o"&gt;=&lt;/span&gt;term

----------- coverage: platform linux, python &lt;span class="m"&gt;3&lt;/span&gt;.6.5-final-0 -----------
Name                          Stmts   Miss  Cover
-------------------------------------------------
mypymodule/__init__.py       &lt;span class="m"&gt;3&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;%
mypymodule/calc.py          &lt;span class="m"&gt;23&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;%
-------------------------------------------------
TOTAL                            &lt;span class="m"&gt;26&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may also use the &lt;code&gt;term-missing&lt;/code&gt; report instad of just &lt;code&gt;term&lt;/code&gt;, that lists the code blocks that are not covered&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ py.test -svv --cov&lt;span class="o"&gt;=&lt;/span&gt;mypymodule --cov-report&lt;span class="o"&gt;=&lt;/span&gt;term-missing

----------- coverage: platform linux, python &lt;span class="m"&gt;3&lt;/span&gt;.6.5-final-0 -----------
Name                          Stmts   Miss  Cover   Missing
-----------------------------------------------------------
mypymodule/__init__.py       &lt;span class="m"&gt;3&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;%
mypymodule/calc.py          &lt;span class="m"&gt;23&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;91&lt;/span&gt;%   &lt;span class="m"&gt;6&lt;/span&gt;, &lt;span class="m"&gt;11&lt;/span&gt;
-----------------------------------------------------------
TOTAL                            &lt;span class="m"&gt;26&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;92&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I commented some of the tests to force the coverage percentage to drop. As you can see the report tells us that lines 6 and 11 of the &lt;code&gt;mypymodule/calc.py&lt;/code&gt; file are not covered by any test.&lt;/p&gt;
&lt;h1 id="updates"&gt;Updates&lt;a class="headerlink" href="#updates" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;2017-12-24: pytest.org (such an honour!) spotted a misspelled &lt;code&gt;pytest.mark.skip&lt;/code&gt;. Thanks!&lt;/p&gt;
&lt;h1 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/thedigitalcatonline.github.com/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Programming"></category><category term="Python"></category><category term="Python2"></category><category term="Python3"></category><category term="TDD"></category><category term="testing"></category></entry></feed>