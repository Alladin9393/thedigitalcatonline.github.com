<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Digital Cat - amiga</title><link href="http://blog.thedigitalcatonline.com/" rel="alternate"></link><link href="http://blog.thedigitalcatonline.com/categories/amiga/atom.xml" rel="self"></link><id>http://blog.thedigitalcatonline.com/</id><updated>2018-06-08T12:30:00+01:00</updated><entry><title>Exploring the Amiga - Part 3</title><link href="http://blog.thedigitalcatonline.com/blog/2018/06/08/exploring-the-amiga-3/" rel="alternate"></link><published>2018-06-08T12:30:00+01:00</published><updated>2018-06-08T12:30:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:blog.thedigitalcatonline.com,2018-06-08:/blog/2018/06/08/exploring-the-amiga-3/</id><summary type="html"></summary><content type="html">&lt;h1&gt;Exec and the vector table&lt;/h1&gt;
&lt;p&gt;The Exec library is the base library of the Amiga system. This library is loaded in memory at boot time, and it is always open and available. Once loaded, it has the same structure of any other library, that is a prefix containing the jump table in reverse order, then the actual code.&lt;/p&gt;
&lt;p&gt;The trick here is that Exec is the library used to load in memory other libraries, so the function that creates the structure in memory of a given library is contained here. To install Exec in memory, thus, we need to use a function which is part of the library itself.&lt;/p&gt;
&lt;p&gt;This is one of the powers of the Assembly language. The property of treating the code as if it was pure data is called homoiconicity, and is something that can be rarely found in other languages. Lisp is a good example of a higher level homoiconic language.&lt;/p&gt;
&lt;p&gt;Back to our vector table, we have to find a way to use the Exec library to install in memory the Exec library itself. The concept is not that complex, actually. The pseudocode is something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;function1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;
    &lt;span class="n"&gt;function2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;
    &lt;span class="n"&gt;function3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;
&lt;span class="n"&gt;function1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;span class="n"&gt;function2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;span class="n"&gt;function3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this situation we have 3 functions defined at the addresses &lt;code&gt;function1&lt;/code&gt;, &lt;code&gt;function2&lt;/code&gt;, and &lt;code&gt;function3&lt;/code&gt;. Somewhere in the code at the address &lt;code&gt;vectors&lt;/code&gt; there is a plain list that containes the addresses of those functions. Since the code can be relocated this list contains offsets relative to the &lt;code&gt;vectors&lt;/code&gt; table itself. So the first element of the table will be &lt;code&gt;function1-vectors&lt;/code&gt;, that is the subtraction between the two addresses, and so on.&lt;/p&gt;
&lt;p&gt;For example we might have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0042 0122
0044 01b8
0046 02d1
[...]
0164 code of function1
[...]
01fa code of function2
[...]
0313 code of function3
[...]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where the entry of the table are &lt;code&gt;0x164-0x42 = 0x122&lt;/code&gt;, &lt;code&gt;0x1fa-0x42 = 0x1b8&lt;/code&gt;, and &lt;code&gt;0x313-0x42 = 0x2d1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The vectors table, thus, is the source from which we can calculate the jump table. The code to perform this, however, is contained in one of the functions itself, let's say the number 2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;function1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;span class="n"&gt;function2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;jump&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;function3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;span class="n"&gt;vectors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;function1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;
    &lt;span class="n"&gt;function2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;
    &lt;span class="n"&gt;function3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the function at &lt;code&gt;function2&lt;/code&gt; (in this example) depends on a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and a &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; parameters which will be contained in some register. At this point, since the address &lt;code&gt;function2&lt;/code&gt; is known, there can be some code that runs the function on the table contained in the code itself&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vectors_offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;function1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;span class="n"&gt;function2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;jump&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;START&lt;/span&gt;
&lt;span class="n"&gt;function3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;span class="n"&gt;vectors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;function1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;
    &lt;span class="n"&gt;function2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;
    &lt;span class="n"&gt;function3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vectors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;&amp;lt;vectors_offset&amp;gt;&lt;/code&gt; is a hardcoded offset (as the displacement of &lt;code&gt;vectors&lt;/code&gt; relative to &lt;code&gt;setup&lt;/code&gt; is known) and &lt;code&gt;setup&lt;/code&gt; is the effective address that the &lt;code&gt;setup&lt;/code&gt; routine has at runtime.&lt;/p&gt;
&lt;p&gt;This mechanism creates then a library that can install other libraries through a given function, but that can at the same time install itself.&lt;/p&gt;
&lt;h1&gt;The Kickstart vector table&lt;/h1&gt;
&lt;p&gt;An actual example of the vector table mechanism can be found in the Kickstart code. Kickstart is the BIOS of the Amiga system, and is loaded at boot time either from disk (Amiga 1000 and some Amiga 3000) or from a ROM.&lt;/p&gt;
&lt;p&gt;The code of Kickstart 1.3 can be found &lt;a href="https://www.romcollector.com/emulators-firmware-i-29.html"&gt;here&lt;/a&gt; and you can easily disassemble it with vdasm&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vda68k Kickstart1.3.rom &amp;gt; Kickstart1.3.asm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside this code we can see a practical implementation of the mechanism described above.&lt;/p&gt;
&lt;p&gt;The mandatory disclaimer: &lt;strong&gt;to legally use the Amiga Kickstart ROM images you must own the specific Amiga model.&lt;/strong&gt; This website is against piracy of dead and discontinued systems.&lt;/p&gt;
&lt;p&gt;When you disassemble some binary code, however, you don't get some nice source code written in a high level language. Well, not with a simple disassembler like vdasm, anyway. What you get is the one to one interpretation of the binary values according to the processor's conventions, and this includes parts of the binary file that are pure data. The disassembler has no way to know if some binary number represents an instruction or a pure number. Moreover, there is no trace of the original labels used by the author(s) of the code, as they are lost in the translation to machine language, when they are converted to pure addresses.&lt;/p&gt;
&lt;p&gt;The practice of understanding how a system works starting from the pure implementation is called "reversing", and personally I consider it one of the most fascinating tasks a programmer can face.&lt;/p&gt;
&lt;p&gt;The purpose of the present investigation is to find the Kickstart 1.3 vector table, and with that to find the position and implementation of the Exec functions. Well, let's start.&lt;/p&gt;
&lt;h2&gt;Step 1&lt;/h2&gt;
&lt;p&gt;I know that &lt;code&gt;MakeFunctions&lt;/code&gt; is used to create in memory the structure of Exec itself. So I know that somewhere that function is invoked on the code that I am studying.&lt;/p&gt;
&lt;p&gt;Since one of the parameters of the &lt;code&gt;MakeFunctions&lt;/code&gt; routine is the name of the library a good starting point might be a string containing &lt;code&gt;exec.library&lt;/code&gt; (which is the standard name of this library in the Amiga system). Once I find that string I can look for a function call that uses its address as a parameter.&lt;/p&gt;
&lt;p&gt;The byte sequence that represents that string (using ASCII) is &lt;code&gt;65 78 65 63 2E 6C 69 62 72 61 72 79&lt;/code&gt;. In Kickstart 1.3 the offset of this string is &lt;code&gt;0x00a8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remember that what you see in the disassembled code is not a string. The disassembler tries to convert everything into instructions, so you will find something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;000000a8:&lt;/span&gt; &lt;span class="mi"&gt;6578&lt;/span&gt;                      &lt;span class="k"&gt;bcs&lt;/span&gt;&lt;span class="o"&gt;.b&lt;/span&gt;   &lt;span class="mi"&gt;0x122&lt;/span&gt;
&lt;span class="nl"&gt;000000aa:&lt;/span&gt; &lt;span class="mi"&gt;6563&lt;/span&gt;                      &lt;span class="k"&gt;bcs&lt;/span&gt;&lt;span class="o"&gt;.b&lt;/span&gt;   &lt;span class="mi"&gt;0x10f&lt;/span&gt;
&lt;span class="nl"&gt;000000ac:&lt;/span&gt; &lt;span class="mi"&gt;2e6c&lt;/span&gt; &lt;span class="mi"&gt;6962&lt;/span&gt;                 &lt;span class="k"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt; &lt;span class="mi"&gt;0x6962&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;
&lt;span class="nl"&gt;000000b0:&lt;/span&gt; &lt;span class="mi"&gt;7261&lt;/span&gt;                      &lt;span class="k"&gt;moveq&lt;/span&gt;   &lt;span class="nl"&gt;#0x61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;d1&lt;/span&gt;
&lt;span class="nl"&gt;000000b2:&lt;/span&gt; &lt;span class="mi"&gt;7279&lt;/span&gt;                      &lt;span class="k"&gt;moveq&lt;/span&gt;   &lt;span class="nl"&gt;#0x79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;d1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When looking for strings it's better to use a hexadecimal editor that can show and search in the ASCII representation of the binary code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Search exec.library string" src="/images/exploring-the-amiga-3/search-exec-library-string.png"&gt;&lt;/p&gt;
&lt;p&gt;We know that Kickstart is loaded at address 0xfc0000 (Amiga System Programmer's Guide, page 67), so all the 16-bit addresses are relative to 0x00fc. The library name pointer is then &lt;code&gt;00fc 00a8&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Step 2&lt;/h2&gt;
&lt;p&gt;In the Amiga system all libraries have a specific structure when loaded in memory. Apart from the prefixed jump table, the library code itself has a fixed structure that allows us to read and use it.&lt;/p&gt;
&lt;p&gt;First of all all libraries in memory are nodes of a linked list, so we expect to find the structure of the node itself. Then, inside the node, we expect to find the actual library structure.&lt;/p&gt;
&lt;p&gt;The include file &lt;code&gt;exec/nodes.i&lt;/code&gt; tells us that a standard linked list node has the following structure&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;STRUCTURE&lt;/span&gt;    &lt;span class="n"&gt;LN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="c1"&gt;; List Node&lt;/span&gt;
    &lt;span class="n"&gt;APTR&lt;/span&gt;    &lt;span class="n"&gt;LN_SUCC&lt;/span&gt; &lt;span class="c1"&gt;; Pointer to next (successor)&lt;/span&gt;
    &lt;span class="n"&gt;APTR&lt;/span&gt;    &lt;span class="n"&gt;LN_PRED&lt;/span&gt; &lt;span class="c1"&gt;; Pointer to previous (predecessor)&lt;/span&gt;
    &lt;span class="n"&gt;UBYTE&lt;/span&gt;   &lt;span class="n"&gt;LN_TYPE&lt;/span&gt;
    &lt;span class="n"&gt;BYTE&lt;/span&gt;    &lt;span class="n"&gt;LN_PRI&lt;/span&gt;  &lt;span class="c1"&gt;; Priority, for sorting&lt;/span&gt;
    &lt;span class="n"&gt;APTR&lt;/span&gt;    &lt;span class="n"&gt;LN_NAME&lt;/span&gt; &lt;span class="c1"&gt;; ID string, null terminated&lt;/span&gt;
    &lt;span class="n"&gt;LABEL&lt;/span&gt;   &lt;span class="n"&gt;LN_SIZE&lt;/span&gt; &lt;span class="c1"&gt;; Note: word aligned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two 32-bit pointers &lt;code&gt;LN_SUCC&lt;/code&gt; and &lt;code&gt;LN_PRED&lt;/code&gt; are created when the node is loaded in memory, so we need to look for the rest of the structure, namely 1 byte with &lt;code&gt;LN_TYPE&lt;/code&gt;, 1 byte with &lt;code&gt;LN_PRI&lt;/code&gt; and 4 bytes with &lt;code&gt;LN_NAME&lt;/code&gt;. From the same file &lt;code&gt;exec/nodes.i&lt;/code&gt; we know that the note type for a library is &lt;code&gt;09&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;NT_LIBRARY&lt;/span&gt;  &lt;span class="o"&gt;EQU&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the pattern we are looking for is &lt;code&gt;09XX 00fc 00a8&lt;/code&gt;, respectively the node type (&lt;code&gt;09&lt;/code&gt;), an unknown priority (&lt;code&gt;XX&lt;/code&gt;), and the library name pointer &lt;code&gt;00fc 00a8&lt;/code&gt;. We also know that the pattern is likely to be stored towards the beginning of the whole ROM, as one of the first things the library will do is to create its own structure in memory. This last assumption is not to be taken for granted, but it's a reasonable one.&lt;/p&gt;
&lt;p&gt;In the Kickstart 1.3 code this pattern can be found at offset &lt;code&gt;0x030c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Search library pattern" src="/images/exploring-the-amiga-3/search-library-pattern.png"&gt;&lt;/p&gt;
&lt;p&gt;If this is the correct position of the node structure, we expect to find just after it the structure of the library as described in the include file &lt;code&gt;exec/libraries.i&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;STRUCTURE&lt;/span&gt; &lt;span class="n"&gt;LIB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;LN_SIZE&lt;/span&gt;     
    &lt;span class="n"&gt;UBYTE&lt;/span&gt;   &lt;span class="n"&gt;LIB_FLAGS&lt;/span&gt;           &lt;span class="c1"&gt;; see below&lt;/span&gt;
    &lt;span class="n"&gt;UBYTE&lt;/span&gt;   &lt;span class="n"&gt;LIB_pad&lt;/span&gt;         &lt;span class="c1"&gt;; must be zero&lt;/span&gt;
    &lt;span class="n"&gt;UWORD&lt;/span&gt;   &lt;span class="n"&gt;LIB_NEGSIZE&lt;/span&gt;     &lt;span class="c1"&gt;; number of bytes before LIB&lt;/span&gt;
    &lt;span class="n"&gt;UWORD&lt;/span&gt;   &lt;span class="n"&gt;LIB_POSSIZE&lt;/span&gt;     &lt;span class="c1"&gt;; number of bytes after LIB&lt;/span&gt;
    &lt;span class="n"&gt;UWORD&lt;/span&gt;   &lt;span class="n"&gt;LIB_VERSION&lt;/span&gt;     &lt;span class="c1"&gt;; major&lt;/span&gt;
    &lt;span class="n"&gt;UWORD&lt;/span&gt;   &lt;span class="n"&gt;LIB_REVISION&lt;/span&gt;        &lt;span class="c1"&gt;; minor&lt;/span&gt;
    &lt;span class="n"&gt;APTR&lt;/span&gt;    &lt;span class="n"&gt;LIB_IDSTRING&lt;/span&gt;        &lt;span class="c1"&gt;; ASCII identification&lt;/span&gt;
    &lt;span class="n"&gt;ULONG&lt;/span&gt;   &lt;span class="n"&gt;LIB_SUM&lt;/span&gt;         &lt;span class="c1"&gt;; the system-calculated checksum&lt;/span&gt;
    &lt;span class="n"&gt;UWORD&lt;/span&gt;   &lt;span class="n"&gt;LIB_OPENCNT&lt;/span&gt;     &lt;span class="c1"&gt;; number of current opens&lt;/span&gt;
    &lt;span class="n"&gt;LABEL&lt;/span&gt;   &lt;span class="n"&gt;LIB_SIZE&lt;/span&gt;    &lt;span class="c1"&gt;;Warning: Size is not a longword multiple!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The binary code of Kickstart 1.3 from address &lt;code&gt;0xfc030c&lt;/code&gt; is indeed the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;0000030c:&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;          &lt;span class="c1"&gt;; LN_TYPE&lt;/span&gt;
&lt;span class="nl"&gt;0000030d:&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;          &lt;span class="c1"&gt;; LN_PRI&lt;/span&gt;
&lt;span class="nl"&gt;0000030e:&lt;/span&gt; &lt;span class="mi"&gt;00fc&lt;/span&gt; &lt;span class="mi"&gt;00a8&lt;/span&gt;   &lt;span class="c1"&gt;; LN_NAME&lt;/span&gt;
&lt;span class="nl"&gt;00000312:&lt;/span&gt; &lt;span class="mi"&gt;06&lt;/span&gt;          &lt;span class="c1"&gt;; LIB_FLAGS&lt;/span&gt;
&lt;span class="nl"&gt;00000313:&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;          &lt;span class="c1"&gt;; LIB_pad&lt;/span&gt;
&lt;span class="nl"&gt;00000314:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;        &lt;span class="c1"&gt;; LIB_NEGSIZE&lt;/span&gt;
&lt;span class="nl"&gt;00000316:&lt;/span&gt; &lt;span class="mi"&gt;024c&lt;/span&gt;        &lt;span class="c1"&gt;; LIB_POSSIZE&lt;/span&gt;
&lt;span class="nl"&gt;00000318:&lt;/span&gt; &lt;span class="mi"&gt;0022&lt;/span&gt;        &lt;span class="c1"&gt;; LIB_VERSION&lt;/span&gt;
&lt;span class="nl"&gt;0000031a:&lt;/span&gt; &lt;span class="mi"&gt;0002&lt;/span&gt;        &lt;span class="c1"&gt;; LIB_REVISION&lt;/span&gt;
&lt;span class="nl"&gt;0000031c:&lt;/span&gt; &lt;span class="mi"&gt;00fc&lt;/span&gt; &lt;span class="mi"&gt;0018&lt;/span&gt;   &lt;span class="c1"&gt;; LIB_IDSTRING&lt;/span&gt;
&lt;span class="nl"&gt;00000320:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;   &lt;span class="c1"&gt;; LIB_SUM&lt;/span&gt;
&lt;span class="nl"&gt;00000324:&lt;/span&gt; &lt;span class="mi"&gt;0001&lt;/span&gt;        &lt;span class="c1"&gt;; LIB_OPENCNT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this I know that the version of &lt;code&gt;exec&lt;/code&gt; contained in this Kickstart is 34 (&lt;code&gt;0x22&lt;/code&gt;) revision 2 (&lt;code&gt;0x02&lt;/code&gt;), and this is confirmed byt the ID string at address &lt;code&gt;0xfc0018&lt;/code&gt;, which is &lt;code&gt;exec 34.2 (28 Oct 1987)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Exec version string" src="/images/exploring-the-amiga-3/exec-version-string.png"&gt;&lt;/p&gt;
&lt;h2&gt;Step 3&lt;/h2&gt;
&lt;p&gt;What we are really interested in, at this point, is where the address of this structure is mentioned in the code, as it will be used to create the library structure. Since after creating the library structure the &lt;code&gt;MakeFunctions&lt;/code&gt; routine will be invoked we can know from here where this latter is defined.&lt;/p&gt;
&lt;p&gt;The structure is at address &lt;code&gt;0x030c&lt;/code&gt; and we are looking for and instruction like &lt;code&gt;lea 0x30c(pc),ax&lt;/code&gt;, where &lt;code&gt;ax&lt;/code&gt; is one of the address registers &lt;code&gt;a0&lt;/code&gt;-&lt;code&gt;a7&lt;/code&gt;. Loading the address of a table in a register is the standard way to loop on the table to modify it or to copy the bytes somewhere. &lt;/p&gt;
&lt;p&gt;(The 68000 does not allow you to execute a MOVE instruction with a destination relative to the program counter (PC). In the view of the 68000 designers, code should not patch itself. If you must change a table in the middle of code, you must point to it with an instruction like LEA TABLE(PC),An and then alter it through An. (Self-modifying code is especially bad for 68000 programs that may someday run on the 68020, because the 68020's instruction cache normally assumes that code is pure.) from http://www.easy68k.com/paulrsm/doc/trick68k.htm)&lt;/p&gt;
&lt;p&gt;At address &lt;code&gt;0x0364&lt;/code&gt; we find the following code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;0360:&lt;/span&gt; &lt;span class="mi"&gt;43ee&lt;/span&gt; &lt;span class="mi"&gt;0008&lt;/span&gt;                 &lt;span class="k"&gt;lea&lt;/span&gt;     &lt;span class="mi"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;a6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;a1&lt;/span&gt;
&lt;span class="nl"&gt;0364:&lt;/span&gt; &lt;span class="mi"&gt;41fa&lt;/span&gt; &lt;span class="mi"&gt;ffa6&lt;/span&gt;                 &lt;span class="k"&gt;lea&lt;/span&gt;     &lt;span class="mi"&gt;0x30c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;a0&lt;/span&gt;
&lt;span class="nl"&gt;0368:&lt;/span&gt; &lt;span class="mi"&gt;700c&lt;/span&gt;                      &lt;span class="k"&gt;moveq&lt;/span&gt;   &lt;span class="nl"&gt;#0xc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;d0&lt;/span&gt;
&lt;span class="nl"&gt;036a:&lt;/span&gt; &lt;span class="mi"&gt;32d8&lt;/span&gt;                      &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.w&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;)+,(&lt;/span&gt;&lt;span class="o"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;)+&lt;/span&gt;
&lt;span class="nl"&gt;036c:&lt;/span&gt; &lt;span class="mi"&gt;51c8&lt;/span&gt; &lt;span class="mi"&gt;fffc&lt;/span&gt;                 &lt;span class="k"&gt;dbf&lt;/span&gt;     &lt;span class="o"&gt;d0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x36a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which actually installs in memory the exec library. Let's analyse this code instruction by instruction.&lt;/p&gt;
&lt;p&gt;Since the ExecBase address is contained in &lt;code&gt;a6&lt;/code&gt; (this is done previously in the code), that address is incremented by 8 and the result is copied into the &lt;code&gt;a1&lt;/code&gt; register. The 8 bytes leave space for the &lt;code&gt;LN_SUCC&lt;/code&gt; and &lt;code&gt;LN_PRED&lt;/code&gt; pointers. Then, the code loads the address of the table in &lt;code&gt;a0&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The loop is performed on 26 bytes. The number 12 (&lt;code&gt;0xc&lt;/code&gt;) is copied  into &lt;code&gt;d0&lt;/code&gt;, but the instruction &lt;code&gt;dbf&lt;/code&gt; (&lt;code&gt;dbra&lt;/code&gt; in some assemblers) keeps jumping to &lt;code&gt;0x36a&lt;/code&gt; until the value of &lt;code&gt;d0&lt;/code&gt; is -1, so it is actually performing the loop code 13 times. Since the &lt;code&gt;move.w&lt;/code&gt; instruction moves words we are copying 26 bytes, which is exactly the size of the library node from &lt;code&gt;LN_TYPE&lt;/code&gt; to &lt;code&gt;LIB_OPENCNT&lt;/code&gt; included.&lt;/p&gt;
&lt;p&gt;The next 5 instructions are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;0370:&lt;/span&gt; &lt;span class="mi"&gt;204e&lt;/span&gt;                      &lt;span class="k"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt; &lt;span class="o"&gt;a6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;a0&lt;/span&gt;
&lt;span class="nl"&gt;0372:&lt;/span&gt; &lt;span class="mi"&gt;43fa&lt;/span&gt; &lt;span class="mi"&gt;1708&lt;/span&gt;                 &lt;span class="k"&gt;lea&lt;/span&gt;     &lt;span class="mi"&gt;0x1a7c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;a1&lt;/span&gt;
&lt;span class="nl"&gt;0376:&lt;/span&gt; &lt;span class="mi"&gt;2449&lt;/span&gt;                      &lt;span class="k"&gt;movea&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt; &lt;span class="o"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;a2&lt;/span&gt;
&lt;span class="nl"&gt;0378:&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt; &lt;span class="mi"&gt;1238&lt;/span&gt;                 &lt;span class="k"&gt;bsr&lt;/span&gt;&lt;span class="o"&gt;.w&lt;/span&gt;   &lt;span class="mi"&gt;0x15b2&lt;/span&gt;
&lt;span class="nl"&gt;037c:&lt;/span&gt; &lt;span class="mi"&gt;3d40&lt;/span&gt; &lt;span class="mi"&gt;0010&lt;/span&gt;                 &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.w&lt;/span&gt;  &lt;span class="o"&gt;d0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;a6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the &lt;a href="http://amigadev.elowar.com/read/ADCD_2.1/Includes_and_Autodocs_3._guide/node021A.html"&gt;documentation&lt;/a&gt; we know that &lt;code&gt;MakeFunctions&lt;/code&gt; has the following prototype&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MakeFunctions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vectors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d0&lt;/span&gt;                   &lt;span class="n"&gt;a0&lt;/span&gt;       &lt;span class="n"&gt;a1&lt;/span&gt;       &lt;span class="n"&gt;a2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;address&lt;/code&gt; is the address where the jump table will be constructed, &lt;code&gt;vectors&lt;/code&gt; is a table that lists the function addresses (the onewe are looking for) and &lt;code&gt;offset&lt;/code&gt; tells the function if the function addresses are absolute (if value is &lt;code&gt;0&lt;/code&gt;) or relative (in which case offset is the base for the displacement). The list of addresses has to be -1-terminated (&lt;code&gt;0xffff&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So the first line stores in &lt;code&gt;a0&lt;/code&gt; the content of &lt;code&gt;a6&lt;/code&gt;, which is the ExecBase address. This is where we want to install the library. The second line loads the address of the vectors table in &lt;code&gt;a1&lt;/code&gt; and the same value is stored in &lt;code&gt;a2&lt;/code&gt;. Then the code branches to the subroutine at &lt;code&gt;0x15b2&lt;/code&gt; which at this point we know is the address of &lt;code&gt;MakeFunctions&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Step 4&lt;/h2&gt;
&lt;p&gt;We extracted two useful information from this code. First, the vector table is at address &lt;code&gt;0x1a7c&lt;/code&gt;, and second the &lt;code&gt;MakeFunctions&lt;/code&gt; subroutine is at address &lt;code&gt;0x15b2&lt;/code&gt;. This latter will be useful to double check the content of the vector table.&lt;/p&gt;
&lt;p&gt;After &lt;code&gt;MakeFunctions&lt;/code&gt; has been executed the code returns and the next instruction stores the final size of the jump table 16 bytes after the address contained in &lt;code&gt;a6&lt;/code&gt;. With the help of the structures shown above we know that at that offset we can find the &lt;code&gt;LIB_NEGSIZE&lt;/code&gt; field, that contains the size of the jump table (number of bytes before the library).&lt;/p&gt;
&lt;p&gt;It's time to check if what we found is correct. There should be a table at address &lt;code&gt;0x1a7c&lt;/code&gt; that contains function addresses in the order listed by the include file &lt;code&gt;exec/exec_lib.i&lt;/code&gt;. As &lt;code&gt;MakeFunctions&lt;/code&gt; in that file is listed at the 11th place we can check if the table is consistent. That address should point a function at &lt;code&gt;0x15b2&lt;/code&gt;, according to the previous code.&lt;/p&gt;
&lt;p&gt;The values at &lt;code&gt;0x1a7c&lt;/code&gt; are the following &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;00001a7c:&lt;/span&gt; &lt;span class="mi"&gt;08a0&lt;/span&gt;
&lt;span class="nl"&gt;00001a7e:&lt;/span&gt; &lt;span class="mi"&gt;08a8&lt;/span&gt;
&lt;span class="nl"&gt;00001a80:&lt;/span&gt; &lt;span class="mi"&gt;08ac&lt;/span&gt;
&lt;span class="nl"&gt;00001a82:&lt;/span&gt; &lt;span class="mi"&gt;08ac&lt;/span&gt;
&lt;span class="nl"&gt;00001a84:&lt;/span&gt; &lt;span class="mi"&gt;ee6a&lt;/span&gt;
&lt;span class="nl"&gt;00001a86:&lt;/span&gt; &lt;span class="mi"&gt;f420&lt;/span&gt;
&lt;span class="nl"&gt;00001a88:&lt;/span&gt; &lt;span class="mi"&gt;f446&lt;/span&gt;
&lt;span class="nl"&gt;00001a8a:&lt;/span&gt; &lt;span class="mi"&gt;04f8&lt;/span&gt;
&lt;span class="nl"&gt;00001a8c:&lt;/span&gt; &lt;span class="mi"&gt;f4a0&lt;/span&gt;
&lt;span class="nl"&gt;00001a8e:&lt;/span&gt; &lt;span class="mi"&gt;f4ea&lt;/span&gt;
&lt;span class="nl"&gt;00001a90:&lt;/span&gt; &lt;span class="mi"&gt;f58e&lt;/span&gt;
&lt;span class="nl"&gt;00001a92:&lt;/span&gt; &lt;span class="mi"&gt;f0b0&lt;/span&gt;
&lt;span class="nl"&gt;00001a94:&lt;/span&gt; &lt;span class="mi"&gt;f188&lt;/span&gt;
&lt;span class="nl"&gt;00001a96:&lt;/span&gt; &lt;span class="mi"&gt;faac&lt;/span&gt;
&lt;span class="nl"&gt;00001a98:&lt;/span&gt; &lt;span class="mi"&gt;fb36&lt;/span&gt;
&lt;span class="nl"&gt;00001a9a:&lt;/span&gt; &lt;span class="mi"&gt;f080&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The file &lt;code&gt;exec/exec_lib.i&lt;/code&gt; doesn't contain the first 4 reserved vectors (the functions &lt;code&gt;Open&lt;/code&gt;, &lt;code&gt;Close&lt;/code&gt;, &lt;code&gt;Expunge&lt;/code&gt;, and the reserved space), so considering that those are in the vector table we should check the 15th, were we find &lt;code&gt;0xfb36&lt;/code&gt;. This is an offset relative to the beginning of the table, so the function is at &lt;code&gt;0x1a7c + 0xfb36 = 0x15b2&lt;/code&gt; (addresses are 16 bits numbers), as we already discovered.&lt;/p&gt;
&lt;p&gt;This shows that our investigation is correct. The Kickstart 1.3 vector table is at address &lt;code&gt;0x1a7c&lt;/code&gt; and from there we can reach and analyse all the functions contained in the base Amiga library.&lt;/p&gt;
&lt;h1&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Amiga System Programmers Guide, Abacus (&lt;a href="https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus"&gt;pdf here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://amigadev.elowar.com"&gt;AmigaOS Developer Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 2</title><link href="http://blog.thedigitalcatonline.com/blog/2018/05/28/exploring-the-amiga-2/" rel="alternate"></link><published>2018-05-28T15:00:00+01:00</published><updated>2018-05-28T15:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:blog.thedigitalcatonline.com,2018-05-28:/blog/2018/05/28/exploring-the-amiga-2/</id><summary type="html"></summary><content type="html">&lt;h1&gt;The library jump table&lt;/h1&gt;
&lt;p&gt;As already mentioned when a library is loaded in memory a jump table is created just before the library base address. This table contains the addresses of the functions exposed by the library, and Exec itself has one.&lt;/p&gt;
&lt;p&gt;The jump table functions order for the Exec library is specified in one of the include files provided by the NDK, namely &lt;code&gt;include_i/exec/exec_lib.i&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;FUNCDEF&lt;/span&gt; &lt;span class="n"&gt;Supervisor&lt;/span&gt;
    &lt;span class="n"&gt;FUNCDEF&lt;/span&gt; &lt;span class="n"&gt;execPrivate1&lt;/span&gt;
    &lt;span class="n"&gt;FUNCDEF&lt;/span&gt; &lt;span class="n"&gt;execPrivate2&lt;/span&gt;
    &lt;span class="n"&gt;FUNCDEF&lt;/span&gt; &lt;span class="n"&gt;execPrivate3&lt;/span&gt;
    &lt;span class="n"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;FUNCDEF&lt;/span&gt; &lt;span class="n"&gt;OpenLibrary&lt;/span&gt;
    &lt;span class="n"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see this file makes use of the &lt;code&gt;FUNCDEF&lt;/code&gt; macro, which is not provided and has to be implemented by the coder. The idea of the macro is very simple: as the order of the jump table does not change we can just replace the first &lt;code&gt;FUNCDEF&lt;/code&gt; with the offset of the first function in the library and then increment this offset with the default size of the jump address. The expected output of the macro is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;_LVOSupervisor&lt;/span&gt;     &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;_LVOexecPrivate1&lt;/span&gt;   &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;
    &lt;span class="n"&gt;_LVOexecPrivate2&lt;/span&gt;   &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;
    &lt;span class="n"&gt;_LVOexecPrivate3&lt;/span&gt;   &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;
    &lt;span class="n"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;_LVOOpenLibrary&lt;/span&gt;    &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;552&lt;/span&gt;
    &lt;span class="n"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that the name of the function has been replaced by another string prepending &lt;code&gt;_LVO&lt;/code&gt; to avoid clashes with the actual function definition (&lt;code&gt;LVO&lt;/code&gt; stands for Library Vector Offset).&lt;/p&gt;
&lt;p&gt;The above figures come from the Special Constants contained in the &lt;code&gt;include_i/exec/libraries.i&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;*------ Special Constants ---------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;LIB_VECTSIZE&lt;/span&gt;    &lt;span class="o"&gt;EQU&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;       &lt;span class="c1"&gt;;Each library entry takes 6 bytes&lt;/span&gt;
&lt;span class="n"&gt;LIB_RESERVED&lt;/span&gt;    &lt;span class="o"&gt;EQU&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;       &lt;span class="c1"&gt;;Exec reserves the first 4 vectors&lt;/span&gt;
&lt;span class="n"&gt;LIB_BASE&lt;/span&gt;    &lt;span class="o"&gt;EQU&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;LIB_VECTSIZE&lt;/span&gt;
&lt;span class="n"&gt;LIB_USERDEF&lt;/span&gt; &lt;span class="o"&gt;EQU&lt;/span&gt; &lt;span class="n"&gt;LIB_BASE&lt;/span&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="n"&gt;LIB_RESERVED&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;LIB_VECTSIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;First user func&lt;/span&gt;
&lt;span class="n"&gt;LIB_NONSTD&lt;/span&gt;  &lt;span class="o"&gt;EQU&lt;/span&gt; &lt;span class="n"&gt;LIB_USERDEF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AS you can see from the comments, Exec reserves the first 4 vectors, so the first function's address is &lt;code&gt;LIB_USERDEF&lt;/code&gt;. To understand why the addresses are negative and how the offset is computed let's get a snapshot of the library once it has been loaded in memory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                              HIGHER MEMORY ADDRESSES
                            +-------------------------+
Last byte of the            | End of the library      |
library loaded in ---------&amp;gt;+-------------------------+
memory                      | [...]                   |
                            +-------------------------+
                            | Content of the library  |
                            +-------------------------+
                            | Library structure       |
Library base address ------&amp;gt;+-------------------------+
                            | 1st reserved vector     |
                            +-------------------------+&amp;lt;--- LIB_BASE
                            | 2nd reserved vector     |
                            +-------------------------+&amp;lt;--+
                            | 3rd reserved vector     |   | LIB_VECTSIZE
                            +-------------------------+&amp;lt;--+
                            | 4th reserved vector     |
                            +-------------------------+
                            | 1st defined function    |
                            +-------------------------+&amp;lt;--- LIB_USERDEF
                            | 2nd defined function    |
                            +-------------------------+
                            | [...]                   |
                            +-------------------------+
First byte of the           | End of the jump table   |
library loaded in ---------&amp;gt;+-------------------------+
memory                        LOWER MEMORY ADDRESSES
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can find an official version of this in the &lt;a href="http://amigadev.elowar.com/read/ADCD_2.1/AmigaMail_Vol2_guide/node0189.html"&gt;documentation&lt;/a&gt;. Pay attention that the picture in the documentation represents memory upside down, with lower memory addresses towards the top of the page.&lt;/p&gt;
&lt;p&gt;As you can see the library is loaded as expected from the base address towards the higher memory addresses, but at the same time the jump table is prefixed &lt;em&gt;in reverse order&lt;/em&gt;. This is done to allow you to find the address of a function with a simple (negative) indexing instead of a more complex algorithm. Function number 1 is at address &lt;code&gt;-1 * address_size&lt;/code&gt;, function number 2 at address &lt;code&gt;-2 * address_size&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;This is why we use negative offsets to call library functions but positive ones to access the library data and structures.&lt;/p&gt;
&lt;p&gt;You can also see from the figure where the Special Constants &lt;code&gt;LIB_BASE&lt;/code&gt; and &lt;code&gt;LIB_USERDEF&lt;/code&gt; are located. The actual values are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LIB_BASE&lt;/span&gt;    &lt;span class="o"&gt;EQU&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;LIB_USERDEF&lt;/span&gt; &lt;span class="o"&gt;EQU&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A good definition of the &lt;code&gt;FUNCDEF&lt;/code&gt; macro, thus, is the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;INCLUDE&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;exec/libraries.i&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;MACRO&lt;/span&gt;   &lt;span class="n"&gt;FUNCDEF&lt;/span&gt;
&lt;span class="n"&gt;_LVO&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="o"&gt;EQU&lt;/span&gt;      &lt;span class="n"&gt;FUNC_CNT&lt;/span&gt;
&lt;span class="n"&gt;FUNC_CNT&lt;/span&gt;    &lt;span class="o"&gt;SET&lt;/span&gt;      &lt;span class="n"&gt;FUNC_CNT&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;LIB_VECTSIZE&lt;/span&gt;
    &lt;span class="o"&gt;ENDM&lt;/span&gt;

&lt;span class="n"&gt;FUNC_CNT&lt;/span&gt;    &lt;span class="o"&gt;SET&lt;/span&gt;      &lt;span class="n"&gt;LIB_USERDEF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last line initializes the &lt;code&gt;FUNC_CNT&lt;/code&gt; symbol with the &lt;code&gt;LIB_USERDEF&lt;/code&gt; value. Then each call of the &lt;code&gt;FUNCDEF &amp;lt;arg&amp;gt;&lt;/code&gt; macro does two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creates the &lt;code&gt;_LVO&amp;lt;arg&amp;gt;&lt;/code&gt; symbol with value &lt;code&gt;FUNC_CNT&lt;/code&gt; (e.g. &lt;code&gt;_LVOSupervisor EQU -30&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Decrements the &lt;code&gt;FUNC_CNT&lt;/code&gt; symbol by &lt;code&gt;LIB_VECTSIZE&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Please note that the example &lt;code&gt;FUNCDEF&lt;/code&gt; that you can find (commented) in &lt;code&gt;libraries.i&lt;/code&gt; won't work out of the box as &lt;code&gt;FUNC_CNT&lt;/code&gt; is defined inside the macro itself, while it has to be already defined before the first use of the macro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;*------ FUNCDEF is used to parse library offset tables.  Many applications&lt;/span&gt;
&lt;span class="c1"&gt;*------ need a special version of FUNCDEF - you provide your own macro&lt;/span&gt;
&lt;span class="c1"&gt;*------ to match your needs.  Here is an example:&lt;/span&gt;
&lt;span class="c1"&gt;*&lt;/span&gt;
&lt;span class="c1"&gt;*    FUNCDEF     MACRO&lt;/span&gt;
&lt;span class="c1"&gt;*    _LVO\1      EQU    FUNC_CNT&lt;/span&gt;
&lt;span class="c1"&gt;*    FUNC_CNT    SET    FUNC_CNT-6  * Standard offset-6 bytes each&lt;/span&gt;
&lt;span class="c1"&gt;*    FUNC_CNT    EQU    LIB_USERDEF * Skip 4 standard vectors&lt;/span&gt;
&lt;span class="c1"&gt;*                ENDM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can put the &lt;code&gt;FUNCDEF&lt;/code&gt; macro code in a local include file like &lt;code&gt;funcdef.i&lt;/code&gt;. Including it your code allows you to use &lt;code&gt;_LVO&lt;/code&gt; prefixed labels for the functions that you want to load&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;INCLUDE&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;funcdef.i&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;INCLUDE&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;exec/exec_lib.i&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;.w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;a6&lt;/span&gt;
    &lt;span class="k"&gt;clr&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt;   &lt;span class="o"&gt;d0&lt;/span&gt;
    &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt;  &lt;span class="nl"&gt;#libname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;a1&lt;/span&gt;
    &lt;span class="k"&gt;jsr&lt;/span&gt;     &lt;span class="n"&gt;_LVOOpenLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;a6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nl"&gt;libname:&lt;/span&gt;
    &lt;span class="o"&gt;dc.b&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;somename.library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, if you want to be even more explicit you can use the &lt;code&gt;CALLLIB&lt;/code&gt; macro defined in &lt;code&gt;libraries.i&lt;/code&gt; and write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;INCLUDE&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;funcdef.i&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;INCLUDE&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;exec/exec_lib.i&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;INCLUDE&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;exec/libraries.i&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;.w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;a6&lt;/span&gt;
    &lt;span class="k"&gt;clr&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt;   &lt;span class="o"&gt;d0&lt;/span&gt;
    &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt;  &lt;span class="nl"&gt;#libname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;a1&lt;/span&gt;
    &lt;span class="n"&gt;CALLLIB&lt;/span&gt; &lt;span class="n"&gt;_LVOOpenLibrary&lt;/span&gt;

&lt;span class="nl"&gt;libname:&lt;/span&gt;
    &lt;span class="o"&gt;dc.b&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;somename.library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;The four reserved vectors&lt;/h1&gt;
&lt;p&gt;As we saw, the Amiga system reserves 4 vectors at the beginning of the jump table of a library. These 4 spaces host 3 standard functions that shall be provided by any library, &lt;code&gt;Open()&lt;/code&gt;, &lt;code&gt;Close()&lt;/code&gt;, and &lt;code&gt;Expunge()&lt;/code&gt;. The fourth slot is kept for possible future expansions and must contain a function that returns 0.&lt;/p&gt;
&lt;p&gt;The offsets of these functions are contained in the &lt;code&gt;exec/libraries.i&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;*----------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;*&lt;/span&gt;
&lt;span class="c1"&gt;*   Standard Library Functions&lt;/span&gt;
&lt;span class="c1"&gt;*&lt;/span&gt;
&lt;span class="c1"&gt;*----------------------------------------------------------------&lt;/span&gt;

    &lt;span class="n"&gt;LIBINIT&lt;/span&gt; &lt;span class="n"&gt;LIB_BASE&lt;/span&gt;

    &lt;span class="n"&gt;LIBDEF&lt;/span&gt;  &lt;span class="n"&gt;LIB_OPEN&lt;/span&gt;
    &lt;span class="n"&gt;LIBDEF&lt;/span&gt;  &lt;span class="n"&gt;LIB_CLOSE&lt;/span&gt;
    &lt;span class="n"&gt;LIBDEF&lt;/span&gt;  &lt;span class="n"&gt;LIB_EXPUNGE&lt;/span&gt; &lt;span class="c1"&gt;; must exist in all libraries&lt;/span&gt;
    &lt;span class="n"&gt;LIBDEF&lt;/span&gt;  &lt;span class="n"&gt;LIB_EXTFUNC&lt;/span&gt; &lt;span class="c1"&gt;; for future expansion - must return zero.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the effect of the above macros with the previous constants is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LIB_OPEN&lt;/span&gt;        &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;LIB_CLOSE&lt;/span&gt;       &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="n"&gt;LIB_EXPUNGE&lt;/span&gt;     &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;
&lt;span class="n"&gt;LIB_EXTFUNC&lt;/span&gt;     &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can try to follow the definitions of the &lt;code&gt;LIBINIT&lt;/code&gt; and &lt;code&gt;LIBDEF&lt;/code&gt; macros to obtain the same result.&lt;/p&gt;
&lt;h1&gt;Types and structures&lt;/h1&gt;
&lt;p&gt;Let's see how the Exec library defines its types, which are the base components of the Amiga system. The main entry point for this investigation is the &lt;code&gt;include_i/exec/types.i&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;When working with data structures in Assembly, everything is expressed in terms of offsets. The main idea behind structures is to create something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STRUCT1&lt;/span&gt;         &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;OFFSET&lt;/span&gt;          &lt;span class="o"&gt;SET&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;FIELD1&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="o"&gt;OFFSET&lt;/span&gt;
&lt;span class="o"&gt;OFFSET&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="o"&gt;OFFSET&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;SIZE_OF_FIELD1&lt;/span&gt;
&lt;span class="n"&gt;FIELD2&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="o"&gt;OFFSET&lt;/span&gt;
&lt;span class="o"&gt;OFFSET&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="o"&gt;OFFSET&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;SIZE_OF_FIELD2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;STRUCT1_SIZE&lt;/span&gt;    &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="o"&gt;OFFSET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which, once run through the macro expansion, creates the following code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STRUCT1&lt;/span&gt;         &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;FIELD1&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;FIELD2&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="n"&gt;SIZE_OF_FIELD1&lt;/span&gt;
&lt;span class="n"&gt;FIIELD3&lt;/span&gt;         &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="n"&gt;SIZE_OF_FIELD1&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;SIZE_OF_FIELD2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;STRUCT1_SIZE&lt;/span&gt;    &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="n"&gt;SIZE_OF_FIELD1&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;SIZE_OF_FIELDn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the type macros are all defined with code like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TYPENAME&lt;/span&gt;    &lt;span class="o"&gt;MACRO&lt;/span&gt;
&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="n"&gt;SOFFSET&lt;/span&gt;
&lt;span class="n"&gt;SOFFSET&lt;/span&gt;     &lt;span class="o"&gt;SET&lt;/span&gt;     &lt;span class="n"&gt;SOFFSET&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;SIZE_OF_TYPE&lt;/span&gt;
            &lt;span class="o"&gt;ENDM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example the &lt;code&gt;BYTE&lt;/code&gt; macro is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt;        &lt;span class="o"&gt;MACRO&lt;/span&gt;       &lt;span class="c1"&gt;; byte (8 bits)&lt;/span&gt;
&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="n"&gt;SOFFSET&lt;/span&gt;
&lt;span class="n"&gt;SOFFSET&lt;/span&gt;     &lt;span class="o"&gt;SET&lt;/span&gt;     &lt;span class="n"&gt;SOFFSET&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="o"&gt;ENDM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the field is defined with &lt;code&gt;EQU&lt;/code&gt; to avoid unwanted overwrites, while &lt;code&gt;SOFFSET&lt;/code&gt; uses &lt;code&gt;SET&lt;/code&gt; that allows to redefine the symbol.&lt;/p&gt;
&lt;p&gt;Let's see now how a real structure is defined. A good example is &lt;code&gt;LN&lt;/code&gt; defined in &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt; which represents a node of a linked list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;STRUCTURE&lt;/span&gt;    &lt;span class="n"&gt;LN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="c1"&gt;; List Node&lt;/span&gt;
    &lt;span class="n"&gt;APTR&lt;/span&gt;    &lt;span class="n"&gt;LN_SUCC&lt;/span&gt; &lt;span class="c1"&gt;; Pointer to next (successor)&lt;/span&gt;
    &lt;span class="n"&gt;APTR&lt;/span&gt;    &lt;span class="n"&gt;LN_PRED&lt;/span&gt; &lt;span class="c1"&gt;; Pointer to previous (predecessor)&lt;/span&gt;
    &lt;span class="n"&gt;UBYTE&lt;/span&gt;   &lt;span class="n"&gt;LN_TYPE&lt;/span&gt;
    &lt;span class="n"&gt;BYTE&lt;/span&gt;    &lt;span class="n"&gt;LN_PRI&lt;/span&gt;  &lt;span class="c1"&gt;; Priority, for sorting&lt;/span&gt;
    &lt;span class="n"&gt;APTR&lt;/span&gt;    &lt;span class="n"&gt;LN_NAME&lt;/span&gt; &lt;span class="c1"&gt;; ID string, null terminated&lt;/span&gt;
    &lt;span class="n"&gt;LABEL&lt;/span&gt;   &lt;span class="n"&gt;LN_SIZE&lt;/span&gt; &lt;span class="c1"&gt;; Note: word aligned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;STRUCTURE&lt;/code&gt; macro is defined in &lt;code&gt;types.i&lt;/code&gt; as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STRUCTURE&lt;/span&gt;   &lt;span class="o"&gt;MACRO&lt;/span&gt;       &lt;span class="c1"&gt;; structure name, initial offset&lt;/span&gt;
&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;SOFFSET&lt;/span&gt;     &lt;span class="o"&gt;SET&lt;/span&gt;     &lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
            &lt;span class="o"&gt;ENDM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the resulting declarations, once the macros have been expanded, are the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LN&lt;/span&gt;          &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;LN_SUCC&lt;/span&gt;     &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;LN_PRED&lt;/span&gt;     &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;LN_TYPE&lt;/span&gt;     &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;LN_PRI&lt;/span&gt;      &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;LN_NAME&lt;/span&gt;     &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;LN_SIZE&lt;/span&gt;     &lt;span class="o"&gt;EQU&lt;/span&gt;     &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the field names are just offsets inside the structure, and there is no specific padding at the end to align the structure. In this case there is no need, as the structure size is already a multiple of a word (14 bytes).&lt;/p&gt;
&lt;h2&gt;How to align structures&lt;/h2&gt;
&lt;p&gt;If we need to align the bytes however we can use a little binary trick. If you ignore the least significant bit of a binary number you convert it to the nearest even number (downwards). An example in Python is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0b1101&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0b1100&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and even numbers are separated exactly by two positions. So if we get the current offset, we increase it by one and round down to the nearest integer we are aligning the offset to multiples of a word (2 bytes). The &lt;code&gt;ALIGNWORD&lt;/code&gt; macro in the &lt;code&gt;include_i/exec/types.i&lt;/code&gt; file implements exactly this algorithm&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ALIGNWORD&lt;/span&gt;   &lt;span class="o"&gt;MACRO&lt;/span&gt;       &lt;span class="c1"&gt;; Align structure offset to nearest word&lt;/span&gt;
&lt;span class="n"&gt;SOFFSET&lt;/span&gt;     &lt;span class="o"&gt;SET&lt;/span&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SOFFSET&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;$fffffffe&lt;/span&gt;
            &lt;span class="o"&gt;ENDM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be seen in action in the &lt;code&gt;CardHandle&lt;/code&gt; structure defined in &lt;code&gt;include_i/resources/card.i&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Amiga System Programmers Guide, Abacus (&lt;a href="https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus"&gt;pdf here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://amigadev.elowar.com"&gt;AmigaOS Developer Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Feedback&lt;/h1&gt;
&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="http://github.com/TheDigitalCatOnline/thedigitalcatonline.github.com/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 1</title><link href="http://blog.thedigitalcatonline.com/blog/2018/05/28/exploring-the-amiga-1/" rel="alternate"></link><published>2018-05-28T14:00:00+01:00</published><updated>2018-05-28T14:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:blog.thedigitalcatonline.com,2018-05-28:/blog/2018/05/28/exploring-the-amiga-1/</id><summary type="html"></summary><content type="html">&lt;p&gt;Recently I decided to give some time to retroprogramming, and in particular to explore the architecture of some famous microcomputer and consoles of the 80s and 90s. Glorious 8-bit systems like the ZX Spectrum, the Commodore 64, or the Nintendo Entertainment System. 16-bits giants the likes of the Amiga, its (eventually winning) MS-DOS-based counterparts running on the early x86 architectures, the immortal Nintendo Super Famicom and SEGA Genesis.&lt;/p&gt;
&lt;p&gt;I am deeply convinced that learning architectures is a perfect way to become a better programmer, even now that we have 64-bits processors, fifth generation languages, and Internet. Those old systems had many limitations and to get interesting results the programmer has to know the hardware and exploit every single bit of power it can deliver.&lt;/p&gt;
&lt;p&gt;This is sometimes not true any more nowadays. On the one hand this is good, as it allows us to concentrate on business decisions and on higher layer of abstraction. On the other hand it was and it will always be useful for a programmer to face a limited system and to try to get the maximum out of it.&lt;/p&gt;
&lt;p&gt;This series of posts is about the Commodore Amiga. Thousands of words have already been written on the Amiga, and I will not add anything but "milestone" to the adjectives used to describe it. This post and the following ones are not intended to be a complete and well-organised review of the architecture. Instead, they will be more a set of "lab notes" for myself that I write while I explore the platform. I put them on the blog in the hope that they will be useful for other programmers that try to crack the same problems.&lt;/p&gt;
&lt;h1&gt;Assembly language and the Amiga&lt;/h1&gt;
&lt;p&gt;If you want to write Assembly programs for the Amiga you can either work directly on a real system or use a cross-compiler. I prefer to work on my Linux system because, as much as I like retro architectures, I also like the power of a good Unix system and a modern editor.&lt;/p&gt;
&lt;p&gt;Cross-compiling is a very simple concept: instead of compiling source code and creating binaries for the architecture you are running the compiler on, you create binaries for a different architecture. In this case the host architecture is Linux/amd64 and the target architecture is Amiga.&lt;/p&gt;
&lt;p&gt;As this is not the only project I am following at the moment, I created a directory to host everything I need for the Amiga development: compiler, documentation, scripts.&lt;/p&gt;
&lt;h2&gt;Install vasm&lt;/h2&gt;
&lt;p&gt;On Linux you can both use the GCC compiler or install vasm. This latter uses the same syntax as the standard Amiga assemblers, especially for compiler directives like &lt;code&gt;macro&lt;/code&gt; and &lt;code&gt;include&lt;/code&gt;, thus making it easier to pick up and use code published in books and in magazines during the 80s.&lt;/p&gt;
&lt;p&gt;To install the latest vasm you can run the following code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -q &lt;span class="s2"&gt;&amp;quot;http://sun.hasenbraten.de/vasm/release/vasm.tar.gz&amp;quot;&lt;/span&gt;
tar xvf vasm.tar.gz &lt;span class="c1"&gt;# The file is not actually gzipped&lt;/span&gt;
rm vasm.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; vasm
make &lt;span class="nv"&gt;CPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;m68k &lt;span class="nv"&gt;SYNTAX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mot
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install a disassembler&lt;/h2&gt;
&lt;p&gt;The vbcc suite written by Volker Barthelmann contains a disassembler for the M68k architecture that you can find &lt;a href="http://sun.hasenbraten.de/~frank/projects/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A disassembler is a handy tool that can reveal a lot about how a program works. You can install it with the following code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -q &lt;span class="s2"&gt;&amp;quot;http://sun.hasenbraten.de/~frank/projects/download/vdam68k.tar.gz&amp;quot;&lt;/span&gt;
tar xvzf vdam68k.tar.gz 
&lt;span class="nb"&gt;cd&lt;/span&gt; vda/M68k/
make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will create the &lt;code&gt;vda/M68k/vda68k&lt;/code&gt; that you can use to disassemble Amiga programs or ROM dumps.&lt;/p&gt;
&lt;h2&gt;Install the NDK&lt;/h2&gt;
&lt;p&gt;The Native Development Kit (the Amiga SDK) contains include files that can be very helpful (though not strictly necessary) when developing. Unfortunately the NDK is still copyrighted by some of the guys that are trying to resurrect the Amiga. This latter idea is nice, but I really do not understand how preventing distribution of development documentation about a platform dead more than 20 years ago might help such a project.&lt;/p&gt;
&lt;p&gt;Whatever, you can get an old version of the Amiga Developer CD &lt;a href="https://archive.org/details/amiga-developer-cd-v1_1"&gt;here&lt;/a&gt;. This contains the NDK version 3.1 which is enough for what we are going to learn in this series.&lt;/p&gt;
&lt;p&gt;You may want to rename the &lt;code&gt;Includes&amp;amp;Libs&lt;/code&gt; directory to &lt;code&gt;Includes_Libs&lt;/code&gt; to simplify its access by the compiler command line (&lt;code&gt;&amp;amp;&lt;/code&gt; is a special character in bash).&lt;/p&gt;
&lt;h2&gt;Helper script and test&lt;/h2&gt;
&lt;p&gt;I created a &lt;code&gt;asm.sh&lt;/code&gt; helper script to simplify the development process&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/where/you/put/everything&amp;quot;&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/vasm/vasmm68k_mot -kick1hunks -Fhunkexe -I&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/NDK_3.1/Include_Libs/include_i -o &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/.asm/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -nosym &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't forget to run &lt;code&gt;chmod 775 asm.sh&lt;/code&gt; to make the script executable. Now run the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;loop:\n btst #6,\$bfe001\n bne loop\n rts\n&amp;quot;&lt;/span&gt; &amp;gt; test.asm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./asm.sh test.asm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This compiles a very small program that loops until you press the right mouse button. If everything has been correctly installed you should get the following output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vasm &lt;span class="m"&gt;1&lt;/span&gt;.8c &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; in &lt;span class="m"&gt;2002&lt;/span&gt;-2018 Volker Barthelmann
vasm M68k/CPU32/ColdFire cpu backend &lt;span class="m"&gt;2&lt;/span&gt;.3b &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2002&lt;/span&gt;-2017 Frank Wille
vasm motorola syntax module &lt;span class="m"&gt;3&lt;/span&gt;.11c &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2002&lt;/span&gt;-2018 Frank Wille
vasm hunk format output module &lt;span class="m"&gt;2&lt;/span&gt;.9b &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2002&lt;/span&gt;-2017 Frank Wille

CODE&lt;span class="o"&gt;(&lt;/span&gt;acrx2&lt;span class="o"&gt;)&lt;/span&gt;:              &lt;span class="m"&gt;12&lt;/span&gt; bytes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And running the &lt;code&gt;file&lt;/code&gt; command should return the correct type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ file &lt;span class="nb"&gt;test&lt;/span&gt;
test: AmigaOS loadseg&lt;span class="o"&gt;()&lt;/span&gt;ble executable/binary
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;LEA, the PC and the relative offset&lt;/h1&gt;
&lt;p&gt;In Assembly you can manage memory cells using either their content or the address, as you can do with pointers in C or similar concepts in other high-level languages. You can also set labels that the assembler will convert in instruction addresses, but these are (almost) always relative to the beginning of the code itself, as the code may be loaded anywhere in memory.&lt;/p&gt;
&lt;p&gt;This means that, generally speaking, all the addresses we use when we branch to other parts of the code should be relative to the current instruction.&lt;/p&gt;
&lt;p&gt;The Motorola 68k calls this addressing mode &lt;em&gt;Program Counter Indirect with Displacement Mode&lt;/em&gt;. Its description contained in the Programmer's Reference Manual is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this mode, the operand is in memory. The address of the operand is the sum of the address in the program counter (PC) and the sign-extended 16-bit displacement integer in the extension word. The value in the PC is the address of the extension word.&lt;/p&gt;
&lt;p&gt;(2.2.11, page 13)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The usual assembler syntax for this addressing mode is &lt;code&gt;(d16,PC)&lt;/code&gt; or &lt;code&gt;d16(PC)&lt;/code&gt;, where &lt;code&gt;d16&lt;/code&gt; is a 16-bits displacement. The &lt;code&gt;lea&lt;/code&gt; instruction, for example, supports this mode, so we can find code like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;0364:&lt;/span&gt; &lt;span class="mi"&gt;41fa&lt;/span&gt; &lt;span class="mi"&gt;ffa6&lt;/span&gt;         &lt;span class="k"&gt;lea&lt;/span&gt;     &lt;span class="mi"&gt;0x30c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;a0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here the instruction is stored at address &lt;code&gt;0x0364&lt;/code&gt; and it loads in the &lt;code&gt;a0&lt;/code&gt; register the &lt;em&gt;effective address&lt;/em&gt; of the instruction at &lt;code&gt;0x030c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pay attention: since your code starts always at address &lt;code&gt;0x0&lt;/code&gt;, you might be tempted to store the value &lt;code&gt;0x030c&lt;/code&gt; into &lt;code&gt;a0&lt;/code&gt; and go on. You want however to load the address that instruction has at runtime, which will be different from the current one. The displacement, however, will be the same, as the code doesn't change its form, and this is why this addressing mode is useful.&lt;/p&gt;
&lt;h2&gt;Relative offset encoding&lt;/h2&gt;
&lt;p&gt;A question may arise, then: why does the code show the address &lt;code&gt;0x30&lt;/code&gt; if the displacement is relative?&lt;/p&gt;
&lt;p&gt;Let's dig into the binary representation of the instruction to see how the processor receives it. The value &lt;code&gt;0x41faffa6&lt;/code&gt; in binary form is &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;01000001111110101111111110100110
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we split it according to the Motorola 68k opcodes scheme (Programmer's Reference Manual, Section 8) we get&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0100 000 111 111010 1111111110100110
^    ^       ^
lea  a0      (d16,PC)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we know this is a &lt;code&gt;lea&lt;/code&gt; to &lt;code&gt;a0&lt;/code&gt; using Program Counter with Displacement. The address argument is &lt;code&gt;1111111110100110&lt;/code&gt;, which has to be interpreted as a "sign-extended 16-bit displacement integer" as the Reference Manual stated.
The value is the two's complement representation of the decimal &lt;code&gt;-90&lt;/code&gt;, and since the PC is pointing at the address itself (&lt;code&gt;0x0366&lt;/code&gt;) the resulting address is &lt;code&gt;0x0366 - 90&lt;/code&gt;, which gives &lt;code&gt;0x030c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fact that the PC is pointing at the address might be overlooked. The manual says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The value in the PC is the address of the extension word.
2.2.11 (2-13)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, while the Assembly code uses the correct value for simplicity's sake, the actual opcode contains a true displacement from the current position.&lt;/p&gt;
&lt;h1&gt;How to open a library&lt;/h1&gt;
&lt;p&gt;When you code in a high level language like C you usually refer to functions of an external library in your code and then provide the library object files on the compiler command line. The code of the library is either included in the code of your program or loaded into memory at runtime (shared libraries), but in both cases the function call is, at the machine language level, just a jump to a different address in memory.&lt;/p&gt;
&lt;p&gt;If you write a program directly in Assembly language things are not different, you can always rely on the linker to properly address external libraries. In a platform like Amiga, however, it's custom to access the system libraries in a direct way, manually jumping to the right address, which is why sometimes tutorials and books contain "magic numbers".&lt;/p&gt;
&lt;p&gt;When the Amiga OS loads a library in memory the Exec master library analyses its structure and creates the so-called &lt;em&gt;jump table&lt;/em&gt;. This is nothing more than an array that lists the addresses of the functions exposed by the library. This is a very simple and effective way to let the OS free to load the library anywhere in memory (relocation).&lt;/p&gt;
&lt;p&gt;The Exec master library is not different, but this library is loaded as part of the bootstrap process, and the base address is always stored in memory location &lt;code&gt;0x4&lt;/code&gt;. To use one of Exec's functions, then, we just need to issue a &lt;code&gt;jsr &amp;lt;address&amp;gt;&lt;/code&gt; (&lt;code&gt;j&lt;/code&gt;ump to &lt;code&gt;s&lt;/code&gt;ub&lt;code&gt;r&lt;/code&gt;outine), where &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; is the current position in memory of the function we want to call. Since we don't know the absolute address, being the library dynamically loaded, we use the library's jump table to retrieve the base address and get the function address as a fixed offset from the former.&lt;/p&gt;
&lt;p&gt;Many Amiga programmers knew (and know) the addresses by heart, which is fine since the Amiga OS promises not to change them among different versions. So, for example, the &lt;code&gt;OpenLibrary&lt;/code&gt; function can be found at address &lt;code&gt;-552&lt;/code&gt; relative to the library base, while &lt;code&gt;CloseLibrary&lt;/code&gt; is at &lt;code&gt;-414&lt;/code&gt;. To call the &lt;code&gt;OpenLibrary&lt;/code&gt; function, then, you need the following code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;.w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;a6&lt;/span&gt;   &lt;span class="c1"&gt;; a6 = base address of Exec&lt;/span&gt;
    &lt;span class="k"&gt;jsr&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;552&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;a6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;; OpenLibrary()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first instruction moves the value contained at address &lt;code&gt;0x4&lt;/code&gt; into the &lt;code&gt;a6&lt;/code&gt; register. This way the register will contain the base address of Exec. Then it jumps to the subroutine which address is 552 bytes before that base address. So, if &lt;code&gt;a6&lt;/code&gt; contains an address like &lt;code&gt;0x20000&lt;/code&gt; the code jumps to &lt;code&gt;0x1fdd8&lt;/code&gt; (&lt;code&gt;0x20000 - 552&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OpenLibrary&lt;/code&gt; function, however, expects some parameters, as you can see on the documentation page &lt;code&gt;exec.library/OpenLibrary&lt;/code&gt; (&lt;a href="http://amigadev.elowar.com/read/ADCD_2.1/Includes_and_Autodocs_3._guide/node0222.html"&gt;here&lt;/a&gt;). The pointer to the library name has to be in the register &lt;code&gt;a1&lt;/code&gt; and the minimum accepted version in &lt;code&gt;d0&lt;/code&gt;. The code becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;.w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;a6&lt;/span&gt;        &lt;span class="c1"&gt;; a6 = base address of Exec&lt;/span&gt;
    &lt;span class="k"&gt;clr&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt; &lt;span class="o"&gt;d0&lt;/span&gt;             &lt;span class="c1"&gt;; 0 = accept all versions&lt;/span&gt;
    &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.l&lt;/span&gt; &lt;span class="nl"&gt;#libname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;a1&lt;/span&gt;   &lt;span class="c1"&gt;; a1 = address of the libname string&lt;/span&gt;
    &lt;span class="k"&gt;jsr&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;552&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;a6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;; OpenLibrary()&lt;/span&gt;

&lt;span class="nl"&gt;libname:&lt;/span&gt;
    &lt;span class="o"&gt;dc.b&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;somename.library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;PDF here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://amigadev.elowar.com"&gt;AmigaOS Developer Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Feedback&lt;/h1&gt;
&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="http://github.com/TheDigitalCatOnline/thedigitalcatonline.github.com/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry></feed>